/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={272:(e,t,n)=>{"use strict";var r=n(723),i=[],o=[],a=r.makeRequestCallFromTimer((function(){if(o.length)throw o.shift()}));function u(e){var t;(t=i.length?i.pop():new l).task=e,r(t)}function l(){this.task=null}e.exports=u,l.prototype.call=function(){try{this.task.call()}catch(e){u.onerror?u.onerror(e):(o.push(e),a())}finally{this.task=null,i[i.length]=this}}},723:(e,t,n)=>{"use strict";function r(e){o.length||i(),o[o.length]=e}e.exports=r;var i,o=[],a=0;function u(){for(;a<o.length;){var e=a;if(a+=1,o[e].call(),a>1024){for(var t=0,n=o.length-a;t<n;t++)o[t]=o[t+a];o.length-=a,a=0}}o.length=0,a=0}var l,c,s,f=void 0!==n.g?n.g:self,p=f.MutationObserver||f.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof p?(l=1,c=new p(u),s=document.createTextNode(""),c.observe(s,{characterData:!0}),i=function(){l=-l,s.data=l}):i=d(u),r.requestFlush=i,r.makeRequestCallFromTimer=d},33:(e,t,n)=>{"use strict";var r=n(294),i=n(935),o=n(121),a=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+a(),REPLACE:"@@redux/REPLACE"+a(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+a()}};function l(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}var y=n(697),m=n.n(y),v=r.createContext(null),g=function(e){e()},b=function(){return g},_={notify:function(){}},w=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=_,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=b(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=_)},e}(),S="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;const x=function(e){var t=e.store,n=e.context,i=e.children,o=(0,r.useMemo)((function(){var e=new w(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),a=(0,r.useMemo)((function(){return t.getState()}),[t]);S((function(){var e=o.subscription;return e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,a]);var u=n||v;return r.createElement(u.Provider,{value:o},i)};function k(){return(k=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function E(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var T=n(679),O=n.n(T),C=n(864),P=[],z=[null,null];function I(e,t){var n=e[1];return[t.payload,n+1]}function N(e,t,n){S((function(){return e.apply(void 0,t)}),n)}function j(e,t,n,r,i,o,a){e.current=r,t.current=i,n.current=!1,o.current&&(o.current=null,a())}function M(e,t,n,r,i,o,a,u,l,c){if(e){var s=!1,f=null,p=function(){if(!s){var e,n,p=t.getState();try{e=r(p,i.current)}catch(e){n=e,f=e}n||(f=null),e===o.current?a.current||l():(o.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=p,n.trySubscribe(),p(),function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var R=function(){return[null,0]};function D(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,o=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,a=n.methodName,u=void 0===a?"connectAdvanced":a,l=n.renderCountProp,c=void 0===l?void 0:l,s=n.shouldHandleStateChanges,f=void 0===s||s,p=n.storeKey,d=void 0===p?"store":p,h=(n.withRef,n.forwardRef),y=void 0!==h&&h,m=n.context,g=void 0===m?v:m,b=E(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),_=g;return function(t){var n=t.displayName||t.name||"Component",i=o(n),a=k({},b,{getDisplayName:o,methodName:u,renderCountProp:c,shouldHandleStateChanges:f,storeKey:d,displayName:i,wrappedComponentName:n,WrappedComponent:t}),l=b.pure,s=l?r.useMemo:function(e){return e()};function p(n){var i=(0,r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=E(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),o=i[0],u=i[1],l=i[2],c=(0,r.useMemo)((function(){return o&&o.Consumer&&(0,C.isContextConsumer)(r.createElement(o.Consumer,null))?o:_}),[o,_]),p=(0,r.useContext)(c),d=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(p)&&Boolean(p.store);var h=d?n.store:p.store,y=(0,r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(h)}),[h]),m=(0,r.useMemo)((function(){if(!f)return z;var e=new w(h,d?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[h,d,p]),v=m[0],g=m[1],b=(0,r.useMemo)((function(){return d?p:k({},p,{subscription:v})}),[d,p,v]),S=(0,r.useReducer)(I,P,R),x=S[0][0],T=S[1];if(x&&x.error)throw x.error;var O=(0,r.useRef)(),D=(0,r.useRef)(l),A=(0,r.useRef)(),L=(0,r.useRef)(!1),F=s((function(){return A.current&&l===D.current?A.current:y(h.getState(),l)}),[h,x,l]);N(j,[D,O,L,l,F,A,g]),N(M,[f,h,v,y,D,O,L,A,g,T],[h,v,y]);var B=(0,r.useMemo)((function(){return r.createElement(t,k({},F,{ref:u}))}),[u,t,F]);return(0,r.useMemo)((function(){return f?r.createElement(c.Provider,{value:b},B):B}),[c,B,b])}var h=l?r.memo(p):p;if(h.WrappedComponent=t,h.displayName=i,y){var m=r.forwardRef((function(e,t){return r.createElement(h,k({},e,{reactReduxForwardedRef:t}))}));return m.displayName=i,m.WrappedComponent=t,O()(m,t)}return O()(h,t)}}function A(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function L(e,t){if(A(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!Object.prototype.hasOwnProperty.call(t,n[i])||!A(e[n[i]],t[n[i]]))return!1;return!0}function F(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function B(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function U(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=B(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=B(i),i=r(t,n)),i},r}}const W=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:F((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?F((function(t){return function(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"==typeof i&&(n[r]=s(i,t))}return n}(e,t)})):void 0}],q=[function(e){return"function"==typeof e?U(e):void 0},function(e){return e?void 0:F((function(){return{}}))}];function H(e,t,n){return k({},n,e,t)}const V=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?i&&o(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return H}}];function $(e,t,n,r){return function(i,o){return n(e(i,o),t(r,o),o)}}function K(e,t,n,r,i){var o,a,u,l,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,p=i.areStatePropsEqual,d=!1;return function(i,h){return d?function(i,d){var h,y,m=!f(d,a),v=!s(i,o);return o=i,a=d,m&&v?(u=e(o,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):m?(e.dependsOnOwnProps&&(u=e(o,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(h=e(o,a),y=!p(h,u),u=h,y&&(c=n(u,l,a)),c):c}(i,h):(u=e(o=i,a=h),l=t(r,a),c=n(u,l,a),d=!0,c)}}function Q(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,o=E(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,o),u=r(e,o),l=i(e,o);return(o.pure?K:$)(a,u,l,e,o)}function G(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function Y(e,t){return e===t}function X(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?D:n,i=t.mapStateToPropsFactories,o=void 0===i?q:i,a=t.mapDispatchToPropsFactories,u=void 0===a?W:a,l=t.mergePropsFactories,c=void 0===l?V:l,s=t.selectorFactory,f=void 0===s?Q:s;return function(e,t,n,i){void 0===i&&(i={});var a=i,l=a.pure,s=void 0===l||l,p=a.areStatesEqual,d=void 0===p?Y:p,h=a.areOwnPropsEqual,y=void 0===h?L:h,m=a.areStatePropsEqual,v=void 0===m?L:m,g=a.areMergedPropsEqual,b=void 0===g?L:g,_=E(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=G(e,o,"mapStateToProps"),S=G(t,u,"mapDispatchToProps"),x=G(n,c,"mergeProps");return r(f,k({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:S,initMergeProps:x,pure:s,areStatesEqual:d,areOwnPropsEqual:y,areStatePropsEqual:v,areMergedPropsEqual:b},_))}}const J=X();var Z;function ee(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}Z=i.unstable_batchedUpdates,g=Z;var te=ee();te.withExtraArgument=ee;const ne=te;var re="MARK_AS_READ",ie="SET_TYPE_FILTER",oe="FETCH_NOTIFICATIONS_SUCCESS",ae="SET_LOADING_STATE",ue=(n(300),function(e){return{type:re,index:e}}),le=function(e){return{type:ae,loading:e}};function ce(e,t){return e===t}function se(e,t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,i=0;i<r;i++)if(!e(t[i],n[i]))return!1;return!0}function fe(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return typeof e})).join(", ");throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: ["+n+"]")}return t}var pe=function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=Array(t),i=0;i<t;i++)r[i]=arguments[i];var o=0,a=r.pop(),u=fe(r),l=e.apply(void 0,[function(){return o++,a.apply(null,arguments)}].concat(n)),c=e((function(){for(var e=[],t=u.length,n=0;n<t;n++)e.push(u[n].apply(null,arguments));return l.apply(null,e)}));return c.resultFunc=a,c.dependencies=u,c.recomputations=function(){return o},c.resetRecomputations=function(){return o=0},c}}((function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ce,n=null,r=null;return function(){return se(t,n,arguments)||(r=e.apply(null,arguments)),n=arguments,r}}))((function(e){return e.notifications}),(function(e){var t=e.get("messages"),n=e.get("filter");return t?"URGENT"===n?t.valueSeq().filter((function(e){return!1===e.get("isRead")&&"urgent"===e.get("type")})):t.valueSeq().filter((function(e){return!1===e.get("isRead")})):t})),de=n(887),he=n.n(de),ye=n(272),me=n.n(ye);function ve(e){return(ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ge(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function be(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){ge(e,t,n[t])}))}return e}function _e(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var we=/([A-Z])/g,Se=function(e){return"-".concat(e.toLowerCase())},xe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ke=["Webkit","ms","Moz","O"];Object.keys(xe).forEach((function(e){ke.forEach((function(t){xe[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=xe[e]}))}));var Ee=function(e,t){return"number"==typeof t?xe[e]?""+t:t+"px":""+t},Te=function(e,t){return Ce(Ee(e,t))},Oe=function(e,t){return he()(e).toString(36)},Ce=function(e){return"!"===e[e.length-10]&&" !important"===e.slice(-11)?e:"".concat(e," !important")},Pe="undefined"!=typeof Map,ze=function(){function e(){this.elements={},this.keyOrder=[]}var t=e.prototype;return t.forEach=function(e){for(var t=0;t<this.keyOrder.length;t++)e(this.elements[this.keyOrder[t]],this.keyOrder[t])},t.set=function(t,n,r){if(this.elements.hasOwnProperty(t)){if(r){var i=this.keyOrder.indexOf(t);this.keyOrder.splice(i,1),this.keyOrder.push(t)}}else this.keyOrder.push(t);if(null!=n){if(Pe&&n instanceof Map||n instanceof e){var o=this.elements.hasOwnProperty(t)?this.elements[t]:new e;return n.forEach((function(e,t){o.set(t,e,r)})),void(this.elements[t]=o)}if(Array.isArray(n)||"object"!==ve(n))this.elements[t]=n;else{for(var a=this.elements.hasOwnProperty(t)?this.elements[t]:new e,u=Object.keys(n),l=0;l<u.length;l+=1)a.set(u[l],n[u[l]],r);this.elements[t]=a}}else this.elements[t]=n},t.get=function(e){return this.elements[e]},t.has=function(e){return this.elements.hasOwnProperty(e)},t.addStyleType=function(t){var n=this;if(Pe&&t instanceof Map||t instanceof e)t.forEach((function(e,t){n.set(t,e,!0)}));else for(var r=Object.keys(t),i=0;i<r.length;i++)this.set(r[i],t[r[i]],!0)},e}();function Ie(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function Ne(e,t){return e(t={exports:{}},t.exports),t.exports}var je=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}}));Ie(je);var Me=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var i={},o=e[t],a=(0,r.default)(t),u=Object.keys(n),l=0;l<u.length;l++){var c=u[l];if(c===t)for(var s=0;s<o.length;s++)i[o[s]+a]=n[t];i[c]=n[c]}return i}return n};var n,r=(n=je)&&n.__esModule?n:{default:n}}));Ie(Me);var Re=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,i){for(var o=0,a=e.length;o<a;++o){var u=e[o](t,n,r,i);if(u)return u}}}));Ie(Re);var De=Ne((function(e,t){function n(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var r=0,i=t.length;r<i;++r)n(e,t[r]);else n(e,t)}}));Ie(De);var Ae=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)}}));Ie(Ae);var Le=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,a=e.plugins;return function e(u){for(var l in u){var c=u[l];if((0,o.default)(c))u[l]=e(c);else if(Array.isArray(c)){for(var s=[],f=0,p=c.length;f<p;++f){var d=(0,r.default)(a,l,c[f],u,t);(0,i.default)(s,d||c[f])}s.length>0&&(u[l]=s)}else{var h=(0,r.default)(a,l,c,u,t);h&&(u[l]=h),u=(0,n.default)(t,l,u)}}return u}};var n=a(Me),r=a(Re),i=a(De),o=a(Ae);function a(e){return e&&e.__esModule?e:{default:e}}}))),Fe=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&"text"===t)return["-webkit-text","text"]}}))),Be=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&n.test(e)};var n=/-webkit-|-moz-|-ms-/;e.exports=t.default}));Ie(Be);var Ue=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("calc(")>-1)return i.map((function(e){return t.replace(/calc\(/g,e+"calc(")}))};var n,r=(n=Be)&&n.__esModule?n:{default:n},i=["-webkit-","-moz-",""]}))),We=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("cross-fade(")>-1)return i.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var n,r=(n=Be)&&n.__esModule?n:{default:n},i=["-webkit-",""]}))),qe=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&r.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0}}))),He=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("filter(")>-1)return i.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var n,r=(n=Be)&&n.__esModule?n:{default:n},i=["-webkit-",""]}))),Ve=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&n.hasOwnProperty(t))return n[t]};var n={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]}}))),$e=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,a){if(Object.prototype.hasOwnProperty.call(r,e)&&(a[r[e]]=n[t]||t),"flex"===e){if(Object.prototype.hasOwnProperty.call(i,t))return void(a.msFlex=i[t]);if(o.test(t))return void(a.msFlex=t+" 1 0%");var u=t.split(/\s/);switch(u.length){case 1:return void(a.msFlex="1 1 "+t);case 2:return void(o.test(u[1])?a.msFlex=u[0]+" "+u[1]+" 0%":a.msFlex=u[0]+" 1 "+u[1]);default:a.msFlex=t}}};var n={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},r={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"},i={auto:"1 1 auto",inherit:"inherit",initial:"0 1 auto",none:"0 0 auto",unset:"unset"},o=/^\d+(\.\d+)?$/}))),Ke=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?i.WebkitBoxOrient="vertical":i.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?i.WebkitBoxDirection="reverse":i.WebkitBoxDirection="normal"),r.hasOwnProperty(e)&&(i[r[e]]=n[t]||t)};var n={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},r={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"}}))),Qe=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&o.test(t))return i.map((function(e){return t.replace(o,(function(t){return e+t}))}))};var n,r=(n=Be)&&n.__esModule?n:{default:n},i=["-webkit-","-moz-",""],o=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi}))),Ge=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,i=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(i)throw o}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function r(e){return"number"==typeof e&&!isNaN(e)}t.default=function(e,t,n){if("display"===e&&t in o)return o[t];e in a&&(0,a[e])(t,n)};var i=["center","end","start","stretch"],o={"inline-grid":["-ms-inline-grid","inline-grid"],grid:["-ms-grid","grid"]},a={alignSelf:function(e,t){i.indexOf(e)>-1&&(t.msGridRowAlign=e)},gridColumn:function(e,t){if(r(e))t.msGridColumn=e;else{var i=e.split("/").map((function(e){return+e})),o=n(i,2),u=o[0],l=o[1];a.gridColumnStart(u,t),a.gridColumnEnd(l,t)}},gridColumnEnd:function(e,t){var n=t.msGridColumn;r(e)&&r(n)&&(t.msGridColumnSpan=e-n)},gridColumnStart:function(e,t){r(e)&&(t.msGridColumn=e)},gridRow:function(e,t){if(r(e))t.msGridRow=e;else{var i=e.split("/").map((function(e){return+e})),o=n(i,2),u=o[0],l=o[1];a.gridRowStart(u,t),a.gridRowEnd(l,t)}},gridRowEnd:function(e,t){var n=t.msGridRow;r(e)&&r(n)&&(t.msGridRowSpan=e-n)},gridRowStart:function(e,t){r(e)&&(t.msGridRow=e)},gridTemplateColumns:function(e,t){t.msGridColumns=e},gridTemplateRows:function(e,t){t.msGridRows=e},justifySelf:function(e,t){i.indexOf(e)>-1&&(t.msGridColumnAlign=e)}}}))),Ye=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("image-set(")>-1)return i.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var n,r=(n=Be)&&n.__esModule?n:{default:n},i=["-webkit-",""]}))),Xe=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(Object.prototype.hasOwnProperty.call(n,e))for(var i=n[e],o=0,a=i.length;o<a;++o)r[i[o]]=t};var n={marginBlockStart:["WebkitMarginBefore"],marginBlockEnd:["WebkitMarginAfter"],marginInlineStart:["WebkitMarginStart","MozMarginStart"],marginInlineEnd:["WebkitMarginEnd","MozMarginEnd"],paddingBlockStart:["WebkitPaddingBefore"],paddingBlockEnd:["WebkitPaddingAfter"],paddingInlineStart:["WebkitPaddingStart","MozPaddingStart"],paddingInlineEnd:["WebkitPaddingEnd","MozPaddingEnd"],borderBlockStart:["WebkitBorderBefore"],borderBlockStartColor:["WebkitBorderBeforeColor"],borderBlockStartStyle:["WebkitBorderBeforeStyle"],borderBlockStartWidth:["WebkitBorderBeforeWidth"],borderBlockEnd:["WebkitBorderAfter"],borderBlockEndColor:["WebkitBorderAfterColor"],borderBlockEndStyle:["WebkitBorderAfterStyle"],borderBlockEndWidth:["WebkitBorderAfterWidth"],borderInlineStart:["WebkitBorderStart","MozBorderStart"],borderInlineStartColor:["WebkitBorderStartColor","MozBorderStartColor"],borderInlineStartStyle:["WebkitBorderStartStyle","MozBorderStartStyle"],borderInlineStartWidth:["WebkitBorderStartWidth","MozBorderStartWidth"],borderInlineEnd:["WebkitBorderEnd","MozBorderEnd"],borderInlineEndColor:["WebkitBorderEndColor","MozBorderEndColor"],borderInlineEndStyle:["WebkitBorderEndStyle","MozBorderEndStyle"],borderInlineEndWidth:["WebkitBorderEndWidth","MozBorderEndWidth"]}}))),Je=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]}}))),Ze=Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(r.hasOwnProperty(e)&&i.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},i={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0}}))),et=/[A-Z]/g,tt=/^ms-/,nt={};function rt(e){return"-"+e.toLowerCase()}var it,ot=(it=Object.freeze({default:function(e){if(nt.hasOwnProperty(e))return nt[e];var t=e.replace(et,rt);return nt[e]=tt.test(t)?"-"+t:t}}))&&it.default||it,at=Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e)};var n,r=(n=ot)&&n.__esModule?n:{default:n};e.exports=t.default}));Ie(at);var ut=["Webkit"],lt=["Moz"],ct=["ms"],st=["Webkit","Moz"],ft=["Webkit","ms"],pt=["Webkit","Moz","ms"],dt=Le({plugins:[Fe,Ue,We,qe,He,Ve,$e,Ke,Qe,Ge,Ye,Xe,Je,Ze,Ie(Ne((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o,l){if("string"==typeof t&&a.hasOwnProperty(e)){var c=function(e,t){if((0,r.default)(e))return e;for(var i=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),o=0,a=i.length;o<a;++o){var l=i[o],c=[l];for(var s in t){var f=(0,n.default)(s);if(l.indexOf(f)>-1&&"order"!==f)for(var p=t[s],d=0,h=p.length;d<h;++d)c.unshift(l.replace(f,u[p[d]]+f))}i[o]=c.join(",")}return i.join(",")}(t,l),s=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return s;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(o["Webkit"+(0,i.default)(e)]=s,o["Moz"+(0,i.default)(e)]=f,c)}};var n=o(at),r=o(Be),i=o(je);function o(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"}})))],prefixMap:{transform:ft,transformOrigin:ft,transformOriginX:ft,transformOriginY:ft,backfaceVisibility:ut,perspective:ut,perspectiveOrigin:ut,transformStyle:ut,transformOriginZ:ut,animation:ut,animationDelay:ut,animationDirection:ut,animationFillMode:ut,animationDuration:ut,animationIterationCount:ut,animationName:ut,animationPlayState:ut,animationTimingFunction:ut,appearance:st,userSelect:pt,fontKerning:ut,textEmphasisPosition:ut,textEmphasis:ut,textEmphasisStyle:ut,textEmphasisColor:ut,boxDecorationBreak:ut,clipPath:ut,maskImage:ut,maskMode:ut,maskRepeat:ut,maskPosition:ut,maskClip:ut,maskOrigin:ut,maskSize:ut,maskComposite:ut,mask:ut,maskBorderSource:ut,maskBorderMode:ut,maskBorderSlice:ut,maskBorderWidth:ut,maskBorderOutset:ut,maskBorderRepeat:ut,maskBorder:ut,maskType:ut,textDecorationStyle:st,textDecorationSkip:st,textDecorationLine:st,textDecorationColor:st,filter:ut,fontFeatureSettings:st,breakAfter:pt,breakBefore:pt,breakInside:pt,columnCount:st,columnFill:st,columnGap:st,columnRule:st,columnRuleColor:st,columnRuleStyle:st,columnRuleWidth:st,columns:st,columnSpan:st,columnWidth:st,writingMode:ft,flex:ft,flexBasis:ut,flexDirection:ft,flexGrow:ut,flexFlow:ft,flexShrink:ut,flexWrap:ft,alignContent:ut,alignItems:ut,alignSelf:ut,justifyContent:ut,order:ut,transitionDelay:ut,transitionDuration:ut,transitionProperty:ut,transitionTimingFunction:ut,backdropFilter:ut,scrollSnapType:ft,scrollSnapPointsX:ft,scrollSnapPointsY:ft,scrollSnapDestination:ft,scrollSnapCoordinate:ft,shapeImageThreshold:ut,shapeImageMargin:ut,shapeImageOutside:ut,hyphens:pt,flowInto:ft,flowFrom:ft,regionFragment:ft,textOrientation:ut,boxSizing:lt,textAlignLast:lt,tabSize:lt,wrapFlow:ct,wrapThrough:ct,wrapMargin:ct,touchAction:ct,textSizeAdjust:ft,borderImage:ut,borderImageOutset:ut,borderImageRepeat:ut,borderImageSlice:ut,borderImageSource:ut,borderImageWidth:ut}}),ht=[function(e,t,n){return":"!==e[0]?null:n(t+e)},function(e,t,n){if("@"!==e[0])return null;var r=n(t);return["".concat(e,"{").concat(r.join(""),"}")]}],yt=function e(t,n,r,i,o){for(var a=new ze,u=0;u<n.length;u++)a.addStyleType(n[u]);var l=new ze,c=[];a.forEach((function(n,a){r.some((function(u){var l=u(a,t,(function(t){return e(t,[n],r,i,o)}));if(null!=l)return Array.isArray(l)?c.push.apply(c,_e(l)):(console.warn("WARNING: Selector handlers should return an array of rules.Returning a string containing multiple rules is deprecated.",u),c.push("@media all {".concat(l,"}"))),!0}))||l.set(a,n,!0)}));var s=gt(t,l,i,o,r);return s&&c.unshift(s),c},mt=function(e,t,n){return"".concat((r=e,i=r.replace(we,Se),"m"===i[0]&&"s"===i[1]&&"-"===i[2]?"-".concat(i):i),":").concat(n(e,t),";");var r,i},vt=function(e,t){return e[t]=!0,e},gt=function(e,t,n,r,i){!function(e,t,n){if(t)for(var r=Object.keys(t),i=0;i<r.length;i++){var o=r[i];e.has(o)&&e.set(o,t[o](e.get(o),n),!1)}}(t,n,i);var o=Object.keys(t.elements).reduce(vt,Object.create(null)),a=dt(t.elements),u=Object.keys(a);if(u.length!==t.keyOrder.length)for(var l=0;l<u.length;l++)if(!o[u[l]]){var c;if((c="W"===u[l][0]?u[l][6].toLowerCase()+u[l].slice(7):"o"===u[l][1]?u[l][3].toLowerCase()+u[l].slice(4):u[l][2].toLowerCase()+u[l].slice(3))&&o[c]){var s=t.keyOrder.indexOf(c);t.keyOrder.splice(s,0,u[l])}else t.keyOrder.unshift(u[l])}for(var f=!1===r?Ee:Te,p=[],d=0;d<t.keyOrder.length;d++){var h=t.keyOrder[d],y=a[h];if(Array.isArray(y))for(var m=0;m<y.length;m++)p.push(mt(h,y[m],f));else p.push(mt(h,y,f))}return p.length?"".concat(e,"{").concat(p.join(""),"}"):""},bt=null,_t={fontFamily:function e(t){if(Array.isArray(t)){var n={};return t.forEach((function(t){n[e(t)]=!0})),Object.keys(n).join(",")}return"object"===ve(t)?(Et(t.src,"@font-face",[t],!1),'"'.concat(t.fontFamily,'"')):t},animationName:function e(t,n){if(Array.isArray(t))return t.map((function(t){return e(t,n)})).join(",");if("object"===ve(t)){var r="keyframe_".concat((o=t,Oe(JSON.stringify(o)))),i="@keyframes ".concat(r,"{");return t instanceof ze?t.forEach((function(e,t){i+=yt(t,[e],n,_t,!1).join("")})):Object.keys(t).forEach((function(e){i+=yt(e,[t[e]],n,_t,!1).join("")})),kt(r,[i+="}"]),r}return t;var o}},wt={},St=[],xt=!1,kt=function(e,t){var n;if(!wt[e]){if(!xt){if("undefined"==typeof document)throw new Error("Cannot automatically buffer without a document");xt=!0,me()(Pt)}(n=St).push.apply(n,_e(t)),wt[e]=!0}},Et=function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(!wt[e]){var o=yt(t,n,i,_t,r);kt(e,o)}},Tt=function(){St=[],wt={},xt=!1,bt=null},Ot=function(e){delete wt[e]},Ct=function(){xt=!1;var e=St;return St=[],e},Pt=function(){var e=Ct();e.length>0&&function(e){if(null==bt&&null==(bt=document.querySelector("style[data-aphrodite]"))){var t=document.head||document.getElementsByTagName("head")[0];(bt=document.createElement("style")).type="text/css",bt.setAttribute("data-aphrodite",""),t.appendChild(bt)}var n=bt.styleSheet||bt.sheet;if(n.insertRule){var r=n.cssRules.length;e.forEach((function(e){try{n.insertRule(e,r),r+=1}catch(e){}}))}else bt.innerText=(bt.innerText||"")+e.join("")}(e)},zt=function(e){e.forEach((function(e){wt[e]=!0}))},It=function e(t,n,r,i){for(var o=0;o<t.length;o+=1)if(t[o])if(Array.isArray(t[o]))i+=e(t[o],n,r,i);else{if(!("_definition"in(a=t[o])&&"_name"in a&&"_len"in a))throw new Error("Invalid Style Definition: Styles should be defined using the StyleSheet.create method.");n.push(t[o]._name),r.push(t[o]._definition),i+=t[o]._len}var a;return i},Nt=function(e,t,n){var r,i=[],o=[],a=It(t,i,o,0);return 0===i.length?"":(r=1===i.length?"_".concat(i[0]):"_".concat(Oe(i.join())).concat((a%36).toString(36)),Et(r,".".concat(r),o,e,n),r)},jt=function(e,t){return"".concat(t,"_").concat(Oe(e))},Mt=Oe,Rt={create:function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r+=1){var i=n[r],o=e[i],a=JSON.stringify(o);t[i]={_len:a.length,_name:Mt(a,i),_definition:o}}return t},rehydrate:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];zt(e)}},Dt="undefined"!=typeof window?null:{renderStatic:function(e){return Tt(),function(){if(xt)throw new Error("Cannot buffer while already buffering");xt=!0}(),{html:e(),css:{content:Ct().join(""),renderedClassNames:Object.keys(wt)}}}},At=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ht;return{StyleSheet:be({},Rt,{extend:function(r){var i=r.map((function(e){return e.selectorHandler})).filter((function(e){return e}));return e(t,n.concat(i))}}),StyleSheetServer:Dt,StyleSheetTestUtils:null,minify:function(e){Mt=e?Oe:jt},css:function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return Nt(t,r,n)},flushToStyleTag:Pt,injectAndGetClassName:Nt,defaultSelectorHandlers:ht,reset:Tt,resetInjectedStyle:Ot}}(!0),Lt=At.StyleSheet,Ft=(At.StyleSheetServer,At.StyleSheetTestUtils,At.css);function Bt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}At.minify,At.flushToStyleTag,At.injectAndGetClassName,At.defaultSelectorHandlers,At.reset,At.resetInjectedStyle;var Ut=r.memo((function(e){var t=e.type,n=e.value,i=e.html,o=e.markAsRead,a=e.id,u=Ft("urgent"===t?Ht.urgent:Ht.default);return n?"noNotifications"===t?r.createElement("li",{className:Ft(Ht.noNotifications),"data-notification-type":t},n):r.createElement("li",{className:u,"data-notification-type":t,onClick:function(){return o(a)}},n):r.createElement("li",{className:u,"data-notification-type":t,dangerouslySetInnerHTML:i,onClick:function(){return o(a)}})}));Ut.defaultProps={type:"default",value:"",html:{},markAsRead:function(){},id:NaN},Ut.propTypes={type:m().string,value:m().string,html:m().shape({__html:m().string}),markAsRead:m().func,id:m().oneOfType([m().string,m().number])};var Wt="@media screen and (max-width: 900px)",qt={listStyle:"none",borderBottom:"1px solid black",padding:"10px 8px",fontSize:"20px"},Ht=Lt.create({default:Bt({color:"blue",":hover":{cursor:"pointer"}},Wt,qt),urgent:Bt({color:"red",":hover":{cursor:"pointer"}},Wt,qt),noNotifications:Bt({color:"black"},Wt,qt)});const Vt=Ut,$t=n.p+"d358bb35dc011695b84ce67f9214c2bf.png";var Kt;function Qt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Gt(e){var t=e.displayDrawer,n=e.listNotifications,i=e.handleDisplayDrawer,o=e.handleHideDrawer,a=e.markNotificationAsRead,u=e.setNotificationFilter,l=Ft(t?Jt.menuItemPNoShow:Jt.menuItemPShow);return r.createElement(r.Fragment,null,r.createElement("div",{className:Ft(Jt.menuItem),id:"menuItem",onClick:i},r.createElement("p",{className:l},"Your notifications")),t&&r.createElement("div",{className:Ft(Jt.notifications),id:"Notifications"},r.createElement("button",{style:{background:"transparent",border:"none",position:"absolute",right:20},"aria-label":"close",onClick:o,id:"closeNotifications"},r.createElement("img",{src:$t,alt:"close-icon",className:Ft(Jt.notificationsButtonImage)})),r.createElement("p",{className:Ft(Jt.notificationsP)},"Here is the list of notifications"),r.createElement("button",{type:"button",className:Ft(Jt.filterButton),id:"buttonFilterUrgent",onClick:function(){u("URGENT")}},"❗❗"),r.createElement("button",{type:"button",className:Ft(Jt.filterButton),id:"buttonFilterDefault",onClick:function(){u("DEFAULT")}},"💠"),r.createElement("ul",{className:Ft(Jt.notificationsUL)},(!n||0===n.count())&&r.createElement(Vt,{type:"noNotifications",value:"No new notifications for now"}),n&&n.valueSeq().map((function(e){var t=e.get("html");return t&&(t=t.toJS()),r.createElement(Vt,{key:e.get("guid"),id:e.get("guid"),type:e.get("type"),value:e.get("value"),html:t,markAsRead:a})})))))}Gt.defaultProps={displayDrawer:!1,listNotifications:null,handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){},fetchNotifications:function(){},setNotificationFilter:function(){}},Gt.propTypes={displayDrawer:m().bool,listNotifications:m().object,handleDisplayDrawer:m().func,handleHideDrawer:m().func,markNotificationAsRead:m().func,setNotificationFilter:m().func};var Yt="@media screen and (max-width: 900px)",Xt={"0%":{border:"3px dashed deepSkyBlue"},"100%":{border:"3px dashed ".concat("#e01d3f")}},Jt=Lt.create({menuItem:{float:"right",backgroundColor:"#fff8f8",":hover":{cursor:"pointer",animationName:[{from:{opacity:.5},to:{opacity:1}},{"0%":{transform:"translateY(0)"},"50%":{transform:"translateY(-5px)"},"75%":{transform:"translateY(5px)"},"100%":{transform:"translateY(0)"}}],animationDuration:"1s, 0.5s",animationIterationCount:3}},menuItemPNoShow:{marginRight:"8px",display:"none"},menuItemPShow:{marginRight:"8px"},notifications:Qt({padding:"10px",marginBottom:"20px",animationName:[Xt],animationDuration:"0.8s",animationIterationCount:1,animationFillMode:"forwards",":hover":{border:"3px dashed deepSkyBlue"}},Yt,{float:"none",border:"none",listStyle:"none",padding:0,fontSize:"20px",":hover":{border:"none"},position:"absolute",background:"white",height:"110vh",width:"100vw",zIndex:10}),notificationsButtonImage:{width:"10px"},notificationsP:{margin:0,marginTop:"15px"},notificationsUL:Qt({},Yt,{padding:0}),filterButton:(Kt={height:"30px",width:"50px",backgroundColor:"AliceBlue",border:"none",display:"inline-block"},Qt(Kt,"border","1px solid CornflowerBlue"),Qt(Kt,"boxShadow","1px 1px CornflowerBlue"),Qt(Kt,"margin","5px 5px 0px 5px"),Kt)});const Zt=Gt;function en(e){return(en="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nn(e,t){return(nn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function rn(e,t){return!t||"object"!==en(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function on(e){return(on=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var an=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=on(i);if(o){var n=on(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return rn(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"componentDidMount",value:function(){this.props.fetchNotifications()}},{key:"render",value:function(){return r.createElement(Zt,this.props)}}])&&tn(t.prototype,n),u}(r.Component);an.defaultProps={displayDrawer:!1,listNotifications:null,handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){},fetchNotifications:function(){},setNotificationFilter:function(){}},an.propTypes={displayDrawer:m().bool,listNotifications:m().object,handleDisplayDrawer:m().func,handleHideDrawer:m().func,markNotificationAsRead:m().func,setNotificationFilter:m().func};const un=J((function(e){return{listNotifications:pe(e)}}),{fetchNotifications:function(){return function(e){return e(le(!0)),fetch("./notifications.json").then((function(e){return e.json()})).then((function(t){return e(function(e){return{type:oe,data:e}}(t))})).catch((function(e){})).finally((function(){return e(le(!1))}))}},markNotificationAsRead:ue,setNotificationFilter:function(e){return{type:ie,filter:e}}})(an);var ln="LOGIN",cn="LOGOUT",sn="DISPLAY_NOTIFICATION_DRAWER",fn="HIDE_NOTIFICATION_DRAWER",pn="LOGIN_SUCCESS",dn="LOGIN_FAILURE",hn=function(){return{type:cn}},yn={email:"",password:"",isLoggedIn:!1};const mn=r.createContext({user:yn,logOut:function(){}}),vn=n.p+"24bab5d633e36ca8d17edc63164cf934.jpg";function gn(e){return(gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _n(e,t){return(_n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wn(e,t){return!t||"object"!==gn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Sn(e){return(Sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var xn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_n(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Sn(i);if(o){var n=Sn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return wn(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"render",value:function(){var e=this.props,t=e.user,n=e.logout;return r.createElement("div",{className:Ft(kn.header)},r.createElement("img",{src:vn,className:Ft(kn.headerImg)}),r.createElement("h1",null,"School dashboard"),t&&r.createElement("p",{id:"logoutSection",className:Ft(kn.logoutSection)},"Welcome ",r.createElement("b",null,"".concat(t.email," ")),r.createElement("span",{onClick:n,className:Ft(kn.logoutSectionSpan)},"(logout)")))}}])&&bn(t.prototype,n),u}(r.Component),kn=Lt.create({header:{display:"flex",alignItems:"center",color:"#e01d3f",fontSize:"20px"},headerImg:{width:"200px"},logoutSection:{color:"black",position:"absolute",right:0,paddingRight:"20px",alignSelf:"flex-end"},logoutSectionSpan:{fontStyle:"italic",cursor:"pointer"}});xn.contextType=mn,xn.defaultProps={user:null,logout:function(){}},xn.propTypes={user:m().object,logout:m().func};const En=J((function(e){return{user:e.ui.get("user")}}),{logout:hn})(xn);function Tn(e){return(Tn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function On(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Cn(e,t){return(Cn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Pn(e,t){return!t||"object"!==Tn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function zn(e){return(zn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var In=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Cn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=zn(i);if(o){var n=zn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Pn(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"render",value:function(){var e=this.props,t=e.children,n=e.title;return r.createElement("div",{className:Ft(Rn.bodySection)},r.createElement("h2",{className:Ft(Rn.bodySectionH2)},n),t)}}])&&On(t.prototype,n),u}(r.Component);In.defaultProps={title:""},In.propTypes={title:m().string};var Nn,jn,Mn,Rn=Lt.create({bodySection:(Nn={display:"flex",flexWrap:"wrap",width:"100%"},jn="@media screen and (max-width: 900px)",Mn={boxSizing:"border-box",paddingLeft:"50px",paddingRight:"50px",paddingBottom:"20px"},jn in Nn?Object.defineProperty(Nn,jn,{value:Mn,enumerable:!0,configurable:!0,writable:!0}):Nn[jn]=Mn,Nn),bodySectionH2:{width:"100%"}});const Dn=In;function An(e){return(An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ln(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fn(e,t){return(Fn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Bn(e,t){return!t||"object"!==An(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Un(e){return(Un=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Wn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Un(i);if(o){var n=Un(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Bn(this,e)});function u(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),a.call(this,e)}return t=u,(n=[{key:"render",value:function(){return r.createElement("div",{className:Ft(qn.bodySectionWithMargin)},r.createElement(Dn,this.props))}}])&&Ln(t.prototype,n),u}(r.Component);Wn.defaultProps={title:""},Wn.propTypes={title:m().string};var qn=Lt.create({bodySectionWithMargin:function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({marginBottom:"40px",width:"100%"},"@media screen and (max-width: 900px)",{marginBottom:"10px"})});const Hn=Wn;function Vn(e){return(Vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Kn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qn(e,t){return(Qn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Gn(e,t){return!t||"object"!==Vn(t)&&"function"!=typeof t?Yn(e):t}function Yn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Xn(e){return(Xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Jn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qn(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Xn(i);if(o){var n=Xn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Gn(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).state={email:"",password:"",enableSubmit:!1},t.handleLoginSubmit=t.handleLoginSubmit.bind(Yn(t)),t.handleChangeEmail=t.handleChangeEmail.bind(Yn(t)),t.handleChangePassword=t.handleChangePassword.bind(Yn(t)),t}return t=u,(n=[{key:"handleLoginSubmit",value:function(e){e.preventDefault();var t=this.state,n=t.email,r=t.password;this.props.logIn(n,r)}},{key:"handleChangeEmail",value:function(e){var t=e.target.value,n=this.state.password;""!==t&&""!==n?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({email:e.target.value})}},{key:"handleChangePassword",value:function(e){var t=e.target.value;""!==this.state.email&&""!==t?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1}),this.setState({password:e.target.value})}},{key:"render",value:function(){return r.createElement("div",{className:Ft(er.login)},r.createElement("p",null,"Login to access the full dashboard"),r.createElement("form",{action:"",onSubmit:this.handleLoginSubmit},r.createElement("label",{htmlFor:"email"},"Email:"),r.createElement("input",{type:"email",id:"email",name:"email",className:Ft(er.loginInput),value:this.state.email,onChange:this.handleChangeEmail}),r.createElement("label",{htmlFor:"password"},"Password:"),r.createElement("input",{type:"password",id:"password",name:"password",className:Ft(er.loginInput),value:this.state.password,onChange:this.handleChangePassword}),r.createElement("input",{type:"submit",disabled:!this.state.enableSubmit})))}}])&&Kn(t.prototype,n),u}(r.Component),Zn="@media screen and (max-width: 900px)",er=Lt.create({login:$n({margin:"50px",flexGrow:1},Zn,{marginTop:"10px",marginLeft:0,marginRight:0,marginBottom:0}),loginInput:$n({marginLeft:"10px",marginRight:"20px"},Zn,{display:"block",marginLeft:0,marginTop:"10px",marginBottom:"10px"})});const tr=Jn;var nr="SELECT_COURSE",rr="UNSELECT_COURSE",ir="FETCH_COURSE_SUCCESS",or={backgroundColor:"#f5f5f5ab"},ar={backgroundColor:"#deb5b545"};function ur(e){var t,n,i=e.id,o=e.isHeader,a=e.textFirstCell,u=e.textSecondCell,l=e.isChecked,c=e.onChangeRow,s=Ft(o?cr.CourseListTh:cr.CourseListTd,l&&cr.rowChecked);return!0===o?t=null===u?r.createElement("th",{colSpan:"2",className:Ft(cr.CourseListThSpan2)},a):r.createElement(r.Fragment,null,r.createElement("th",{className:s},a),r.createElement("th",{className:s},u)):!1===o&&(t=r.createElement(r.Fragment,null,r.createElement("td",{className:s},"No course available yet"!==a&&r.createElement("input",{type:"checkbox",onClick:function(){c(i,!l)}}),a),r.createElement("td",{className:s},u))),n=o?ar:or,r.createElement("tr",{style:n},t)}ur.defaultProps={id:null,isHeader:!1,textSecondCell:null,isChecked:!1,onChangeRow:function(){}},ur.propTypes={id:m().oneOfType([m().string,m().number]),isHeader:m().bool,textFirstCell:m().string.isRequired,textSecondCell:m().oneOfType([m().string,m().number]),isChecked:m().bool,onChangeRow:m().func};var lr="rgb(170, 170, 170);",cr=Lt.create({CourseListTh:{borderTop:"1px solid ".concat(lr),borderBottom:"1px solid ".concat(lr),textAlign:"left",fontSize:"18px"},CourseListThSpan2:{textAlign:"center"},CourseListTd:{textAlign:"left"},rowChecked:{backgroundColor:"#e6e4e4"}});const sr=ur;function fr(e){return(fr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function pr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dr(e,t){return(dr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hr(e,t){return!t||"object"!==fr(t)&&"function"!=typeof t?yr(e):t}function yr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function mr(e){return(mr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var vr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&dr(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=mr(i);if(o){var n=mr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return hr(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).onChangeRow=t.onChangeRow.bind(yr(t)),t}return t=u,(n=[{key:"componentDidMount",value:function(){this.props.fetchCourses()}},{key:"onChangeRow",value:function(e,t){t?this.props.selectCourse(e):this.props.unSelectCourse(e)}},{key:"render",value:function(){var e=this,t=this.props.listCourses;return r.createElement("table",{id:"CourseList",className:Ft(gr.list)},r.createElement("thead",null,r.createElement(sr,{textFirstCell:"Available courses",isHeader:!0}),r.createElement(sr,{textFirstCell:"Course name",textSecondCell:"Credit",isHeader:!0})),r.createElement("tbody",null,(!t||0===t.length)&&r.createElement(sr,{textFirstCell:"No course available yet",isHeader:!1}),t&&t.map((function(t){return r.createElement(sr,{key:t.id,id:t.id,textFirstCell:t.name,textSecondCell:t.credit,isHeader:!1,isChecked:t.isSelected,onChangeRow:e.onChangeRow})}))))}}])&&pr(t.prototype,n),u}(r.Component);vr.defaultProps={listCourses:null,fetchCourses:function(){},selectCourse:function(){},unSelectCourse:function(){}},vr.propTypes={listCourses:m().oneOfType([m().array,m().object]),fetchCourses:m().func,selectCourse:m().func,unSelectCourse:m().func};var gr=Lt.create({list:{border:"1px solid ".concat("rgb(170, 170, 170);"),borderCollapse:"collapse",width:"95%",margin:"40px auto 0 auto"}});const br=J((function(e){return{listCourses:function(e){var t=e.courses;return t?t.valueSeq():t}(e)}}),{fetchCourses:function(){return function(e){return fetch("./courses.json").then((function(e){return e.json()})).then((function(t){return e(function(e){return{type:ir,data:e}}(t))})).catch((function(e){}))}},selectCourse:function(e){return{type:nr,index:e}},unSelectCourse:function(e){return{type:rr,index:e}}})(vr);function _r(e){var t=e.user;return r.createElement("div",{className:"footer"},r.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","Holberton School"),t&&r.createElement("a",{href:"#"},"Contact us"))}_r.defaultProps={user:null},_r.propTypes={user:m().object};const wr=J((function(e){return{user:e.ui.get("user")}}),null)(_r);function Sr(e){return(Sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function kr(e,t){return(kr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Er(e,t){return!t||"object"!==Sr(t)&&"function"!=typeof t?Tr(e):t}function Tr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Or(e){return(Or=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}document.body.style.margin=0;var Cr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&kr(e,t)}(u,e);var t,n,i,o,a=(i=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Or(i);if(o){var n=Or(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Er(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=a.call(this,e)).handleKeyCombination=t.handleKeyCombination.bind(Tr(t)),t.state={user:yn},t}return t=u,(n=[{key:"handleKeyCombination",value:function(e){"h"===e.key&&e.ctrlKey&&(alert("Logging you out"),this.props.logout())}},{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyCombination)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyCombination)}},{key:"render",value:function(){this.state.user;var e=this.props,t=e.isLoggedIn,n=e.displayDrawer,i=e.displayNotificationDrawer,o=e.hideNotificationDrawer,a=e.login;return e.logout,r.createElement(r.Fragment,null,r.createElement(un,{displayDrawer:n,handleDisplayDrawer:i,handleHideDrawer:o}),r.createElement("div",{className:Ft(zr.container)},r.createElement("div",{className:Ft(zr.app)},r.createElement(En,null)),r.createElement("div",{className:Ft(zr.appBody)},t?r.createElement(Hn,{title:"Course list"},r.createElement(br,null)):r.createElement(Hn,{title:"Log in to continue"},r.createElement(tr,{logIn:a}))),r.createElement(Dn,{title:"News from the School"},r.createElement("p",null,"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.")),r.createElement("div",{className:Ft(zr.footer)},r.createElement(wr,null))))}}])&&xr(t.prototype,n),u}(r.Component);Cr.defaultProps={isLoggedIn:!1,displayDrawer:!1,displayNotificationDrawer:function(){},hideNotificationDrawer:function(){},login:function(){}},Cr.propTypes={isLoggedIn:m().bool,displayDrawer:m().bool,displayNotificationDrawer:m().func,hideNotificationDrawer:m().func,login:m().func};var Pr="#e01d3f",zr=Lt.create({container:{width:"calc(100% - 16px)",marginLeft:"8px",marginRight:"8px"},app:{borderBottom:"3px solid ".concat(Pr)},appBody:{display:"flex",justifyContent:"center"},footer:function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({borderTop:"3px solid ".concat(Pr),width:"100%",display:"flex",justifyContent:"center",textAlign:"center",position:"static",paddingBottom:"10px",bottom:0,fontStyle:"italic"},"@media screen and (max-width: 900px)",{position:"static"})});const Ir=J((function(e){return{isLoggedIn:e.ui.get("isUserLoggedIn"),displayDrawer:e.ui.get("isNotificationDrawerVisible")}}),{displayNotificationDrawer:function(){return{type:sn}},hideNotificationDrawer:function(){return{type:fn}},login:function(e,t){return function(n){return n(function(e,t){return{type:ln,user:{email:e,password:t}}}(e,t)),fetch("./login-success.json").then((function(e){return e.json()})).then((function(e){return n({type:pn})})).catch((function(e){return n({type:dn})}))}},logout:hn})(Cr);var Nr=32,jr=31,Mr={};function Rr(e){e&&(e.value=!0)}function Dr(){}function Ar(e){return void 0===e.size&&(e.size=e.__iterate(Fr)),e.size}function Lr(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?Ar(e)+t:t}function Fr(){return!0}function Br(e,t,n){return(0===e&&!Hr(e)||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function Ur(e,t){return qr(e,t,0)}function Wr(e,t){return qr(e,t,t)}function qr(e,t,n){return void 0===e?n:Hr(e)?t===1/0?t:0|Math.max(0,t+e):void 0===t||t===e?e:0|Math.min(t,e)}function Hr(e){return e<0||0===e&&1/e==-1/0}var Vr="@@__IMMUTABLE_ITERABLE__@@";function $r(e){return Boolean(e&&e[Vr])}var Kr="@@__IMMUTABLE_KEYED__@@";function Qr(e){return Boolean(e&&e[Kr])}var Gr="@@__IMMUTABLE_INDEXED__@@";function Yr(e){return Boolean(e&&e[Gr])}function Xr(e){return Qr(e)||Yr(e)}var Jr=function(e){return $r(e)?e:_i(e)},Zr=function(e){function t(e){return Qr(e)?e:wi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Jr),ei=function(e){function t(e){return Yr(e)?e:Si(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Jr),ti=function(e){function t(e){return $r(e)&&!Xr(e)?e:xi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Jr);Jr.Keyed=Zr,Jr.Indexed=ei,Jr.Set=ti;var ni="@@__IMMUTABLE_SEQ__@@";function ri(e){return Boolean(e&&e[ni])}var ii="@@__IMMUTABLE_RECORD__@@";function oi(e){return Boolean(e&&e[ii])}function ai(e){return $r(e)||oi(e)}var ui="@@__IMMUTABLE_ORDERED__@@";function li(e){return Boolean(e&&e[ui])}var ci="function"==typeof Symbol&&Symbol.iterator,si=ci||"@@iterator",fi=function(e){this.next=e};function pi(e,t,n,r){var i=0===e?t:1===e?n:[t,n];return r?r.value=i:r={value:i,done:!1},r}function di(){return{value:void 0,done:!0}}function hi(e){return!!vi(e)}function yi(e){return e&&"function"==typeof e.next}function mi(e){var t=vi(e);return t&&t.call(e)}function vi(e){var t=e&&(ci&&e[ci]||e["@@iterator"]);if("function"==typeof t)return t}fi.prototype.toString=function(){return"[Iterator]"},fi.KEYS=0,fi.VALUES=1,fi.ENTRIES=2,fi.prototype.inspect=fi.prototype.toSource=function(){return this.toString()},fi.prototype[si]=function(){return this};var gi=Object.prototype.hasOwnProperty;function bi(e){return!(!Array.isArray(e)&&"string"!=typeof e)||e&&"object"==typeof e&&Number.isInteger(e.length)&&e.length>=0&&(0===e.length?1===Object.keys(e).length:e.hasOwnProperty(e.length-1))}var _i=function(e){function t(e){return null==e?Ci():ai(e)?e.toSeq():function(e){var t=Ii(e);if(t)return t;if("object"==typeof e)return new Ei(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(e,t){var n=this._cache;if(n){for(var r=n.length,i=0;i!==r;){var o=n[t?r-++i:i++];if(!1===e(o[1],o[0],this))break}return i}return this.__iterateUncached(e,t)},t.prototype.__iterator=function(e,t){var n=this._cache;if(n){var r=n.length,i=0;return new fi((function(){if(i===r)return{value:void 0,done:!0};var o=n[t?r-++i:i++];return pi(e,o[0],o[1])}))}return this.__iteratorUncached(e,t)},t}(Jr),wi=function(e){function t(e){return null==e?Ci().toKeyedSeq():$r(e)?Qr(e)?e.toSeq():e.fromEntrySeq():oi(e)?e.toSeq():Pi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(_i),Si=function(e){function t(e){return null==e?Ci():$r(e)?Qr(e)?e.entrySeq():e.toIndexedSeq():oi(e)?e.toSeq().entrySeq():zi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(_i),xi=function(e){function t(e){return($r(e)&&!Xr(e)?e:Si(e)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(_i);_i.isSeq=ri,_i.Keyed=wi,_i.Set=xi,_i.Indexed=Si,_i.prototype[ni]=!0;var ki=function(e){function t(e){this._array=e,this.size=e.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this.has(e)?this._array[Lr(this,e)]:t},t.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length,i=0;i!==r;){var o=t?r-++i:i++;if(!1===e(n[o],o,this))break}return i},t.prototype.__iterator=function(e,t){var n=this._array,r=n.length,i=0;return new fi((function(){if(i===r)return{value:void 0,done:!0};var o=t?r-++i:i++;return pi(e,o,n[o])}))},t}(Si),Ei=function(e){function t(e){var t=Object.keys(e);this._object=e,this._keys=t,this.size=t.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},t.prototype.has=function(e){return gi.call(this._object,e)},t.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,i=r.length,o=0;o!==i;){var a=r[t?i-++o:o++];if(!1===e(n[a],a,this))break}return o},t.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,i=r.length,o=0;return new fi((function(){if(o===i)return{value:void 0,done:!0};var a=r[t?i-++o:o++];return pi(e,a,n[a])}))},t}(wi);Ei.prototype[ui]=!0;var Ti,Oi=function(e){function t(e){this._collection=e,this.size=e.length||e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=mi(this._collection),r=0;if(yi(n))for(var i;!(i=n.next()).done&&!1!==e(i.value,r++,this););return r},t.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=mi(this._collection);if(!yi(n))return new fi(di);var r=0;return new fi((function(){var t=n.next();return t.done?t:pi(e,r++,t.value)}))},t}(Si);function Ci(){return Ti||(Ti=new ki([]))}function Pi(e){var t=Array.isArray(e)?new ki(e):hi(e)?new Oi(e):void 0;if(t)return t.fromEntrySeq();if("object"==typeof e)return new Ei(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function zi(e){var t=Ii(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function Ii(e){return bi(e)?new ki(e):hi(e)?new Oi(e):void 0}var Ni="@@__IMMUTABLE_MAP__@@";function ji(e){return Boolean(e&&e[Ni])}function Mi(e){return ji(e)&&li(e)}function Ri(e){return Boolean(e&&"function"==typeof e.equals&&"function"==typeof e.hashCode)}function Di(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!!(Ri(e)&&Ri(t)&&e.equals(t))}var Ai="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function Li(e){return e>>>1&1073741824|3221225471&e}var Fi=Object.prototype.valueOf;function Bi(e){switch(typeof e){case"boolean":return e?1108378657:1108378656;case"number":return function(e){if(e!=e||e===1/0)return 0;var t=0|e;for(t!==e&&(t^=4294967295*e);e>4294967295;)t^=e/=4294967295;return Li(t)}(e);case"string":return e.length>Qi?(void 0===(n=Xi[t=e])&&(n=Ui(t),Yi===Gi&&(Yi=0,Xi={}),Yi++,Xi[t]=n),n):Ui(e);case"object":case"function":return null===e?1108378658:"function"==typeof e.hashCode?Li(e.hashCode(e)):(e.valueOf!==Fi&&"function"==typeof e.valueOf&&(e=e.valueOf(e)),function(e){var t;if(Vi&&void 0!==(t=Wi.get(e)))return t;if(void 0!==(t=e[Ki]))return t;if(!Hi){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[Ki]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=++$i,1073741824&$i&&($i=0),Vi)Wi.set(e,t);else{if(void 0!==qi&&!1===qi(e))throw new Error("Non-extensible objects are not allowed as keys.");if(Hi)Object.defineProperty(e,Ki,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[Ki]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[Ki]=t}}return t}(e));case"undefined":return 1108378659;default:if("function"==typeof e.toString)return Ui(e.toString());throw new Error("Value type "+typeof e+" cannot be hashed.")}var t,n}function Ui(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return Li(t)}var Wi,qi=Object.isExtensible,Hi=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}(),Vi="function"==typeof WeakMap;Vi&&(Wi=new WeakMap);var $i=0,Ki="__immutablehash__";"function"==typeof Symbol&&(Ki=Symbol(Ki));var Qi=16,Gi=255,Yi=0,Xi={},Ji=function(e){function t(e,t){this._iter=e,this._useKeys=t,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this._iter.get(e,t)},t.prototype.has=function(e){return this._iter.has(e)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var e=this,t=io(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},t.prototype.map=function(e,t){var n=this,r=ro(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t,r){return e(t,r,n)}),t)},t.prototype.__iterator=function(e,t){return this._iter.__iterator(e,t)},t}(wi);Ji.prototype[ui]=!0;var Zi=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this,r=0;return t&&Ar(this),this._iter.__iterate((function(i){return e(i,t?n.size-++r:r++,n)}),t)},t.prototype.__iterator=function(e,t){var n=this,r=this._iter.__iterator(1,t),i=0;return t&&Ar(this),new fi((function(){var o=r.next();return o.done?o:pi(e,t?n.size-++i:i++,o.value,o)}))},t}(Si),eo=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new fi((function(){var t=n.next();return t.done?t:pi(e,t.value,t.value,t)}))},t}(xi),to=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){if(t){mo(t);var r=$r(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new fi((function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){mo(r);var i=$r(r);return pi(e,i?r.get(0):r[0],i?r.get(1):r[1],t)}}}))},t}(wi);function no(e){var t=go(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=bo,t.__iterateUncached=function(t,n){var r=this;return e.__iterate((function(e,n){return!1!==t(n,e,r)}),n)},t.__iteratorUncached=function(t,n){if(2===t){var r=e.__iterator(t,n);return new fi((function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e}))}return e.__iterator(1===t?0:1,n)},t}function ro(e,t,n){var r=go(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,i){var o=e.get(r,Mr);return o===Mr?i:t.call(n,o,r,e)},r.__iterateUncached=function(r,i){var o=this;return e.__iterate((function(e,i,a){return!1!==r(t.call(n,e,i,a),i,o)}),i)},r.__iteratorUncached=function(r,i){var o=e.__iterator(2,i);return new fi((function(){var i=o.next();if(i.done)return i;var a=i.value,u=a[0];return pi(r,u,t.call(n,a[1],u,e),i)}))},r}function io(e,t){var n=this,r=go(e);return r._iter=e,r.size=e.size,r.reverse=function(){return e},e.flip&&(r.flip=function(){var t=no(e);return t.reverse=function(){return e.flip()},t}),r.get=function(n,r){return e.get(t?n:-1-n,r)},r.has=function(n){return e.has(t?n:-1-n)},r.includes=function(t){return e.includes(t)},r.cacheResult=bo,r.__iterate=function(n,r){var i=this,o=0;return r&&Ar(e),e.__iterate((function(e,a){return n(e,t?a:r?i.size-++o:o++,i)}),!r)},r.__iterator=function(r,i){var o=0;i&&Ar(e);var a=e.__iterator(2,!i);return new fi((function(){var e=a.next();if(e.done)return e;var u=e.value;return pi(r,t?u[0]:i?n.size-++o:o++,u[1],e)}))},r}function oo(e,t,n,r){var i=go(e);return r&&(i.has=function(r){var i=e.get(r,Mr);return i!==Mr&&!!t.call(n,i,r,e)},i.get=function(r,i){var o=e.get(r,Mr);return o!==Mr&&t.call(n,o,r,e)?o:i}),i.__iterateUncached=function(i,o){var a=this,u=0;return e.__iterate((function(e,o,l){if(t.call(n,e,o,l))return u++,i(e,r?o:u-1,a)}),o),u},i.__iteratorUncached=function(i,o){var a=e.__iterator(2,o),u=0;return new fi((function(){for(;;){var o=a.next();if(o.done)return o;var l=o.value,c=l[0],s=l[1];if(t.call(n,s,c,e))return pi(i,r?c:u++,s,o)}}))},i}function ao(e,t,n,r){var i=e.size;if(Br(t,n,i))return e;var o=Ur(t,i),a=Wr(n,i);if(o!=o||a!=a)return ao(e.toSeq().cacheResult(),t,n,r);var u,l=a-o;l==l&&(u=l<0?0:l);var c=go(e);return c.size=0===u?u:e.size&&u||void 0,!r&&ri(e)&&u>=0&&(c.get=function(t,n){return(t=Lr(this,t))>=0&&t<u?e.get(t+o,n):n}),c.__iterateUncached=function(t,n){var i=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var a=0,l=!0,c=0;return e.__iterate((function(e,n){if(!l||!(l=a++<o))return c++,!1!==t(e,r?n:c-1,i)&&c!==u})),c},c.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);if(0===u)return new fi(di);var i=e.__iterator(t,n),a=0,l=0;return new fi((function(){for(;a++<o;)i.next();if(++l>u)return{value:void 0,done:!0};var e=i.next();return r||1===t||e.done?e:pi(t,l-1,0===t?void 0:e.value[1],e)}))},c}function uo(e,t,n,r){var i=go(e);return i.__iterateUncached=function(i,o){var a=this;if(o)return this.cacheResult().__iterate(i,o);var u=!0,l=0;return e.__iterate((function(e,o,c){if(!u||!(u=t.call(n,e,o,c)))return l++,i(e,r?o:l-1,a)})),l},i.__iteratorUncached=function(i,o){var a=this;if(o)return this.cacheResult().__iterator(i,o);var u=e.__iterator(2,o),l=!0,c=0;return new fi((function(){var e,o,s;do{if((e=u.next()).done)return r||1===i?e:pi(i,c++,0===i?void 0:e.value[1],e);var f=e.value;o=f[0],s=f[1],l&&(l=t.call(n,s,o,a))}while(l);return 2===i?e:pi(i,o,s,e)}))},i}function lo(e,t){var n=Qr(e),r=[e].concat(t).map((function(e){return $r(e)?n&&(e=Zr(e)):e=n?Pi(e):zi(Array.isArray(e)?e:[e]),e})).filter((function(e){return 0!==e.size}));if(0===r.length)return e;if(1===r.length){var i=r[0];if(i===e||n&&Qr(i)||Yr(e)&&Yr(i))return i}var o=new ki(r);return n?o=o.toKeyedSeq():Yr(e)||(o=o.toSetSeq()),(o=o.flatten(!0)).size=r.reduce((function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}}),0),o}function co(e,t,n){var r=go(e);return r.__iterateUncached=function(i,o){if(o)return this.cacheResult().__iterate(i,o);var a=0,u=!1;return function e(l,c){l.__iterate((function(o,l){return(!t||c<t)&&$r(o)?e(o,c+1):(a++,!1===i(o,n?l:a-1,r)&&(u=!0)),!u}),o)}(e,0),a},r.__iteratorUncached=function(r,i){if(i)return this.cacheResult().__iterator(r,i);var o=e.__iterator(r,i),a=[],u=0;return new fi((function(){for(;o;){var e=o.next();if(!1===e.done){var l=e.value;if(2===r&&(l=l[1]),t&&!(a.length<t)||!$r(l))return n?e:pi(r,u++,l,e);a.push(o),o=l.__iterator(r,i)}else o=a.pop()}return{value:void 0,done:!0}}))},r}function so(e,t,n){t||(t=_o);var r=Qr(e),i=0,o=e.toSeq().map((function(t,r){return[r,t,i++,n?n(t,r,e):t]})).valueSeq().toArray();return o.sort((function(e,n){return t(e[3],n[3])||e[2]-n[2]})).forEach(r?function(e,t){o[t].length=2}:function(e,t){o[t]=e[1]}),r?wi(o):Yr(e)?Si(o):xi(o)}function fo(e,t,n){if(t||(t=_o),n){var r=e.toSeq().map((function(t,r){return[t,n(t,r,e)]})).reduce((function(e,n){return po(t,e[1],n[1])?n:e}));return r&&r[0]}return e.reduce((function(e,n){return po(t,e,n)?n:e}))}function po(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function ho(e,t,n,r){var i=go(e),o=new ki(n).map((function(e){return e.size}));return i.size=r?o.max():o.min(),i.__iterate=function(e,t){for(var n,r=this.__iterator(1,t),i=0;!(n=r.next()).done&&!1!==e(n.value,i++,this););return i},i.__iteratorUncached=function(e,i){var o=n.map((function(e){return e=Jr(e),mi(i?e.reverse():e)})),a=0,u=!1;return new fi((function(){var n;return u||(n=o.map((function(e){return e.next()})),u=r?n.every((function(e){return e.done})):n.some((function(e){return e.done}))),u?{value:void 0,done:!0}:pi(e,a++,t.apply(null,n.map((function(e){return e.value}))))}))},i}function yo(e,t){return e===t?e:ri(e)?t:e.constructor(t)}function mo(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function vo(e){return Qr(e)?Zr:Yr(e)?ei:ti}function go(e){return Object.create((Qr(e)?wi:Yr(e)?Si:xi).prototype)}function bo(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):_i.prototype.cacheResult.call(this)}function _o(e,t){return void 0===e&&void 0===t?0:void 0===e?1:void 0===t?-1:e>t?1:e<t?-1:0}function wo(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),i=0;i<n;i++)r[i]=e[i+t];return r}function So(e,t){if(!e)throw new Error(t)}function xo(e){So(e!==1/0,"Cannot perform this action with an infinite size.")}function ko(e){if(bi(e)&&"string"!=typeof e)return e;if(li(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}function Eo(e){return e&&("function"!=typeof e.constructor||"Object"===e.constructor.name)}function To(e){return"object"==typeof e&&(ai(e)||Array.isArray(e)||Eo(e))}function Oo(e){try{return"string"==typeof e?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function Co(e,t,n){return ai(e)?e.get(t,n):function(e,t){return ai(e)?e.has(t):To(e)&&gi.call(e,t)}(e,t)?"function"==typeof e.get?e.get(t):e[t]:n}function Po(e){if(Array.isArray(e))return wo(e);var t={};for(var n in e)gi.call(e,n)&&(t[n]=e[n]);return t}function zo(e,t,n,r){r||(r=n,n=void 0);var i=Io(ai(e),e,ko(t),0,n,r);return i===Mr?n:i}function Io(e,t,n,r,i,o){var a=t===Mr;if(r===n.length){var u=a?i:t,l=o(u);return l===u?t:l}if(!a&&!To(t))throw new TypeError("Cannot update within non-data-structure value in path ["+n.slice(0,r).map(Oo)+"]: "+t);var c=n[r],s=a?Mr:Co(t,c,Mr),f=Io(s===Mr?e:ai(s),s,n,r+1,i,o);return f===s?t:f===Mr?function(e,t){if(!To(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(ai(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!gi.call(e,t))return e;var n=Po(e);return Array.isArray(n)?n.splice(t,1):delete n[t],n}(t,c):function(e,t,n){if(!To(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(ai(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,n)}if(gi.call(e,t)&&n===e[t])return e;var r=Po(e);return r[t]=n,r}(a?e?la():{}:t,c,f)}function No(e,t){return function(e,t,n){return zo(e,t,Mr,(function(){return n}))}(this,e,t)}function jo(e){return function(e,t){return zo(e,t,(function(){return Mr}))}(this,e)}function Mo(e,t,n,r){return zo(e,[t],n,r)}function Ro(e,t,n){return 1===arguments.length?e(this):Mo(this,e,t,n)}function Do(e,t,n){return zo(this,e,t,n)}function Ao(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Fo(this,e)}function Lo(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if("function"!=typeof e)throw new TypeError("Invalid merger function: "+e);return Fo(this,t,e)}function Fo(e,t,n){for(var r=[],i=0;i<t.length;i++){var o=Zr(t[i]);0!==o.size&&r.push(o)}return 0===r.length?e:0!==e.toSeq().size||e.__ownerID||1!==r.length?e.withMutations((function(e){for(var t=n?function(t,r){Mo(e,r,Mr,(function(e){return e===Mr?t:n(e,t,r)}))}:function(t,n){e.set(n,t)},i=0;i<r.length;i++)r[i].forEach(t)})):e.constructor(r[0])}function Bo(e,t,n){return Uo(e,t,function(e){return function t(n,r,i){return To(n)&&To(r)?Uo(n,[r],t):e?e(n,r,i):r}}(n))}function Uo(e,t,n){if(!To(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if(ai(e))return"function"==typeof n&&e.mergeWith?e.mergeWith.apply(e,[n].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var r=Array.isArray(e),i=e,o=r?ei:Zr,a=r?function(t){i===e&&(i=Po(i)),i.push(t)}:function(t,r){var o=gi.call(i,r),a=o&&n?n(i[r],t,r):t;o&&a===i[r]||(i===e&&(i=Po(i)),i[r]=a)},u=0;u<t.length;u++)o(t[u]).forEach(a);return i}function Wo(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Bo(this,e)}function qo(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return Bo(this,t,e)}function Ho(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return zo(this,e,la(),(function(e){return Uo(e,t)}))}function Vo(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return zo(this,e,la(),(function(e){return Bo(e,t)}))}function $o(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function Ko(){return this.__ownerID?this:this.__ensureOwner(new Dr)}function Qo(){return this.__ensureOwner()}function Go(){return this.__altered}Zi.prototype.cacheResult=Ji.prototype.cacheResult=eo.prototype.cacheResult=to.prototype.cacheResult=bo;var Yo=function(e){function t(t){return null==t?la():ji(t)&&!li(t)?t:la().withMutations((function(n){var r=e(t);xo(r.size),r.forEach((function(e,t){return n.set(t,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return la().withMutations((function(t){for(var n=0;n<e.length;n+=2){if(n+1>=e.length)throw new Error("Missing value for key: "+e[n]);t.set(e[n],e[n+1])}}))},t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},t.prototype.set=function(e,t){return ca(this,e,t)},t.prototype.remove=function(e){return ca(this,e,Mr)},t.prototype.deleteAll=function(e){var t=Jr(e);return 0===t.size?this:this.withMutations((function(e){t.forEach((function(t){return e.remove(t)}))}))},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):la()},t.prototype.sort=function(e){return Ma(so(this,e))},t.prototype.sortBy=function(e,t){return Ma(so(this,t,e))},t.prototype.map=function(e,t){return this.withMutations((function(n){n.forEach((function(r,i){n.set(i,e.call(t,r,i,n))}))}))},t.prototype.__iterator=function(e,t){return new ia(this,e,t)},t.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate((function(t){return r++,e(t[1],t[0],n)}),t),r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?ua(this.size,this._root,e,this.__hash):0===this.size?la():(this.__ownerID=e,this.__altered=!1,this)},t}(Zr);Yo.isMap=ji;var Xo=Yo.prototype;Xo[Ni]=!0,Xo.delete=Xo.remove,Xo.removeAll=Xo.deleteAll,Xo.setIn=No,Xo.removeIn=Xo.deleteIn=jo,Xo.update=Ro,Xo.updateIn=Do,Xo.merge=Xo.concat=Ao,Xo.mergeWith=Lo,Xo.mergeDeep=Wo,Xo.mergeDeepWith=qo,Xo.mergeIn=Ho,Xo.mergeDeepIn=Vo,Xo.withMutations=$o,Xo.wasAltered=Go,Xo.asImmutable=Qo,Xo["@@transducer/init"]=Xo.asMutable=Ko,Xo["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])},Xo["@@transducer/result"]=function(e){return e.asImmutable()};var Jo=function(e,t){this.ownerID=e,this.entries=t};Jo.prototype.get=function(e,t,n,r){for(var i=this.entries,o=0,a=i.length;o<a;o++)if(Di(n,i[o][0]))return i[o][1];return r},Jo.prototype.update=function(e,t,n,r,i,o,a){for(var u=i===Mr,l=this.entries,c=0,s=l.length;c<s&&!Di(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===i:u)return this;if(Rr(a),(u||!f)&&Rr(o),!u||1!==l.length){if(!f&&!u&&l.length>=ya)return function(e,t,n,r){e||(e=new Dr);for(var i=new na(e,Bi(n),[n,r]),o=0;o<t.length;o++){var a=t[o];i=i.update(e,0,void 0,a[0],a[1])}return i}(e,l,r,i);var p=e&&e===this.ownerID,d=p?l:wo(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,i]:d.push([r,i]),p?(this.entries=d,this):new Jo(e,d)}};var Zo=function(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n};Zo.prototype.get=function(e,t,n,r){void 0===t&&(t=Bi(n));var i=1<<((0===e?t:t>>>e)&jr),o=this.bitmap;return 0==(o&i)?r:this.nodes[da(o&i-1)].get(e+5,t,n,r)},Zo.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=Bi(r));var u=(0===t?n:n>>>t)&jr,l=1<<u,c=this.bitmap,s=0!=(c&l);if(!s&&i===Mr)return this;var f=da(c&l-1),p=this.nodes,d=s?p[f]:void 0,h=sa(d,e,t+5,n,r,i,o,a);if(h===d)return this;if(!s&&h&&p.length>=ma)return function(e,t,n,r,i){for(var o=0,a=new Array(Nr),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[o++]:void 0;return a[r]=i,new ea(e,o+1,a)}(e,p,c,u,h);if(s&&!h&&2===p.length&&fa(p[1^f]))return p[1^f];if(s&&h&&1===p.length&&fa(h))return h;var y=e&&e===this.ownerID,m=s?h?c:c^l:c|l,v=s?h?ha(p,f,h,y):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var i=new Array(r),o=0,a=0;a<r;a++)a===t&&(o=1),i[a]=e[a+o];return i}(p,f,y):function(e,t,n,r){var i=e.length+1;if(r&&t+1===i)return e[t]=n,e;for(var o=new Array(i),a=0,u=0;u<i;u++)u===t?(o[u]=n,a=-1):o[u]=e[u+a];return o}(p,f,h,y);return y?(this.bitmap=m,this.nodes=v,this):new Zo(e,m,v)};var ea=function(e,t,n){this.ownerID=e,this.count=t,this.nodes=n};ea.prototype.get=function(e,t,n,r){void 0===t&&(t=Bi(n));var i=(0===e?t:t>>>e)&jr,o=this.nodes[i];return o?o.get(e+5,t,n,r):r},ea.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=Bi(r));var u=(0===t?n:n>>>t)&jr,l=i===Mr,c=this.nodes,s=c[u];if(l&&!s)return this;var f=sa(s,e,t+5,n,r,i,o,a);if(f===s)return this;var p=this.count;if(s){if(!f&&--p<va)return function(e,t,n,r){for(var i=0,o=0,a=new Array(n),u=0,l=1,c=t.length;u<c;u++,l<<=1){var s=t[u];void 0!==s&&u!==r&&(i|=l,a[o++]=s)}return new Zo(e,i,a)}(e,c,p,u)}else p++;var d=e&&e===this.ownerID,h=ha(c,u,f,d);return d?(this.count=p,this.nodes=h,this):new ea(e,p,h)};var ta=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n};ta.prototype.get=function(e,t,n,r){for(var i=this.entries,o=0,a=i.length;o<a;o++)if(Di(n,i[o][0]))return i[o][1];return r},ta.prototype.update=function(e,t,n,r,i,o,a){void 0===n&&(n=Bi(r));var u=i===Mr;if(n!==this.keyHash)return u?this:(Rr(a),Rr(o),pa(this,e,t,n,[r,i]));for(var l=this.entries,c=0,s=l.length;c<s&&!Di(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===i:u)return this;if(Rr(a),(u||!f)&&Rr(o),u&&2===s)return new na(e,this.keyHash,l[1^c]);var p=e&&e===this.ownerID,d=p?l:wo(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,i]:d.push([r,i]),p?(this.entries=d,this):new ta(e,this.keyHash,d)};var na=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n};na.prototype.get=function(e,t,n,r){return Di(n,this.entry[0])?this.entry[1]:r},na.prototype.update=function(e,t,n,r,i,o,a){var u=i===Mr,l=Di(r,this.entry[0]);return(l?i===this.entry[1]:u)?this:(Rr(a),u?void Rr(o):l?e&&e===this.ownerID?(this.entry[1]=i,this):new na(e,this.keyHash,[r,i]):(Rr(o),pa(this,e,t,Bi(r),[r,i])))},Jo.prototype.iterate=ta.prototype.iterate=function(e,t){for(var n=this.entries,r=0,i=n.length-1;r<=i;r++)if(!1===e(n[t?i-r:r]))return!1},Zo.prototype.iterate=ea.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,i=n.length-1;r<=i;r++){var o=n[t?i-r:r];if(o&&!1===o.iterate(e,t))return!1}},na.prototype.iterate=function(e,t){return e(this.entry)};var ra,ia=function(e){function t(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&aa(e._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n=t.node,r=t.index++,i=void 0;if(n.entry){if(0===r)return oa(e,n.entry)}else if(n.entries){if(r<=(i=n.entries.length-1))return oa(e,n.entries[this._reverse?i-r:r])}else if(r<=(i=n.nodes.length-1)){var o=n.nodes[this._reverse?i-r:r];if(o){if(o.entry)return oa(e,o.entry);t=this._stack=aa(o,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}},t}(fi);function oa(e,t){return pi(e,t[0],t[1])}function aa(e,t){return{node:e,index:0,__prev:t}}function ua(e,t,n,r){var i=Object.create(Xo);return i.size=e,i._root=t,i.__ownerID=n,i.__hash=r,i.__altered=!1,i}function la(){return ra||(ra=ua(0))}function ca(e,t,n){var r,i;if(e._root){var o={value:!1},a={value:!1};if(r=sa(e._root,e.__ownerID,0,void 0,t,n,o,a),!a.value)return e;i=e.size+(o.value?n===Mr?-1:1:0)}else{if(n===Mr)return e;i=1,r=new Jo(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=i,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?ua(i,r):la()}function sa(e,t,n,r,i,o,a,u){return e?e.update(t,n,r,i,o,a,u):o===Mr?e:(Rr(u),Rr(a),new na(t,r,[i,o]))}function fa(e){return e.constructor===na||e.constructor===ta}function pa(e,t,n,r,i){if(e.keyHash===r)return new ta(t,r,[e.entry,i]);var o,a=(0===n?e.keyHash:e.keyHash>>>n)&jr,u=(0===n?r:r>>>n)&jr,l=a===u?[pa(e,t,n+5,r,i)]:(o=new na(t,r,i),a<u?[e,o]:[o,e]);return new Zo(t,1<<a|1<<u,l)}function da(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}function ha(e,t,n,r){var i=r?e:wo(e);return i[t]=n,i}var ya=8,ma=16,va=8,ga="@@__IMMUTABLE_LIST__@@";function ba(e){return Boolean(e&&e[ga])}var _a=function(e){function t(t){var n=Oa();if(null==t)return n;if(ba(t))return t;var r=e(t),i=r.size;return 0===i?n:(xo(i),i>0&&i<Nr?Ta(0,i,5,null,new Sa(r.toArray())):n.withMutations((function(e){e.setSize(i),r.forEach((function(t,n){return e.set(n,t)}))})))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(e,t){if((e=Lr(this,e))>=0&&e<this.size){var n=za(this,e+=this._origin);return n&&n.array[e&jr]}return t},t.prototype.set=function(e,t){return function(e,t,n){if((t=Lr(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations((function(e){t<0?Ia(e,t).set(0,n):Ia(e,0,t+1).set(t,n)}));t+=e._origin;var r=e._tail,i=e._root,o={value:!1};return t>=Na(e._capacity)?r=Ca(r,e.__ownerID,0,t,n,o):i=Ca(i,e.__ownerID,e._level,t,n,o),o.value?e.__ownerID?(e._root=i,e._tail=r,e.__hash=void 0,e.__altered=!0,e):Ta(e._origin,e._capacity,e._level,i,r):e}(this,e,t)},t.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},t.prototype.insert=function(e,t){return this.splice(e,0,t)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=5,this._root=this._tail=null,this.__hash=void 0,this.__altered=!0,this):Oa()},t.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations((function(n){Ia(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])}))},t.prototype.pop=function(){return Ia(this,0,-1)},t.prototype.unshift=function(){var e=arguments;return this.withMutations((function(t){Ia(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])}))},t.prototype.shift=function(){return Ia(this,1)},t.prototype.concat=function(){for(var t=arguments,n=[],r=0;r<arguments.length;r++){var i=t[r],o=e("string"!=typeof i&&hi(i)?i:[i]);0!==o.size&&n.push(o)}return 0===n.length?this:0!==this.size||this.__ownerID||1!==n.length?this.withMutations((function(e){n.forEach((function(t){return t.forEach((function(t){return e.push(t)}))}))})):this.constructor(n[0])},t.prototype.setSize=function(e){return Ia(this,0,e)},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){for(var i=0;i<n.size;i++)r.set(i,e.call(t,r.get(i),i,r))}))},t.prototype.slice=function(e,t){var n=this.size;return Br(e,t,n)?this:Ia(this,Ur(e,n),Wr(t,n))},t.prototype.__iterator=function(e,t){var n=t?this.size:0,r=Ea(this,t);return new fi((function(){var i=r();return i===ka?{value:void 0,done:!0}:pi(e,t?--n:n++,i)}))},t.prototype.__iterate=function(e,t){for(var n,r=t?this.size:0,i=Ea(this,t);(n=i())!==ka&&!1!==e(n,t?--r:r++,this););return r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Ta(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):0===this.size?Oa():(this.__ownerID=e,this.__altered=!1,this)},t}(ei);_a.isList=ba;var wa=_a.prototype;wa[ga]=!0,wa.delete=wa.remove,wa.merge=wa.concat,wa.setIn=No,wa.deleteIn=wa.removeIn=jo,wa.update=Ro,wa.updateIn=Do,wa.mergeIn=Ho,wa.mergeDeepIn=Vo,wa.withMutations=$o,wa.wasAltered=Go,wa.asImmutable=Qo,wa["@@transducer/init"]=wa.asMutable=Ko,wa["@@transducer/step"]=function(e,t){return e.push(t)},wa["@@transducer/result"]=function(e){return e.asImmutable()};var Sa=function(e,t){this.array=e,this.ownerID=t};Sa.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&jr;if(r>=this.array.length)return new Sa([],e);var i,o=0===r;if(t>0){var a=this.array[r];if((i=a&&a.removeBefore(e,t-5,n))===a&&o)return this}if(o&&!i)return this;var u=Pa(this,e);if(!o)for(var l=0;l<r;l++)u.array[l]=void 0;return i&&(u.array[r]=i),u},Sa.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,i=n-1>>>t&jr;if(i>=this.array.length)return this;if(t>0){var o=this.array[i];if((r=o&&o.removeAfter(e,t-5,n))===o&&i===this.array.length-1)return this}var a=Pa(this,e);return a.array.splice(i+1),r&&(a.array[i]=r),a};var xa,ka={};function Ea(e,t){var n=e._origin,r=e._capacity,i=Na(r),o=e._tail;return function e(a,u,l){return 0===u?function(e,a){var u=a===i?o&&o.array:e&&e.array,l=a>n?0:n-a,c=r-a;return c>Nr&&(c=Nr),function(){if(l===c)return ka;var e=t?--c:l++;return u&&u[e]}}(a,l):function(i,o,a){var u,l=i&&i.array,c=a>n?0:n-a>>o,s=1+(r-a>>o);return s>Nr&&(s=Nr),function(){for(;;){if(u){var n=u();if(n!==ka)return n;u=null}if(c===s)return ka;var r=t?--s:c++;u=e(l&&l[r],o-5,a+(r<<o))}}}(a,u,l)}(e._root,e._level,0)}function Ta(e,t,n,r,i,o,a){var u=Object.create(wa);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=i,u.__ownerID=o,u.__hash=a,u.__altered=!1,u}function Oa(){return xa||(xa=Ta(0,0,5))}function Ca(e,t,n,r,i,o){var a,u=r>>>n&jr,l=e&&u<e.array.length;if(!l&&void 0===i)return e;if(n>0){var c=e&&e.array[u],s=Ca(c,t,n-5,r,i,o);return s===c?e:((a=Pa(e,t)).array[u]=s,a)}return l&&e.array[u]===i?e:(o&&Rr(o),a=Pa(e,t),void 0===i&&u===a.array.length-1?a.array.pop():a.array[u]=i,a)}function Pa(e,t){return t&&e&&t===e.ownerID?e:new Sa(e?e.array.slice():[],t)}function za(e,t){if(t>=Na(e._capacity))return e._tail;if(t<1<<e._level+5){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&jr],r-=5;return n}}function Ia(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new Dr,i=e._origin,o=e._capacity,a=i+t,u=void 0===n?o:n<0?o+n:i+n;if(a===i&&u===o)return e;if(a>=u)return e.clear();for(var l=e._level,c=e._root,s=0;a+s<0;)c=new Sa(c&&c.array.length?[void 0,c]:[],r),s+=1<<(l+=5);s&&(a+=s,i+=s,u+=s,o+=s);for(var f=Na(o),p=Na(u);p>=1<<l+5;)c=new Sa(c&&c.array.length?[c]:[],r),l+=5;var d=e._tail,h=p<f?za(e,u-1):p>f?new Sa([],r):d;if(d&&p>f&&a<o&&d.array.length){for(var y=c=Pa(c,r),m=l;m>5;m-=5){var v=f>>>m&jr;y=y.array[v]=Pa(y.array[v],r)}y.array[f>>>5&jr]=d}if(u<o&&(h=h&&h.removeAfter(r,0,u)),a>=p)a-=p,u-=p,l=5,c=null,h=h&&h.removeBefore(r,0,a);else if(a>i||p<f){for(s=0;c;){var g=a>>>l&jr;if(g!==p>>>l&jr)break;g&&(s+=(1<<l)*g),l-=5,c=c.array[g]}c&&a>i&&(c=c.removeBefore(r,l,a-s)),c&&p<f&&(c=c.removeAfter(r,l,p-s)),s&&(a-=s,u-=s)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=l,e._root=c,e._tail=h,e.__hash=void 0,e.__altered=!0,e):Ta(a,u,l,c,h)}function Na(e){return e<Nr?0:e-1>>>5<<5}var ja,Ma=function(e){function t(e){return null==e?Da():Mi(e)?e:Da().withMutations((function(t){var n=Zr(e);xo(n.size),n.forEach((function(e,n){return t.set(n,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this):Da()},t.prototype.set=function(e,t){return Aa(this,e,t)},t.prototype.remove=function(e){return Aa(this,e,Mr)},t.prototype.wasAltered=function(){return this._map.wasAltered()||this._list.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate((function(t){return t&&e(t[1],t[0],n)}),t)},t.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?Ra(t,n,e,this.__hash):0===this.size?Da():(this.__ownerID=e,this._map=t,this._list=n,this)},t}(Yo);function Ra(e,t,n,r){var i=Object.create(Ma.prototype);return i.size=e?e.size:0,i._map=e,i._list=t,i.__ownerID=n,i.__hash=r,i}function Da(){return ja||(ja=Ra(la(),Oa()))}function Aa(e,t,n){var r,i,o=e._map,a=e._list,u=o.get(t),l=void 0!==u;if(n===Mr){if(!l)return e;a.size>=Nr&&a.size>=2*o.size?(r=(i=a.filter((function(e,t){return void 0!==e&&u!==t}))).toKeyedSeq().map((function(e){return e[0]})).flip().toMap(),e.__ownerID&&(r.__ownerID=i.__ownerID=e.__ownerID)):(r=o.remove(t),i=u===a.size-1?a.pop():a.set(u,void 0))}else if(l){if(n===a.get(u)[1])return e;r=o,i=a.set(u,[t,n])}else r=o.set(t,a.size),i=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=i,e.__hash=void 0,e):Ra(r,i)}Ma.isOrderedMap=Mi,Ma.prototype[ui]=!0,Ma.prototype.delete=Ma.prototype.remove;var La="@@__IMMUTABLE_STACK__@@";function Fa(e){return Boolean(e&&e[La])}var Ba=function(e){function t(e){return null==e?Ha():Fa(e)?e:Ha().pushAll(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(e,t){var n=this._head;for(e=Lr(this,e);n&&e--;)n=n.next;return n?n.value:t},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var e=arguments;if(0===arguments.length)return this;for(var t=this.size+arguments.length,n=this._head,r=arguments.length-1;r>=0;r--)n={value:e[r],next:n};return this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):qa(t,n)},t.prototype.pushAll=function(t){if(0===(t=e(t)).size)return this;if(0===this.size&&Fa(t))return t;xo(t.size);var n=this.size,r=this._head;return t.__iterate((function(e){n++,r={value:e,next:r}}),!0),this.__ownerID?(this.size=n,this._head=r,this.__hash=void 0,this.__altered=!0,this):qa(n,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Ha()},t.prototype.slice=function(t,n){if(Br(t,n,this.size))return this;var r=Ur(t,this.size);if(Wr(n,this.size)!==this.size)return e.prototype.slice.call(this,t,n);for(var i=this.size-r,o=this._head;r--;)o=o.next;return this.__ownerID?(this.size=i,this._head=o,this.__hash=void 0,this.__altered=!0,this):qa(i,o)},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?qa(this.size,this._head,e,this.__hash):0===this.size?Ha():(this.__ownerID=e,this.__altered=!1,this)},t.prototype.__iterate=function(e,t){var n=this;if(t)return new ki(this.toArray()).__iterate((function(t,r){return e(t,r,n)}),t);for(var r=0,i=this._head;i&&!1!==e(i.value,r++,this);)i=i.next;return r},t.prototype.__iterator=function(e,t){if(t)return new ki(this.toArray()).__iterator(e,t);var n=0,r=this._head;return new fi((function(){if(r){var t=r.value;return r=r.next,pi(e,n++,t)}return{value:void 0,done:!0}}))},t}(ei);Ba.isStack=Fa;var Ua,Wa=Ba.prototype;function qa(e,t,n,r){var i=Object.create(Wa);return i.size=e,i._head=t,i.__ownerID=n,i.__hash=r,i.__altered=!1,i}function Ha(){return Ua||(Ua=qa(0))}Wa[La]=!0,Wa.shift=Wa.pop,Wa.unshift=Wa.push,Wa.unshiftAll=Wa.pushAll,Wa.withMutations=$o,Wa.wasAltered=Go,Wa.asImmutable=Qo,Wa["@@transducer/init"]=Wa.asMutable=Ko,Wa["@@transducer/step"]=function(e,t){return e.unshift(t)},Wa["@@transducer/result"]=function(e){return e.asImmutable()};var Va="@@__IMMUTABLE_SET__@@";function $a(e){return Boolean(e&&e[Va])}function Ka(e){return $a(e)&&li(e)}function Qa(e,t){if(e===t)return!0;if(!$r(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||Qr(e)!==Qr(t)||Yr(e)!==Yr(t)||li(e)!==li(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!Xr(e);if(li(e)){var r=e.entries();return t.every((function(e,t){var i=r.next().value;return i&&Di(i[1],e)&&(n||Di(i[0],t))}))&&r.next().done}var i=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{i=!0;var o=e;e=t,t=o}var a=!0,u=t.__iterate((function(t,r){if(n?!e.has(t):i?!Di(t,e.get(r,Mr)):!Di(e.get(r,Mr),t))return a=!1,!1}));return a&&e.size===u}function Ga(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}function Ya(e){if(!e||"object"!=typeof e)return e;if(!$r(e)){if(!To(e))return e;e=_i(e)}if(Qr(e)){var t={};return e.__iterate((function(e,n){t[n]=Ya(e)})),t}var n=[];return e.__iterate((function(e){n.push(Ya(e))})),n}var Xa=function(e){function t(t){return null==t?nu():$a(t)&&!li(t)?t:nu().withMutations((function(n){var r=e(t);xo(r.size),r.forEach((function(e){return n.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(Zr(e).keySeq())},t.intersect=function(e){return(e=Jr(e).toArray()).length?Za.intersect.apply(t(e.pop()),e):nu()},t.union=function(e){return(e=Jr(e).toArray()).length?Za.union.apply(t(e.pop()),e):nu()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(e){return this._map.has(e)},t.prototype.add=function(e){return eu(this,this._map.set(e,e))},t.prototype.remove=function(e){return eu(this,this._map.remove(e))},t.prototype.clear=function(){return eu(this,this._map.clear())},t.prototype.map=function(e,t){var n=this,r=[],i=[];return this.forEach((function(o){var a=e.call(t,o,o,n);a!==o&&(r.push(o),i.push(a))})),this.withMutations((function(e){r.forEach((function(t){return e.remove(t)})),i.forEach((function(t){return e.add(t)}))}))},t.prototype.union=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];return 0===(t=t.filter((function(e){return 0!==e.size}))).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations((function(n){for(var r=0;r<t.length;r++)e(t[r]).forEach((function(e){return n.add(e)}))})):this.constructor(t[0])},t.prototype.intersect=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.every((function(t){return t.includes(e)}))||r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.subtract=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.some((function(t){return t.includes(e)}))&&r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.sort=function(e){return bu(so(this,e))},t.prototype.sortBy=function(e,t){return bu(so(this,t,e))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){return this._map.__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):0===this.size?this.__empty():(this.__ownerID=e,this._map=t,this)},t}(ti);Xa.isSet=$a;var Ja,Za=Xa.prototype;function eu(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function tu(e,t){var n=Object.create(Za);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function nu(){return Ja||(Ja=tu(la()))}Za[Va]=!0,Za.delete=Za.remove,Za.merge=Za.concat=Za.union,Za.withMutations=$o,Za.asImmutable=Qo,Za["@@transducer/init"]=Za.asMutable=Ko,Za["@@transducer/step"]=function(e,t){return e.add(t)},Za["@@transducer/result"]=function(e){return e.asImmutable()},Za.__empty=nu,Za.__make=tu;var ru,iu=function(e){function t(e,n,r){if(!(this instanceof t))return new t(e,n,r);if(So(0!==r,"Cannot step a Range by 0"),e=e||0,void 0===n&&(n=1/0),r=void 0===r?1:Math.abs(r),n<e&&(r=-r),this._start=e,this._end=n,this._step=r,this.size=Math.max(0,Math.ceil((n-e)/r-1)+1),0===this.size){if(ru)return ru;ru=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},t.prototype.get=function(e,t){return this.has(e)?this._start+Lr(this,e)*this._step:t},t.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},t.prototype.slice=function(e,n){return Br(e,n,this.size)?this:(e=Ur(e,this.size),(n=Wr(n,this.size))<=e?new t(0,0):new t(this.get(e,this._end),this.get(n,this._end),this._step))},t.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},t.prototype.lastIndexOf=function(e){return this.indexOf(e)},t.prototype.__iterate=function(e,t){for(var n=this.size,r=this._step,i=t?this._start+(n-1)*r:this._start,o=0;o!==n&&!1!==e(i,t?n-++o:o++,this);)i+=t?-r:r;return o},t.prototype.__iterator=function(e,t){var n=this.size,r=this._step,i=t?this._start+(n-1)*r:this._start,o=0;return new fi((function(){if(o===n)return{value:void 0,done:!0};var a=i;return i+=t?-r:r,pi(e,t?n-++o:o++,a)}))},t.prototype.equals=function(e){return e instanceof t?this._start===e._start&&this._end===e._end&&this._step===e._step:Qa(this,e)},t}(Si);function ou(e,t,n){for(var r=ko(t),i=0;i!==r.length;)if((e=Co(e,r[i++],Mr))===Mr)return n;return e}function au(e,t){return ou(this,e,t)}function uu(){xo(this.size);var e={};return this.__iterate((function(t,n){e[n]=t})),e}Jr.isIterable=$r,Jr.isKeyed=Qr,Jr.isIndexed=Yr,Jr.isAssociative=Xr,Jr.isOrdered=li,Jr.Iterator=fi,Ga(Jr,{toArray:function(){xo(this.size);var e=new Array(this.size||0),t=Qr(this),n=0;return this.__iterate((function(r,i){e[n++]=t?[i,r]:r})),e},toIndexedSeq:function(){return new Zi(this)},toJS:function(){return Ya(this)},toKeyedSeq:function(){return new Ji(this,!0)},toMap:function(){return Yo(this.toKeyedSeq())},toObject:uu,toOrderedMap:function(){return Ma(this.toKeyedSeq())},toOrderedSet:function(){return bu(Qr(this)?this.valueSeq():this)},toSet:function(){return Xa(Qr(this)?this.valueSeq():this)},toSetSeq:function(){return new eo(this)},toSeq:function(){return Yr(this)?this.toIndexedSeq():Qr(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Ba(Qr(this)?this.valueSeq():this)},toList:function(){return _a(Qr(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return yo(this,lo(this,e))},includes:function(e){return this.some((function(t){return Di(t,e)}))},entries:function(){return this.__iterator(2)},every:function(e,t){xo(this.size);var n=!0;return this.__iterate((function(r,i,o){if(!e.call(t,r,i,o))return n=!1,!1})),n},filter:function(e,t){return yo(this,oo(this,e,t,!0))},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return xo(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){xo(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate((function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""})),t},keys:function(){return this.__iterator(0)},map:function(e,t){return yo(this,ro(this,e,t))},reduce:function(e,t,n){return fu(this,e,t,n,arguments.length<2,!1)},reduceRight:function(e,t,n){return fu(this,e,t,n,arguments.length<2,!0)},reverse:function(){return yo(this,io(this,!0))},slice:function(e,t){return yo(this,ao(this,e,t,!0))},some:function(e,t){return!this.every(hu(e),t)},sort:function(e){return yo(this,so(this,e))},values:function(){return this.__iterator(1)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some((function(){return!0}))},count:function(e,t){return Ar(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Yo().asMutable();return e.__iterate((function(i,o){r.update(t.call(n,i,o,e),0,(function(e){return e+1}))})),r.asImmutable()}(this,e,t)},equals:function(e){return Qa(this,e)},entrySeq:function(){var e=this;if(e._cache)return new ki(e._cache);var t=e.toSeq().map(du).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(hu(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate((function(n,i,o){if(e.call(t,n,i,o))return r=[i,n],!1})),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(e){return this.find(Fr,null,e)},flatMap:function(e,t){return yo(this,function(e,t,n){var r=vo(e);return e.toSeq().map((function(i,o){return r(t.call(n,i,o,e))})).flatten(!0)}(this,e,t))},flatten:function(e){return yo(this,co(this,e,!0))},fromEntrySeq:function(){return new to(this)},get:function(e,t){return this.find((function(t,n){return Di(n,e)}),void 0,t)},getIn:au,groupBy:function(e,t){return function(e,t,n){var r=Qr(e),i=(li(e)?Ma():Yo()).asMutable();e.__iterate((function(o,a){i.update(t.call(n,o,a,e),(function(e){return(e=e||[]).push(r?[a,o]:o),e}))}));var o=vo(e);return i.map((function(t){return yo(e,o(t))})).asImmutable()}(this,e,t)},has:function(e){return this.get(e,Mr)!==Mr},hasIn:function(e){return ou(this,e,Mr)!==Mr},isSubset:function(e){return e="function"==typeof e.includes?e:Jr(e),this.every((function(t){return e.includes(t)}))},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:Jr(e)).isSubset(this)},keyOf:function(e){return this.findKey((function(t){return Di(t,e)}))},keySeq:function(){return this.toSeq().map(pu).toIndexedSeq()},last:function(e){return this.toSeq().reverse().first(e)},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return fo(this,e)},maxBy:function(e,t){return fo(this,t,e)},min:function(e){return fo(this,e?yu(e):vu)},minBy:function(e,t){return fo(this,t?yu(t):vu,e)},rest:function(){return this.slice(1)},skip:function(e){return 0===e?this:this.slice(Math.max(0,e))},skipLast:function(e){return 0===e?this:this.slice(0,-Math.max(0,e))},skipWhile:function(e,t){return yo(this,uo(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(hu(e),t)},sortBy:function(e,t){return yo(this,so(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return this.slice(-Math.max(0,e))},takeWhile:function(e,t){return yo(this,function(e,t,n){var r=go(e);return r.__iterateUncached=function(r,i){var o=this;if(i)return this.cacheResult().__iterate(r,i);var a=0;return e.__iterate((function(e,i,u){return t.call(n,e,i,u)&&++a&&r(e,i,o)})),a},r.__iteratorUncached=function(r,i){var o=this;if(i)return this.cacheResult().__iterator(r,i);var a=e.__iterator(2,i),u=!0;return new fi((function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var i=e.value,l=i[0],c=i[1];return t.call(n,c,l,o)?2===r?e:pi(r,l,c,e):(u=!1,{value:void 0,done:!0})}))},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(hu(e),t)},update:function(e){return e(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=li(e),n=Qr(e),r=t?1:0;return function(e,t){return t=Ai(t,3432918353),t=Ai(t<<15|t>>>-15,461845907),t=Ai(t<<13|t>>>-13,5),t=Ai((t=(t+3864292196|0)^e)^t>>>16,2246822507),Li((t=Ai(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+gu(Bi(e),Bi(t))|0}:function(e,t){r=r+gu(Bi(e),Bi(t))|0}:t?function(e){r=31*r+Bi(e)|0}:function(e){r=r+Bi(e)|0}),r)}(this))}});var lu=Jr.prototype;lu[Vr]=!0,lu[si]=lu.values,lu.toJSON=lu.toArray,lu.__toStringMapper=Oo,lu.inspect=lu.toSource=function(){return this.toString()},lu.chain=lu.flatMap,lu.contains=lu.includes,Ga(Zr,{flip:function(){return yo(this,no(this))},mapEntries:function(e,t){var n=this,r=0;return yo(this,this.toSeq().map((function(i,o){return e.call(t,[o,i],r++,n)})).fromEntrySeq())},mapKeys:function(e,t){var n=this;return yo(this,this.toSeq().flip().map((function(r,i){return e.call(t,r,i,n)})).flip())}});var cu=Zr.prototype;cu[Kr]=!0,cu[si]=lu.entries,cu.toJSON=uu,cu.__toStringMapper=function(e,t){return Oo(t)+": "+Oo(e)},Ga(ei,{toKeyedSeq:function(){return new Ji(this,!1)},filter:function(e,t){return yo(this,oo(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return yo(this,io(this,!1))},slice:function(e,t){return yo(this,ao(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(t||0,0),0===n||2===n&&!t)return this;e=Ur(e,e<0?this.count():this.size);var r=this.slice(0,e);return yo(this,1===n?r:r.concat(wo(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(e){return this.get(0,e)},flatten:function(e){return yo(this,co(this,e,!1))},get:function(e,t){return(e=Lr(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find((function(t,n){return n===e}),void 0,t)},has:function(e){return(e=Lr(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return yo(this,function(e,t){var n=go(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var i=this,o=0;return e.__iterate((function(e){return(!o||!1!==n(t,o++,i))&&!1!==n(e,o++,i)}),r),o},n.__iteratorUncached=function(n,r){var i,o=e.__iterator(1,r),a=0;return new fi((function(){return(!i||a%2)&&(i=o.next()).done?i:a%2?pi(n,a++,t):pi(n,a++,i.value,i)}))},n}(this,e))},interleave:function(){var e=[this].concat(wo(arguments)),t=ho(this.toSeq(),Si.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),yo(this,n)},keySeq:function(){return iu(0,this.size)},last:function(e){return this.get(-1,e)},skipWhile:function(e,t){return yo(this,uo(this,e,t,!1))},zip:function(){var e=[this].concat(wo(arguments));return yo(this,ho(this,mu,e))},zipAll:function(){var e=[this].concat(wo(arguments));return yo(this,ho(this,mu,e,!0))},zipWith:function(e){var t=wo(arguments);return t[0]=this,yo(this,ho(this,e,t))}});var su=ei.prototype;function fu(e,t,n,r,i,o){return xo(e.size),e.__iterate((function(e,o,a){i?(i=!1,n=e):n=t.call(r,n,e,o,a)}),o),n}function pu(e,t){return t}function du(e,t){return[t,e]}function hu(e){return function(){return!e.apply(this,arguments)}}function yu(e){return function(){return-e.apply(this,arguments)}}function mu(){return wo(arguments)}function vu(e,t){return e<t?1:e>t?-1:0}function gu(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}su[Gr]=!0,su[ui]=!0,Ga(ti,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}}),ti.prototype.has=lu.includes,ti.prototype.contains=ti.prototype.includes,Ga(wi,Zr.prototype),Ga(Si,ei.prototype),Ga(xi,ti.prototype);var bu=function(e){function t(e){return null==e?xu():Ka(e)?e:xu().withMutations((function(t){var n=ti(e);xo(n.size),n.forEach((function(e){return t.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(Zr(e).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(Xa);bu.isOrderedSet=Ka;var _u,wu=bu.prototype;function Su(e,t){var n=Object.create(wu);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function xu(){return _u||(_u=Su(Da()))}wu[ui]=!0,wu.zip=su.zip,wu.zipWith=su.zipWith,wu.__empty=xu,wu.__make=Su;var ku=function(e,t){var n,r=function(o){var a=this;if(o instanceof r)return o;if(!(this instanceof r))return new r(o);if(!n){n=!0;var u=Object.keys(e),l=i._indices={};i._name=t,i._keys=u,i._defaultValues=e;for(var c=0;c<u.length;c++){var s=u[c];l[s]=c,i[s]?"object"==typeof console&&console.warn&&console.warn("Cannot define "+Ou(this)+' with property "'+s+'" since that property name is part of the Record API.'):Pu(i,s)}}this.__ownerID=void 0,this._values=_a().withMutations((function(e){e.setSize(a._keys.length),Zr(o).forEach((function(t,n){e.set(a._indices[n],t===a._defaultValues[n]?void 0:t)}))}))},i=r.prototype=Object.create(Eu);return i.constructor=r,t&&(r.displayName=t),r};ku.prototype.toString=function(){for(var e,t=Ou(this)+" { ",n=this._keys,r=0,i=n.length;r!==i;r++)t+=(r?", ":"")+(e=n[r])+": "+Oo(this.get(e));return t+" }"},ku.prototype.equals=function(e){return this===e||e&&this._keys===e._keys&&Cu(this).equals(Cu(e))},ku.prototype.hashCode=function(){return Cu(this).hashCode()},ku.prototype.has=function(e){return this._indices.hasOwnProperty(e)},ku.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._indices[e],r=this._values.get(n);return void 0===r?this._defaultValues[e]:r},ku.prototype.set=function(e,t){if(this.has(e)){var n=this._values.set(this._indices[e],t===this._defaultValues[e]?void 0:t);if(n!==this._values&&!this.__ownerID)return Tu(this,n)}return this},ku.prototype.remove=function(e){return this.set(e)},ku.prototype.clear=function(){var e=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:Tu(this,e)},ku.prototype.wasAltered=function(){return this._values.wasAltered()},ku.prototype.toSeq=function(){return Cu(this)},ku.prototype.toJS=function(){return Ya(this)},ku.prototype.entries=function(){return this.__iterator(2)},ku.prototype.__iterator=function(e,t){return Cu(this).__iterator(e,t)},ku.prototype.__iterate=function(e,t){return Cu(this).__iterate(e,t)},ku.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._values.__ensureOwner(e);return e?Tu(this,t,e):(this.__ownerID=e,this._values=t,this)},ku.isRecord=oi,ku.getDescriptiveName=Ou;var Eu=ku.prototype;function Tu(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._values=t,r.__ownerID=n,r}function Ou(e){return e.constructor.displayName||e.constructor.name||"Record"}function Cu(e){return Pi(e._keys.map((function(t){return[t,e.get(t)]})))}function Pu(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){So(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}catch(e){}}function zu(e,t){return Iu([],t||Nu,e,"",t&&t.length>2?[]:void 0,{"":e})}function Iu(e,t,n,r,i,o){var a=Array.isArray(n)?Si:Eo(n)?wi:null;if(a){if(~e.indexOf(n))throw new TypeError("Cannot convert circular structure to Immutable");e.push(n),i&&""!==r&&i.push(r);var u=t.call(o,r,a(n).map((function(r,o){return Iu(e,t,r,o,i,n)})),i&&i.slice());return e.pop(),i&&i.pop(),u}return n}function Nu(e,t){return Qr(t)?t.toMap():t.toList()}function ju(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mu(e,t,n){return t&&ju(e.prototype,t),n&&ju(e,n),e}function Ru(){return(Ru=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Du(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Au(e){return!(!e||"function"!=typeof e.hasOwnProperty||!(e.hasOwnProperty("__ownerID")||e._map&&e._map.hasOwnProperty("__ownerID")))}function Lu(e,t,n){return Object.keys(e).reduce((function(t,r){var i=""+r;return t.has(i)?t.set(i,n(t.get(i),e[i])):t}),t)}Eu[ii]=!0,Eu.delete=Eu.remove,Eu.deleteIn=Eu.removeIn=jo,Eu.getIn=au,Eu.hasIn=lu.hasIn,Eu.merge=Ao,Eu.mergeWith=Lo,Eu.mergeIn=Ho,Eu.mergeDeep=Wo,Eu.mergeDeepWith=qo,Eu.mergeDeepIn=Vo,Eu.setIn=No,Eu.update=Ro,Eu.updateIn=Do,Eu.withMutations=$o,Eu.asMutable=Ko,Eu.asImmutable=Qo,Eu[si]=Eu.entries,Eu.toJSON=Eu.toObject=lu.toObject,Eu.inspect=Eu.toSource=function(){return this.toString()};var Fu=function(){function e(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),!e||"string"!=typeof e)throw new Error("Expected a string key for Entity, but found "+e+".");var r=n,i=r.idAttribute,o=void 0===i?"id":i,a=r.mergeStrategy,u=void 0===a?function(e,t){return Ru({},e,t)}:a,l=r.processStrategy,c=void 0===l?function(e){return Ru({},e)}:l,s=r.fallbackStrategy,f=void 0===s?function(e,t){}:s;this._key=e,this._getId="function"==typeof o?o:function(e){return function(t){return Au(t)?t.get(e):t[e]}}(o),this._idAttribute=o,this._mergeStrategy=u,this._processStrategy=c,this._fallbackStrategy=f,this.define(t)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce((function(t,n){var r,i=e[n];return Ru({},t,((r={})[n]=i,r))}),this.schema||{})},t.getId=function(e,t,n){return this._getId(e,t,n)},t.merge=function(e,t){return this._mergeStrategy(e,t)},t.fallback=function(e,t){return this._fallbackStrategy(e,t)},t.normalize=function(e,t,n,r,i,o){var a=this,u=this.getId(e,t,n),l=this.key;if(l in o||(o[l]={}),u in o[l]||(o[l][u]=[]),o[l][u].some((function(t){return t===e})))return u;o[l][u].push(e);var c=this._processStrategy(e,t,n);return Object.keys(this.schema).forEach((function(t){if(c.hasOwnProperty(t)&&"object"==typeof c[t]){var n=a.schema[t],u="function"==typeof n?n(e):n;c[t]=r(c[t],c,t,u,i,o)}})),i(this,c,e,t,n),u},t.denormalize=function(e,t){var n=this;return Au(e)?Lu(this.schema,e,t):(Object.keys(this.schema).forEach((function(r){if(e.hasOwnProperty(r)){var i=n.schema[r];e[r]=t(e[r],i)}})),e)},Mu(e,[{key:"key",get:function(){return this._key}},{key:"idAttribute",get:function(){return this._idAttribute}}]),e}(),Bu=function(){function e(e,t){t&&(this._schemaAttribute="string"==typeof t?function(e){return e[t]}:t),this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=e},t.getSchemaAttribute=function(e,t,n){return!this.isSingleSchema&&this._schemaAttribute(e,t,n)},t.inferSchema=function(e,t,n){if(this.isSingleSchema)return this.schema;var r=this.getSchemaAttribute(e,t,n);return this.schema[r]},t.normalizeValue=function(e,t,n,r,i,o){var a=this.inferSchema(e,t,n);if(!a)return e;var u=r(e,t,n,a,i,o);return this.isSingleSchema||null==u?u:{id:u,schema:this.getSchemaAttribute(e,t,n)}},t.denormalizeValue=function(e,t){var n=Au(e)?e.get("schema"):e.schema;return this.isSingleSchema||n?t((this.isSingleSchema?void 0:Au(e)?e.get("id"):e.id)||e,this.isSingleSchema?this.schema:this.schema[n]):e},Mu(e,[{key:"isSingleSchema",get:function(){return!this._schemaAttribute}}]),e}(),Uu=function(e){function t(t,n){if(!n)throw new Error('Expected option "schemaAttribute" not found on UnionSchema.');return e.call(this,t,n)||this}Du(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){return this.normalizeValue(e,t,n,r,i,o)},n.denormalize=function(e,t){return this.denormalizeValue(e,t)},t}(Bu),Wu=function(e){function t(){return e.apply(this,arguments)||this}Du(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){var a=this;return Object.keys(e).reduce((function(t,n,u){var l,c=e[n];return null!=c?Ru({},t,((l={})[n]=a.normalizeValue(c,e,n,r,i,o),l)):t}),{})},n.denormalize=function(e,t){var n=this;return Object.keys(e).reduce((function(r,i){var o,a=e[i];return Ru({},r,((o={})[i]=n.denormalizeValue(a,t),o))}),{})},t}(Bu),qu=function(e){return Array.isArray(e)?e:Object.keys(e).map((function(t){return e[t]}))},Hu=function(e,t,n,r,i,o,a){return e=function(e){if(Array.isArray(e)&&e.length>1)throw new Error("Expected schema definition to be a single schema, but found "+e.length+".");return e[0]}(e),qu(t).map((function(t,u){return i(t,n,r,e,o,a)}))},Vu=function(e){function t(){return e.apply(this,arguments)||this}Du(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,i,o){var a=this;return qu(e).map((function(e,u){return a.normalizeValue(e,t,n,r,i,o)})).filter((function(e){return null!=e}))},n.denormalize=function(e,t){var n=this;return e&&e.map?e.map((function(e){return n.denormalizeValue(e,t)})):e},t}(Bu),$u=function(e,t,n,r,i,o,a){var u=Ru({},t);return Object.keys(e).forEach((function(n){var r=e[n],l="function"==typeof r?r(t):r,c=i(t[n],t,n,l,o,a);null==c?delete u[n]:u[n]=c})),u},Ku=function(e,t,n){if(Au(t))return Lu(e,t,n);var r=Ru({},t);return Object.keys(e).forEach((function(t){null!=r[t]&&(r[t]=n(r[t],e[t]))})),r},Qu=function e(t,n,r,i,o,a){return"object"==typeof t&&t?"object"!=typeof i||i.normalize&&"function"==typeof i.normalize?i.normalize(t,n,r,e,o,a):(Array.isArray(i)?Hu:$u)(i,t,n,r,e,o,a):t},Gu={Array:Vu,Entity:Fu,Object:function(){function e(e){this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce((function(t,n){var r,i=e[n];return Ru({},t,((r={})[n]=i,r))}),this.schema||{})},t.normalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return $u.apply(void 0,[this.schema].concat(t))},t.denormalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Ku.apply(void 0,[this.schema].concat(t))},e}(),Union:Uu,Values:Wu},Yu=function(e,t){if(!e||"object"!=typeof e)throw new Error('Unexpected input given to normalize. Expected type to be "object", found "'+(null===e?"null":typeof e)+'".');var n={},r=function(e){return function(t,n,r,i,o){var a=t.key,u=t.getId(r,i,o);a in e||(e[a]={});var l=e[a][u];e[a][u]=l?t.merge(l,n):n}}(n);return{entities:n,result:Qu(e,e,null,t,r,{})}},Xu=new Gu.Entity("courses");const Ju=function(e){return Yu(e,[Xu]).entities.courses};var Zu=[];const el=JSON.parse('[{"id":"5debd76480edafc8af244228","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"2d8e40be-1c78-4de0-afc9-fcc147afd4d2","isRead":true,"type":"urgent","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."}},{"id":"5debd764507712e7a1307303","author":{"id":"5debd7648ba8641ce0a34ea4","name":{"first":"Norton","last":"Grimes"},"email":"norton.grimes@holberton.nz","picture":"http://placehold.it/32x32","age":37},"context":{"guid":"cec84b7a-7be4-4af0-b833-f1485433f66e","isRead":false,"type":"urgent","value":"ut labore et dolore magna aliqua. Dignissim convallis aenean et tortor at risus viverra adipiscing. Ac tortor dignissim convallis aenean et. "}},{"id":"5debd76444dd4dafea89d53b","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"280913fe-38dd-4abd-8ab6-acdb4105f922","isRead":false,"type":"urgent","value":"Non diam phasellus vestibulum lorem sed risus ultricies. Tellus mauris a diam maecenas sed"}},{"id":"5debd76485ee4dfd1284f97b","author":{"id":"5debd764f07f50822352e252","name":{"first":"Roach","last":"Cameron"},"email":"roach.cameron@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"89906f88-a02d-41ee-b214-daa0c54633e3","isRead":true,"type":"urgent","value":"Odio pellentesque diam volutpat commodo sed egestas egestas"}},{"id":"5debd7644e561e022d66e61a","author":{"id":"5debd764e66586653a8a33f3","name":{"first":"Christy","last":"Collier"},"email":"christy.collier@holberton.nz","picture":"http://placehold.it/32x32","age":27},"context":{"guid":"f8d66cca-63ec-4f19-a422-a3e1c8f05a36","isRead":false,"type":"urgent","value":"In hendrerit gravida rutrum quisque non tellus orci. Gravida dictum fusce ut placerat orci nulla pellentesque dignissim enim. Lorem mollis aliquam ut porttitor"}},{"id":"5debd7644aaed86c97bf9d5e","author":{"id":"5debd764f5017139ce541857","name":{"first":"Mason","last":"Douglas"},"email":"mason.douglas@holberton.nz","picture":"http://placehold.it/32x32","age":31},"context":{"guid":"de55f849-8fca-4ac7-afbb-41751f09d0c6","isRead":false,"type":"default","value":"Cursus metus aliquam eleifend mi in nulla posuere. "}},{"id":"5debd76413f0d5e5429c28a0","author":{"id":"5debd76456a6a030695e6a70","name":{"first":"Marshall","last":"Wynn"},"email":"marshall.wynn@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"8094c267-ab84-47e1-8801-58ddd23f3b2a","isRead":false,"type":"default","value":"Quam viverra orci sagittis eu volutpat odio facilisis mauris sit"}},{"id":"5debd7642e815cd350407777","author":{"id":"5debd764f8452ef92346c772","name":{"first":"Cherry","last":"Miles"},"email":"cherry.miles@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"3068c575-d619-40af-bf12-dece1ee18dd3","isRead":true,"type":"default","value":"Est ante in nibh mauris cursus mattis molestie a iaculis. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum enim"}},{"id":"5debd764c1127bc5a490a4d0","author":{"id":"5debd76470dcced4a244fe7f","name":{"first":"Sykes","last":"Fulton"},"email":"sykes.fulton@holberton.nz","picture":"http://placehold.it/32x32","age":36},"context":{"guid":"efb6c485-00f7-4fdf-97cc-5e12d14d6c41","isRead":false,"type":"default","value":"Cursus risus at ultrices mi."}},{"id":"5debd7646ef31e0861ec1cab","author":{"id":"5debd7645c8d811b8c6a235d","name":{"first":"Valentine","last":"Juarez"},"email":"valentine.juarez@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"1d3918d0-67e6-44a4-9031-72d7750234de","isRead":true,"type":"default","value":"Velit laoreet id donec ultrices tincidunt arcu non. Aliquet eget sit amet tellus cras adipiscing"}},{"id":"5debd764a4f11eabef05a81d","author":{"id":"5debd764d0b0e7ed3e45ee6d","name":{"first":"Maryann","last":"Larson"},"email":"maryann.larson@holberton.nz","picture":"http://placehold.it/32x32","age":32},"context":{"guid":"98fe7af4-8300-461f-a376-c147b2987616","isRead":false,"type":"default","value":"Ac placerat vestibulum lectus mauris ultrices eros in cursus. Amet nisl suscipit adipiscing bibendum est ultricies integer. Lorem donec massa sapien faucibus et molestie ac"}},{"id":"5debd764af0fdd1fc815ad9b","author":{"id":"5debd764fb6db3a5c21ce617","name":{"first":"Naomi","last":"Hayes"},"email":"naomi.hayes@holberton.nz","picture":"http://placehold.it/32x32","age":30},"context":{"guid":"cd1a09cf-ad6e-4478-9662-18a292807e2e","isRead":false,"type":"urgent","value":"Nulla malesuada pellentesque elit eget gravida cum sociis"}},{"id":"5debd76468cb5b277fd125f4","author":{"id":"5debd764f7234e1d44828515","name":{"first":"Knowles","last":"Vazquez"},"email":"knowles.vazquez@holberton.nz","picture":"http://placehold.it/32x32","age":28},"context":{"guid":"0f446b01-37c3-4884-9dc6-316f23b7711b","isRead":false,"type":"urgent","value":"Elit eget gravida cum sociis natoque penatibus et. Congue mauris rhoncus aenean vel"}},{"id":"5debd764de9fa684468cdc0b","author":{"id":"5debd764ec7c8d21449be7d7","name":{"first":"Greta","last":"Benjamin"},"email":"greta.benjamin@holberton.nz","picture":"http://placehold.it/32x32","age":23},"context":{"guid":"4cc5bc3a-98fe-4392-b97d-6a41da1d944b","isRead":false,"type":"default","value":"Leo vel fringilla est ullamcorper. Volutpat consequat mauris nunc congue"}}]');var tl=new Gu.Entity("users"),nl=new Gu.Entity("messages",{},{idAttribute:"guid"}),rl=new Gu.Entity("notifications",{author:tl,context:nl});Yu(el,[rl]);const il=function(e){return Yu(e,[rl]).entities};var ol={notifications:{},filter:"DEFAULT",loading:!1};var al={isNotificationDrawerVisible:!1,isUserLoggedIn:!1,user:null};var ul={courses:Yo(Zu),notifications:Yo(ol),ui:Yo(al)};const ll={courses:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Yo(Zu),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case ir:var n=Ju(t.data);return Object.keys(n).map((function(e){n[e].isSelected=!1})),e.merge(n);case nr:return e.setIn([String(t.index),"isSelected"],!0);case rr:return e.setIn([String(t.index),"isSelected"],!1)}return e},notifications:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Yo(ol),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case oe:var n=il(t.data);return Object.keys(n.notifications).map((function(e){n.notifications[e].isRead=!1})),e.mergeDeep(zu(n));case re:return e.setIn(["messages",String(t.index),"isRead"],!0);case ie:return e.set("filter",t.filter);case ae:return e.set("loading",t.loading)}return e},ui:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Yo(al),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case sn:return e.set("isNotificationDrawerVisible",!0);case fn:return e.set("isNotificationDrawerVisible",!1);case pn:return e.set("isUserLoggedIn",!0);case dn:return e.set("isUserLoggedIn",!1);case ln:return e.set("user",t.user);case cn:return e.set("isUserLoggedIn",!1).set("user",null)}return e}};var cl=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||h,sl=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var a=t,c=n,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function h(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function y(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1),s=null}}}function m(e){if(!l(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=a(c,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++)(0,t[n])();return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,m({type:u.REPLACE})}function g(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[o.Z]=function(){return this},e}return m({type:u.INIT}),(i={dispatch:m,subscribe:y,getState:h,replaceReducer:v})[o.Z]=g,i}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];"function"==typeof e[i]&&(n[i]=e[i])}var o,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:u.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+u.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,i={},u=0;u<a.length;u++){var l=a[u],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}i[l]=p,r=r||p!==f}return(r=r||a.length!==Object.keys(e).length)?i:e}}(ll),ul,cl(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return d({},n,{dispatch:r=h.apply(void 0,o)(n.dispatch)})}}}(ne)));i.render(r.createElement(r.StrictMode,null,r.createElement(x,{store:sl},r.createElement(Ir,null))),document.getElementById("root"))},679:(e,t,n)=>{"use strict";var r=n(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=d(n);i&&i!==h&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),y=l(n),m=0;m<a.length;++m){var v=a[m];if(!(o[v]||r&&r[v]||y&&y[v]||u&&u[v])){var g=p(n,v);try{c(t,v,g)}catch(e){}}}}return t}},300:(e,t)=>{"use strict";var n=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n)return n;throw new Error("unable to locate global object")}();e.exports=t=n.fetch,n.fetch&&(t.default=n.fetch.bind(n)),t.Headers=n.Headers,t.Request=n.Request,t.Response=n.Response},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,u,l=i(e),c=1;c<arguments.length;c++){for(var s in a=Object(arguments[c]))n.call(a,s)&&(l[s]=a[s]);if(t){u=t(a);for(var f=0;f<u.length;f++)r.call(a,u[f])&&(l[u[f]]=a[u[f]])}}return l}},703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),i=n(418),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,p={onError:function(e){l=!0,c=e}};function d(e,t,n,r,i,o,a,s,f){l=!1,c=null,u.apply(p,arguments)}var h=null,y=null,m=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=m(n),function(e,t,n,r,i,o,u,p,h){if(d.apply(this,arguments),l){if(!l)throw Error(a(198));var y=c;l=!1,c=null,s||(s=!0,f=y)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function _(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!S[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in S[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(x.hasOwnProperty(l))throw Error(a(99,l));x[l]=o;var c=o.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&w(c[i],u,l);i=!0}else o.registrationName?(w(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function w(e,t,n){if(k[e])throw Error(a(100,e));k[e]=t,E[e]=t.eventTypes[n].dependencies}var S=[],x={},k={},E={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&_()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,P=null,z=null;function I(e){if(e=y(e)){if("function"!=typeof C)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function N(e){P?z?z.push(e):z=[e]:P=e}function j(){if(P){var e=P,t=z;if(z=P=null,I(e),t)for(e=0;e<t.length;e++)I(t[e])}}function M(e,t){return e(t)}function R(e,t,n,r,i){return e(t,n,r,i)}function D(){}var A=M,L=!1,F=!1;function B(){null===P&&null===z||(D(),j())}function U(e,t,n){if(F)return e(t,n);F=!0;try{return A(e,t,n)}finally{F=!1,B()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,H={},V={};function $(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new $(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new $(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new $(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new $(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new $(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new $(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new $(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new $(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new $(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,G);K[t]=new $(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new $(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new $("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new $(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var i=K.hasOwnProperty(t)?K[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!q.call(V,e)||!q.call(H,e)&&(W.test(e)?V[e]=!0:(H[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ie=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,pe=Z?Symbol.for("react.lazy"):60116,de=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function ye(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function me(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return me(e.type);case de:return me(e.render);case pe:if(e=1===e._status?e._result:null)return me(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=me(e.type);n=null,r&&(n=me(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(J,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Ee(e,t){ke(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function ze(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Ne(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function je(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function Me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Re(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Ae,Le=(Ae=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Ae(e,t)}))}:Ae);function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ue={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},We={},qe={};function He(e){if(We[e])return We[e];if(!Ue[e])return e;var t,n=Ue[e];for(t in n)if(n.hasOwnProperty(t)&&t in qe)return We[e]=n[t];return e}O&&(qe=document.createElement("div").style,"AnimationEvent"in window||(delete Ue.animationend.animation,delete Ue.animationiteration.animation,delete Ue.animationstart.animation),"TransitionEvent"in window||delete Ue.transitionend.transition);var Ve=He("animationend"),$e=He("animationiteration"),Ke=He("animationstart"),Qe=He("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function et(e){if(Je(e)!==e)throw Error(a(188))}function tt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return et(i),e;if(o===r)return et(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var it=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function at(e){if(null!==e&&(it=nt(it,e)),e=it,it=null,e){if(rt(e,ot),it)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function st(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ft(e,t,n,r){if(ct.length){var i=ct.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Pn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<S.length;l++){var c=S[l];c&&(c=c.extractEvents(r,t,o,i,a))&&(u=nt(u,c))}at(u)}}function dt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&$t(e,t)}n.set(e,null)}}var ht,yt,mt,vt=!1,gt=[],bt=null,_t=null,wt=null,St=new Map,xt=new Map,kt=[],Et="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ot(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Ct(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":xt.delete(t.pointerId)}}function Pt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Ot(t,n,r,i,o),null!==t&&null!==(t=zn(t))&&yt(t),e):(e.eventSystemFlags|=r,e)}function zt(e){var t=Pn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){mt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=zn(t);return null!==n&&yt(n),e.blockedOn=t,!1}return!0}function Nt(e,t,n){It(e)&&n.delete(t)}function jt(){for(vt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=zn(e.blockedOn))&&ht(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==bt&&It(bt)&&(bt=null),null!==_t&&It(_t)&&(_t=null),null!==wt&&It(wt)&&(wt=null),St.forEach(Nt),xt.forEach(Nt)}function Mt(e,t){e.blockedOn===t&&(e.blockedOn=null,vt||(vt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jt)))}function Rt(e){function t(t){return Mt(t,e)}if(0<gt.length){Mt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Mt(bt,e),null!==_t&&Mt(_t,e),null!==wt&&Mt(wt,e),St.forEach(t),xt.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)zt(n),null===n.blockedOn&&kt.shift()}var Dt={},At=new Map,Lt=new Map,Ft=["abort","abort",Ve,"animationEnd",$e,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),At.set(r,o),Dt[i]=o}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ft,2);for(var Ut="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Ut.length;Wt++)Lt.set(Ut[Wt],0);var qt=o.unstable_UserBlockingPriority,Ht=o.unstable_runWithPriority,Vt=!0;function $t(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Qt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Yt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Qt(e,t,n,r){L||D();var i=Yt,o=L;L=!0;try{R(i,e,t,n,r)}finally{(L=o)||B()}}function Gt(e,t,n,r){Ht(qt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){if(Vt)if(0<gt.length&&-1<Et.indexOf(e))e=Ot(null,e,t,n,r),gt.push(e);else{var i=Xt(e,t,n,r);if(null===i)Ct(e,r);else if(-1<Et.indexOf(e))e=Ot(i,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return bt=Pt(bt,e,t,n,r,i),!0;case"dragenter":return _t=Pt(_t,e,t,n,r,i),!0;case"mouseover":return wt=Pt(wt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return St.set(o,Pt(St.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,xt.set(o,Pt(xt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Ct(e,r),e=ft(e,r,null,t);try{U(pt,e)}finally{st(e)}}}}function Xt(e,t,n,r){if(null!==(n=Pn(n=ut(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=Ze(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=ft(e,r,n,t);try{U(pt,e)}finally{st(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Zt=["Webkit","ms","Moz","O"];function en(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function tn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=en(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){Zt.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var nn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function rn(e,t){if(t){if(nn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var an="http://www.w3.org/1999/xhtml";function un(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=E[t];for(var r=0;r<t.length;r++)dt(t[r],e,n)}function ln(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=sn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sn(r)}}function pn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yn="$?",mn="$!",vn=null,gn=null;function bn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function _n(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var wn="function"==typeof setTimeout?setTimeout:void 0,Sn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function kn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||n===mn||n===yn){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var En=Math.random().toString(36).slice(2),Tn="__reactInternalInstance$"+En,On="__reactEventHandlers$"+En,Cn="__reactContainere$"+En;function Pn(e){var t=e[Tn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cn]||n[Tn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=kn(e);null!==e;){if(n=e[Tn])return n;e=kn(e)}return t}n=(e=n).parentNode}return null}function zn(e){return!(e=e[Tn]||e[Cn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function In(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Nn(e){return e[On]||null}function jn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Mn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=Mn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Dn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function An(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Mn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Ln(e){e&&e.dispatchConfig.registrationName&&An(e._targetInst,null,e)}function Fn(e){rt(e,Dn)}var Bn=null,Un=null,Wn=null;function qn(){if(Wn)return Wn;var e,t,n=Un,r=n.length,i="value"in Bn?Bn.value:Bn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Wn=i.slice(e,1<t?1-t:void 0)}function Hn(){return!0}function Vn(){return!1}function $n(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Hn:Vn,this.isPropagationStopped=Vn,this}function Kn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Kn,e.release=Qn}i($n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Hn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Hn)},persist:function(){this.isPersistent=Hn},isPersistent:Vn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Vn,this._dispatchInstances=this._dispatchListeners=null}}),$n.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},$n.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn($n);var Yn=$n.extend({data:null}),Xn=$n.extend({data:null}),Jn=[9,13,27,32],Zn=O&&"CompositionEvent"in window,er=null;O&&"documentMode"in document&&(er=document.documentMode);var tr=O&&"TextEvent"in window&&!er,nr=O&&(!Zn||er&&8<er&&11>=er),rr=String.fromCharCode(32),ir={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},or=!1;function ar(e,t){switch(e){case"keyup":return-1!==Jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ur(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var lr=!1,cr={eventTypes:ir,extractEvents:function(e,t,n,r){var i;if(Zn)e:{switch(e){case"compositionstart":var o=ir.compositionStart;break e;case"compositionend":o=ir.compositionEnd;break e;case"compositionupdate":o=ir.compositionUpdate;break e}o=void 0}else lr?ar(e,n)&&(o=ir.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=ir.compositionStart);return o?(nr&&"ko"!==n.locale&&(lr||o!==ir.compositionStart?o===ir.compositionEnd&&lr&&(i=qn()):(Un="value"in(Bn=r)?Bn.value:Bn.textContent,lr=!0)),o=Yn.getPooled(o,t,n,r),(i||null!==(i=ur(n)))&&(o.data=i),Fn(o),i=o):i=null,(e=tr?function(e,t){switch(e){case"compositionend":return ur(t);case"keypress":return 32!==t.which?null:(or=!0,rr);case"textInput":return(e=t.data)===rr&&or?null:e;default:return null}}(e,n):function(e,t){if(lr)return"compositionend"===e||!Zn&&ar(e,t)?(e=qn(),Wn=Un=Bn=null,lr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return nr&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Xn.getPooled(ir.beforeInput,t,n,r)).data=e,Fn(t)):t=null,null===i?t:null===t?i:[i,t]}},sr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!sr[e.type]:"textarea"===t}var pr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dr(e,t,n){return(e=$n.getPooled(pr.change,e,t,n)).type="change",N(n),Fn(e),e}var hr=null,yr=null;function mr(e){at(e)}function vr(e){if(we(In(e)))return e}function gr(e,t){if("change"===e)return t}var br=!1;function _r(){hr&&(hr.detachEvent("onpropertychange",wr),yr=hr=null)}function wr(e){if("value"===e.propertyName&&vr(yr))if(e=dr(yr,e,ut(e)),L)at(e);else{L=!0;try{M(mr,e)}finally{L=!1,B()}}}function Sr(e,t,n){"focus"===e?(_r(),yr=n,(hr=t).attachEvent("onpropertychange",wr)):"blur"===e&&_r()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(yr)}function kr(e,t){if("click"===e)return vr(t)}function Er(e,t){if("input"===e||"change"===e)return vr(t)}O&&(br=lt("input")&&(!document.documentMode||9<document.documentMode));var Tr={eventTypes:pr,_isInputEventSupported:br,extractEvents:function(e,t,n,r){var i=t?In(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=gr;else if(fr(i))if(br)a=Er;else{a=xr;var u=Sr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=kr);if(a&&(a=a(e,t)))return dr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Oe(i,"number",i.value)}},Or=$n.extend({view:null,detail:null}),Cr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cr[e])&&!!t[e]}function zr(){return Pr}var Ir=0,Nr=0,jr=!1,Mr=!1,Rr=Or.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:zr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ir;return Ir=e.screenX,jr?"mousemove"===e.type?e.screenX-t:0:(jr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Mr?"mousemove"===e.type?e.screenY-t:0:(Mr=!0,0)}}),Dr=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ar={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Lr={eventTypes:Ar,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?Pn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Ar.mouseLeave,c=Ar.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Dr,l=Ar.pointerLeave,c=Ar.pointerEnter,s="pointer");if(e=null==a?o:In(a),o=null==t?o:In(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=jn(e))a++;for(e=0,t=c;t;t=jn(t))e++;for(;0<a-e;)u=jn(u),a--;for(;0<e-a;)c=jn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=jn(u),c=jn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=jn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=jn(s);for(s=0;s<u.length;s++)An(u[s],"bubbled",l);for(s=r.length;0<s--;)An(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}},Fr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Br=Object.prototype.hasOwnProperty;function Ur(e,t){if(Fr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Br.call(t,n[r])||!Fr(e[n[r]],t[n[r]]))return!1;return!0}var Wr=O&&"documentMode"in document&&11>=document.documentMode,qr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Hr=null,Vr=null,$r=null,Kr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Kr||null==Hr||Hr!==cn(n)?null:(n="selectionStart"in(n=Hr)&&hn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},$r&&Ur($r,n)?null:($r=n,(e=$n.getPooled(qr.select,Vr,e,t)).type="select",e.target=Hr,Fn(e),e))}var Gr={eventTypes:qr,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Xe(i),o=E.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?In(t):window,e){case"focus":(fr(i)||"true"===i.contentEditable)&&(Hr=i,Vr=t,$r=null);break;case"blur":$r=Vr=Hr=null;break;case"mousedown":Kr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Kr=!1,Qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Yr=$n.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Xr=$n.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jr=Or.extend({relatedTarget:null});function Zr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var ei={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ti={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ni=Or.extend({key:function(e){if(e.key){var t=ei[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ti[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:zr,charCode:function(e){return"keypress"===e.type?Zr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ri=Rr.extend({dataTransfer:null}),ii=Or.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:zr}),oi=$n.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ai=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ui={eventTypes:Dt,extractEvents:function(e,t,n,r){var i=At.get(e);if(!i)return null;switch(e){case"keypress":if(0===Zr(n))return null;case"keydown":case"keyup":e=ni;break;case"blur":case"focus":e=Jr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ri;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ii;break;case Ve:case $e:case Ke:e=Yr;break;case Qe:e=oi;break;case"scroll":e=Or;break;case"wheel":e=ai;break;case"copy":case"cut":case"paste":e=Xr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Dr;break;default:e=$n}return Fn(t=e.getPooled(i,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),h=Nn,y=zn,m=In,T({SimpleEventPlugin:ui,EnterLeaveEventPlugin:Lr,ChangeEventPlugin:Tr,SelectEventPlugin:Gr,BeforeInputEventPlugin:cr});var li=[],ci=-1;function si(e){0>ci||(e.current=li[ci],li[ci]=null,ci--)}function fi(e,t){ci++,li[ci]=e.current,e.current=t}var pi={},di={current:pi},hi={current:!1},yi=pi;function mi(e,t){var n=e.type.contextTypes;if(!n)return pi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=e.childContextTypes}function gi(){si(hi),si(di)}function bi(e,t,n){if(di.current!==pi)throw Error(a(168));fi(di,t),fi(hi,n)}function _i(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,me(t)||"Unknown",o));return i({},n,{},r)}function wi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||pi,yi=di.current,fi(di,e),fi(hi,hi.current),!0}function Si(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=_i(e,t,yi),r.__reactInternalMemoizedMergedChildContext=e,si(hi),si(di),fi(di,e)):si(hi),fi(hi,n)}var xi=o.unstable_runWithPriority,ki=o.unstable_scheduleCallback,Ei=o.unstable_cancelCallback,Ti=o.unstable_requestPaint,Oi=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Pi=o.unstable_ImmediatePriority,zi=o.unstable_UserBlockingPriority,Ii=o.unstable_NormalPriority,Ni=o.unstable_LowPriority,ji=o.unstable_IdlePriority,Mi={},Ri=o.unstable_shouldYield,Di=void 0!==Ti?Ti:function(){},Ai=null,Li=null,Fi=!1,Bi=Oi(),Ui=1e4>Bi?Oi:function(){return Oi()-Bi};function Wi(){switch(Ci()){case Pi:return 99;case zi:return 98;case Ii:return 97;case Ni:return 96;case ji:return 95;default:throw Error(a(332))}}function qi(e){switch(e){case 99:return Pi;case 98:return zi;case 97:return Ii;case 96:return Ni;case 95:return ji;default:throw Error(a(332))}}function Hi(e,t){return e=qi(e),xi(e,t)}function Vi(e,t,n){return e=qi(e),ki(e,t,n)}function $i(e){return null===Ai?(Ai=[e],Li=ki(Pi,Qi)):Ai.push(e),Mi}function Ki(){if(null!==Li){var e=Li;Li=null,Ei(e)}Qi()}function Qi(){if(!Fi&&null!==Ai){Fi=!0;var e=0;try{var t=Ai;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ai=null}catch(t){throw null!==Ai&&(Ai=Ai.slice(e+1)),ki(Pi,Ki),t}finally{Fi=!1}}}function Gi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Yi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Xi={current:null},Ji=null,Zi=null,eo=null;function to(){eo=Zi=Ji=null}function no(e){var t=Xi.current;si(Xi),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function io(e,t){Ji=e,eo=Zi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Na=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zi){if(null===Ji)throw Error(a(308));Zi=t,Ji.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zi=Zi.next=t;return e._currentValue}var ao=!1;function uo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function co(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.alternate;null!==n&&lo(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function po(e,t,n,r){var o=e.updateQueue;ao=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&null!==(l=l.updateQueue)&&(l.baseQueue=u)}if(null!==a){l=a.next;var c=o.baseState,s=0,f=null,p=null,d=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var y={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===d?(p=d=y,f=c):d=d.next=y,u>s&&(s=u)}else{null!==d&&(d=d.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),cl(u,h.suspenseConfig);e:{var m=e,v=h;switch(u=t,y=n,v.tag){case 1:if("function"==typeof(m=v.payload)){c=m.call(y,c,u);break e}c=m;break e;case 3:m.effectTag=-4097&m.effectTag|64;case 0:if(null==(u="function"==typeof(m=v.payload)?m.call(y,c,u):m))break e;c=i({},c,u);break e;case 2:ao=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=o.shared.pending))break;h=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===d?f=c:d.next=p,o.baseState=f,o.baseQueue=d,sl(s),e.expirationTime=s,e.memoizedState=c}}function ho(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var yo=Y.ReactCurrentBatchConfig,mo=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var go={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=yo.suspense;(i=co(r=Xu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),so(e,i),Ju(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Yu(),i=yo.suspense;(i=co(r=Xu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),so(e,i),Ju(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Yu(),r=yo.suspense;(r=co(n=Xu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),so(e,r),Ju(e,n)}};function bo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&Ur(n,r)&&Ur(i,o))}function _o(e,t,n){var r=!1,i=pi,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=vi(t)?yi:di.current,o=(r=null!=(r=t.contextTypes))?mi(e,i):pi),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=go,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function wo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&go.enqueueReplaceState(t,t.state,null)}function So(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=mo,uo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=vi(t)?yi:di.current,i.context=mi(e,o)),po(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&go.enqueueReplaceState(i,i.state,null),po(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===mo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function To(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=jl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Il(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ml(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Nl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=jl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Il(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case te:return(t=Ml(t,e.mode,n)).return=e,t}if(xo(t)||ye(t))return(t=Nl(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function d(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(xo(n)||ye(n))return null!==i?null:f(e,t,n,r,null);Eo(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xo(r)||ye(r))return f(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function y(i,a,u,l){for(var c=null,s=null,f=a,y=a=0,m=null;null!==f&&y<u.length;y++){f.index>y?(m=f,f=null):m=f.sibling;var v=d(i,f,u[y],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,y),null===s?c=v:s.sibling=v,s=v,f=m}if(y===u.length)return n(i,f),c;if(null===f){for(;y<u.length;y++)null!==(f=p(i,u[y],l))&&(a=o(f,a,y),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);y<u.length;y++)null!==(m=h(f,i,y,u[y],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?y:m.key),a=o(m,a,y),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(i,e)})),c}function m(i,u,l,c){var s=ye(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,y=u,m=u=0,v=null,g=l.next();null!==y&&!g.done;m++,g=l.next()){y.index>m?(v=y,y=null):v=y.sibling;var b=d(i,y,g.value,c);if(null===b){null===y&&(y=v);break}e&&y&&null===b.alternate&&t(i,y),u=o(b,u,m),null===f?s=b:f.sibling=b,f=b,y=v}if(g.done)return n(i,y),s;if(null===y){for(;!g.done;m++,g=l.next())null!==(g=p(i,g.value,c))&&(u=o(g,u,m),null===f?s=g:f.sibling=g,f=g);return s}for(y=r(i,y);!g.done;m++,g=l.next())null!==(g=h(y,i,m,g.value,c))&&(e&&null!==g.alternate&&y.delete(null===g.key?m:g.key),u=o(g,u,m),null===f?s=g:f.sibling=g,f=g);return e&&y.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===ne){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=ko(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Nl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Il(o.type,o.key,o.props,null,e.mode,l)).ref=ko(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ml(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=jl(o,e.mode,l)).return=e,e=r),u(e);if(xo(o))return y(e,r,o,l);if(ye(o))return m(e,r,o,l);if(s&&Eo(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Oo=To(!0),Co=To(!1),Po={},zo={current:Po},Io={current:Po},No={current:Po};function jo(e){if(e===Po)throw Error(a(174));return e}function Mo(e,t){switch(fi(No,t),fi(Io,e),fi(zo,Po),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Re(null,"");break;default:t=Re(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}si(zo),fi(zo,t)}function Ro(){si(zo),si(Io),si(No)}function Do(e){jo(No.current);var t=jo(zo.current),n=Re(t,e.type);t!==n&&(fi(Io,e),fi(zo,n))}function Ao(e){Io.current===e&&(si(zo),si(Io))}var Lo={current:0};function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===yn||n.data===mn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Bo(e,t){return{responder:e,props:t}}var Uo=Y.ReactCurrentDispatcher,Wo=Y.ReactCurrentBatchConfig,qo=0,Ho=null,Vo=null,$o=null,Ko=!1;function Qo(){throw Error(a(321))}function Go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Fr(e[n],t[n]))return!1;return!0}function Yo(e,t,n,r,i,o){if(qo=o,Ho=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Uo.current=null===e||null===e.memoizedState?ba:_a,e=n(r,i),t.expirationTime===qo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,$o=Vo=null,t.updateQueue=null,Uo.current=wa,e=n(r,i)}while(t.expirationTime===qo)}if(Uo.current=ga,t=null!==Vo&&null!==Vo.next,qo=0,$o=Vo=Ho=null,Ko=!1,t)throw Error(a(300));return e}function Xo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$o?Ho.memoizedState=$o=e:$o=$o.next=e,$o}function Jo(){if(null===Vo){var e=Ho.alternate;e=null!==e?e.memoizedState:null}else e=Vo.next;var t=null===$o?Ho.memoizedState:$o.next;if(null!==t)$o=t,Vo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Vo=e).memoizedState,baseState:Vo.baseState,baseQueue:Vo.baseQueue,queue:Vo.queue,next:null},null===$o?Ho.memoizedState=$o=e:$o=$o.next=e}return $o}function Zo(e,t){return"function"==typeof t?t(e):t}function ea(e){var t=Jo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Vo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,c=i;do{var s=c.expirationTime;if(s<qo){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,s>Ho.expirationTime&&(Ho.expirationTime=s,sl(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),cl(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=u,Fr(r,t.memoizedState)||(Na=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ta(e){var t=Jo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Fr(o,t.memoizedState)||(Na=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function na(e){var t=Xo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zo,lastRenderedState:e}).dispatch=va.bind(null,Ho,e),[t.memoizedState,e]}function ra(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ho.updateQueue)?(t={lastEffect:null},Ho.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ia(){return Jo().memoizedState}function oa(e,t,n,r){var i=Xo();Ho.effectTag|=e,i.memoizedState=ra(1|t,n,void 0,void 0===r?null:r)}function aa(e,t,n,r){var i=Jo();r=void 0===r?null:r;var o=void 0;if(null!==Vo){var a=Vo.memoizedState;if(o=a.destroy,null!==r&&Go(r,a.deps))return void ra(t,n,o,r)}Ho.effectTag|=e,i.memoizedState=ra(1|t,n,o,r)}function ua(e,t){return oa(516,4,e,t)}function la(e,t){return aa(516,4,e,t)}function ca(e,t){return aa(4,2,e,t)}function sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function fa(e,t,n){return n=null!=n?n.concat([e]):null,aa(4,2,sa.bind(null,t,e),n)}function pa(){}function da(e,t){return Xo().memoizedState=[e,void 0===t?null:t],e}function ha(e,t){var n=Jo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ya(e,t){var n=Jo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ma(e,t,n){var r=Wi();Hi(98>r?98:r,(function(){e(!0)})),Hi(97<r?97:r,(function(){var r=Wo.suspense;Wo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wo.suspense=r}}))}function va(e,t,n){var r=Yu(),i=yo.suspense;i={expirationTime:r=Xu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Ho||null!==o&&o===Ho)Ko=!0,i.expirationTime=qo,Ho.expirationTime=qo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Fr(u,a))return}catch(e){}Ju(e,r)}}var ga={readContext:oo,useCallback:Qo,useContext:Qo,useEffect:Qo,useImperativeHandle:Qo,useLayoutEffect:Qo,useMemo:Qo,useReducer:Qo,useRef:Qo,useState:Qo,useDebugValue:Qo,useResponder:Qo,useDeferredValue:Qo,useTransition:Qo},ba={readContext:oo,useCallback:da,useContext:oo,useEffect:ua,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,oa(4,2,sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return oa(4,2,e,t)},useMemo:function(e,t){var n=Xo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Ho,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xo().memoizedState=e},useState:na,useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=na(e),r=n[0],i=n[1];return ua((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=na(!1),n=t[0];return t=t[1],[da(ma.bind(null,t,e),[t,e]),n]}},_a={readContext:oo,useCallback:ha,useContext:oo,useEffect:la,useImperativeHandle:fa,useLayoutEffect:ca,useMemo:ya,useReducer:ea,useRef:ia,useState:function(){return ea(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=ea(Zo),r=n[0],i=n[1];return la((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(Zo),n=t[0];return t=t[1],[ha(ma.bind(null,t,e),[t,e]),n]}},wa={readContext:oo,useCallback:ha,useContext:oo,useEffect:la,useImperativeHandle:fa,useLayoutEffect:ca,useMemo:ya,useReducer:ta,useRef:ia,useState:function(){return ta(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var n=ta(Zo),r=n[0],i=n[1];return la((function(){var n=Wo.suspense;Wo.suspense=void 0===t?null:t;try{i(e)}finally{Wo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ta(Zo),n=t[0];return t=t[1],[ha(ma.bind(null,t,e),[t,e]),n]}},Sa=null,xa=null,ka=!1;function Ea(e,t){var n=Cl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ta(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(ka){var t=xa;if(t){var n=t;if(!Ta(e,t)){if(!(t=xn(n.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(Sa=e);Ea(Sa,n)}Sa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,Sa=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Sa=e}function Pa(e){if(e!==Sa)return!1;if(!ka)return Ca(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!_n(t,e.memoizedProps))for(t=xa;t;)Ea(e,t),t=xn(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&n!==mn&&n!==yn||t++}e=e.nextSibling}xa=null}}else xa=Sa?xn(e.stateNode.nextSibling):null;return!0}function za(){xa=Sa=null,ka=!1}var Ia=Y.ReactCurrentOwner,Na=!1;function ja(e,t,n,r){t.child=null===e?Co(t,null,n,r):Oo(t,e.child,n,r)}function Ma(e,t,n,r,i){n=n.render;var o=t.ref;return io(t,i),r=Yo(e,t,n,r,o,i),null===e||Na?(t.effectTag|=1,ja(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ya(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Pl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Il(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(i,r)&&e.ref===t.ref)?Ya(e,t,o):(t.effectTag|=1,(e=zl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,i,o){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(Na=!1,i<o)?(t.expirationTime=e.expirationTime,Ya(e,t,o)):La(e,t,n,r,o)}function Aa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function La(e,t,n,r,i){var o=vi(n)?yi:di.current;return o=mi(t,o),io(t,i),n=Yo(e,t,n,r,o,i),null===e||Na?(t.effectTag|=1,ja(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ya(e,t,i))}function Fa(e,t,n,r,i){if(vi(n)){var o=!0;wi(t)}else o=!1;if(io(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),_o(t,n,r),So(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):mi(t,c=vi(n)?yi:di.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(t,a,r,c),ao=!1;var p=t.memoizedState;a.state=p,po(t,r,a,i),l=t.memoizedState,u!==r||p!==l||hi.current||ao?("function"==typeof s&&(vo(t,n,s,r),l=t.memoizedState),(u=ao||bo(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,lo(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Yi(t.type,u),l=a.context,c="object"==typeof(c=n.contextType)&&null!==c?oo(c):mi(t,c=vi(n)?yi:di.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&wo(t,a,r,c),ao=!1,l=t.memoizedState,a.state=l,po(t,r,a,i),p=t.memoizedState,u!==r||l!==p||hi.current||ao?("function"==typeof s&&(vo(t,n,s,r),p=t.memoizedState),(s=ao||bo(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Ba(e,t,n,r,o,i)}function Ba(e,t,n,r,i,o){Aa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Si(t,n,!1),Ya(e,t,o);r=t.stateNode,Ia.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Oo(t,e.child,null,o),t.child=Oo(t,null,u,o)):ja(e,t,u,o),t.memoizedState=r.state,i&&Si(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Mo(e,t.containerInfo)}var Wa,qa,Ha,Va={dehydrated:null,retryTime:0};function $a(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Lo.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),fi(Lo,1&a),null===e){if(void 0!==o.fallback&&Oa(t),u){if(u=o.fallback,(o=Nl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Va,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Co(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=zl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=zl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Va,t.child=n,i}return n=Oo(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Nl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Nl(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Va,t.child=o,n}return t.memoizedState=null,t.child=Oo(t,e,o.children,n)}function Ka(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ro(e.return,t)}function Qa(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Ga(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ja(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ka(e,n);else if(19===e.tag)Ka(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(fi(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Fo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Qa(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Qa(t,!0,n,null,o,t.lastEffect);break;case"together":Qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ya(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&sl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Xa(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ja(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&gi(),null;case 3:return Ro(),si(hi),si(di),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Pa(t)||(t.effectTag|=4),null;case 5:Ao(t),n=jo(No.current);var o=t.type;if(null!==e&&null!=t.stateNode)qa(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=jo(zo.current),Pa(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[Tn]=t,r[On]=u,o){case"iframe":case"object":case"embed":$t("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)$t(Ge[e],r);break;case"source":$t("error",r);break;case"img":case"image":case"link":$t("error",r),$t("load",r);break;case"form":$t("reset",r),$t("submit",r);break;case"details":$t("toggle",r);break;case"input":xe(r,u),$t("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},$t("invalid",r),un(n,"onChange");break;case"textarea":Ie(r,u),$t("invalid",r),un(n,"onChange")}for(var l in rn(o,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):k.hasOwnProperty(l)&&null!=c&&un(n,l)}switch(o){case"input":_e(r),Te(r,u,!0);break;case"textarea":_e(r),je(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===an&&(e=Me(o)),e===an?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[Tn]=t,e[On]=r,Wa(e,t),t.stateNode=e,l=on(o,r),o){case"iframe":case"object":case"embed":$t("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)$t(Ge[c],e);c=r;break;case"source":$t("error",e),c=r;break;case"img":case"image":case"link":$t("error",e),$t("load",e),c=r;break;case"form":$t("reset",e),$t("submit",e),c=r;break;case"details":$t("toggle",e),c=r;break;case"input":xe(e,r),c=Se(e,r),$t("invalid",e),un(n,"onChange");break;case"option":c=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),$t("invalid",e),un(n,"onChange");break;case"textarea":Ie(e,r),c=ze(e,r),$t("invalid",e),un(n,"onChange");break;default:c=r}rn(o,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?tn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&Fe(e,f):"number"==typeof f&&Fe(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?null!=f&&un(n,u):null!=f&&X(e,u,f,l))}switch(o){case"input":_e(e),Te(e,r,!1);break;case"textarea":_e(e),je(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=ln)}bn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ha(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=jo(No.current),jo(zo.current),Pa(t)?(n=t.stateNode,r=t.memoizedProps,n[Tn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Tn]=t,t.stateNode=n)}return null;case 13:return si(Lo),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Pa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?Iu===ku&&(Iu=Eu):(Iu!==ku&&Iu!==Eu||(Iu=Tu),0!==Du&&null!==Cu&&(Al(Cu,zu),Ll(Cu,Du)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return no(t),null;case 17:return vi(t.type)&&gi(),null;case 19:if(si(Lo),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Xa(r,!1);else if(Iu!==ku||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Fo(u))){for(t.effectTag|=64,Xa(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return fi(Lo,1&Lo.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Fo(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Xa(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ui()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Xa(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Ui()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ui(),n.sibling=null,t=Lo.current,fi(Lo,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Za(e){switch(e.tag){case 1:vi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),si(hi),si(di),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Ao(e),null;case 13:return si(Lo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return si(Lo),null;case 4:return Ro(),null;case 10:return no(e),null;default:return null}}function eu(e,t){return{value:e,source:t,stack:ve(t)}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(jo(zo.current),e=null,n){case"input":a=Se(c,a),r=Se(c,r),e=[];break;case"option":a=Ce(c,a),r=Ce(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=ze(c,a),r=ze(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=ln)}for(u in rn(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(k.hasOwnProperty(u)?(null!=s&&un(o,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Ha=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var tu="function"==typeof WeakSet?WeakSet:Set;function nu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&me(n.type),t=t.value,null!==e&&1===e.tag&&me(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ru(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Sl(e,t)}else t.current=null}function iu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function au(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function uu(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void au(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Yi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ho(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}ho(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&bn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Rt(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function lu(e,t,n){switch("function"==typeof Tl&&Tl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){Sl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:ru(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Sl(e,t)}}(t,n);break;case 5:ru(t);break;case 4:hu(e,t,n)}}function cu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&cu(t)}function su(e){return 5===e.tag||3===e.tag||4===e.tag}function fu(e){e:{for(var t=e.return;null!==t;){if(su(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||su(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?pu(e,n,t):du(e,n,t)}function pu(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=ln));else if(4!==r&&null!==(e=e.child))for(pu(e,t,n),e=e.sibling;null!==e;)pu(e,t,n),e=e.sibling}function du(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(du(e,t,n),e=e.sibling;null!==e;)du(e,t,n),e=e.sibling}function hu(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(lu(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(lu(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function yu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ou(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[On]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),on(e,i),t=on(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?tn(n,l):"dangerouslySetInnerHTML"===u?Le(n,l):"children"===u?Fe(n,l):X(n,u,l,t)}switch(e){case"input":Ee(n,r);break;case"textarea":Ne(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Rt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Lu=Ui()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=en("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void mu(t);case 19:return void mu(t);case 17:return}throw Error(a(163))}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new tu),t.forEach((function(t){var r=kl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var vu="function"==typeof WeakMap?WeakMap:Map;function gu(e,t,n){(n=co(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bu||(Bu=!0,Uu=r),nu(e,t)},n}function bu(e,t,n){(n=co(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return nu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Wu?Wu=new Set([this]):Wu.add(this),nu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _u,wu=Math.ceil,Su=Y.ReactCurrentDispatcher,xu=Y.ReactCurrentOwner,ku=0,Eu=3,Tu=4,Ou=0,Cu=null,Pu=null,zu=0,Iu=ku,Nu=null,ju=1073741823,Mu=1073741823,Ru=null,Du=0,Au=!1,Lu=0,Fu=null,Bu=!1,Uu=null,Wu=null,qu=!1,Hu=null,Vu=90,$u=null,Ku=0,Qu=null,Gu=0;function Yu(){return 0!=(48&Ou)?1073741821-(Ui()/10|0):0!==Gu?Gu:Gu=1073741821-(Ui()/10|0)}function Xu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Wi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ou))return zu;if(null!==n)e=Gi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Gi(e,150,100);break;case 97:case 96:e=Gi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Cu&&e===zu&&--e,e}function Ju(e,t){if(50<Ku)throw Ku=0,Qu=null,Error(a(185));if(null!==(e=Zu(e,t))){var n=Wi();1073741823===t?0!=(8&Ou)&&0==(48&Ou)?rl(e):(tl(e),0===Ou&&Ki()):tl(e),0==(4&Ou)||98!==n&&99!==n||(null===$u?$u=new Map([[e,t]]):(void 0===(n=$u.get(e))||n>t)&&$u.set(e,t))}}function Zu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Cu===i&&(sl(t),Iu===Tu&&Al(i,zu)),Ll(i,t)),i}function el(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Dl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function tl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=$i(rl.bind(null,e));else{var t=el(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Yu();if(r=1073741823===t?99:1===t||2===t?95:0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Mi&&Ei(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?$i(rl.bind(null,e)):Vi(r,nl.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function nl(e,t){if(Gu=0,t)return Fl(e,t=Yu()),tl(e),null;var n=el(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ou))throw Error(a(327));if(bl(),e===Cu&&n===zu||al(e,n),null!==Pu){var r=Ou;Ou|=16;for(var i=ll();;)try{pl();break}catch(t){ul(e,t)}if(to(),Ou=r,Su.current=i,1===Iu)throw t=Nu,al(e,n),Al(e,n),tl(e),t;if(null===Pu)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Iu,Cu=null,r){case ku:case 1:throw Error(a(345));case 2:Fl(e,2<n?2:n);break;case Eu:if(Al(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),1073741823===ju&&10<(i=Lu+500-Ui())){if(Au){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,al(e,n);break}}if(0!==(o=el(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=wn(ml.bind(null,e),i);break}ml(e);break;case Tu:if(Al(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=yl(i)),Au&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,al(e,n);break}if(0!==(i=el(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Mu?r=10*(1073741821-Mu)-Ui():1073741823===ju?r=0:(r=10*(1073741821-ju)-5e3,0>(r=(i=Ui())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*wu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=wn(ml.bind(null,e),r);break}ml(e);break;case 5:if(1073741823!==ju&&null!==Ru){o=ju;var u=Ru;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Ui()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Al(e,n),e.timeoutHandle=wn(ml.bind(null,e),r);break}}ml(e);break;default:throw Error(a(329))}if(tl(e),e.callbackNode===t)return nl.bind(null,e)}}return null}function rl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ou))throw Error(a(327));if(bl(),e===Cu&&t===zu||al(e,t),null!==Pu){var n=Ou;Ou|=16;for(var r=ll();;)try{fl();break}catch(t){ul(e,t)}if(to(),Ou=n,Su.current=r,1===Iu)throw n=Nu,al(e,t),Al(e,t),tl(e),n;if(null!==Pu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Cu=null,ml(e),tl(e)}return null}function il(e,t){var n=Ou;Ou|=1;try{return e(t)}finally{0===(Ou=n)&&Ki()}}function ol(e,t){var n=Ou;Ou&=-2,Ou|=8;try{return e(t)}finally{0===(Ou=n)&&Ki()}}function al(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Sn(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&gi();break;case 3:Ro(),si(hi),si(di);break;case 5:Ao(r);break;case 4:Ro();break;case 13:case 19:si(Lo);break;case 10:no(r)}n=n.return}Cu=e,Pu=zl(e.current,null),zu=t,Iu=ku,Nu=null,Mu=ju=1073741823,Ru=null,Du=0,Au=!1}function ul(e,t){for(;;){try{if(to(),Uo.current=ga,Ko)for(var n=Ho.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(qo=0,$o=Vo=Ho=null,Ko=!1,null===Pu||null===Pu.return)return Iu=1,Nu=t,Pu=null;e:{var i=e,o=Pu.return,a=Pu,u=t;if(t=zu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Lo.current),f=o;do{var p;if(p=13===f.tag){var d=f.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(p){var y=f.updateQueue;if(null===y){var m=new Set;m.add(l),f.updateQueue=m}else y.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=co(1073741823,null);v.tag=2,so(a,v)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=i.pingCache;if(null===g?(g=i.pingCache=new vu,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(a)){u.add(a);var b=xl.bind(null,i,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((me(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}5!==Iu&&(Iu=2),u=eu(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,fo(f,gu(f,l,t));break e;case 1:l=u;var _=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Wu||!Wu.has(w)))){f.effectTag|=4096,f.expirationTime=t,fo(f,bu(f,l,t));break e}}f=f.return}while(null!==f)}Pu=hl(Pu)}catch(e){t=e;continue}break}}function ll(){var e=Su.current;return Su.current=ga,null===e?ga:e}function cl(e,t){e<ju&&2<e&&(ju=e),null!==t&&e<Mu&&2<e&&(Mu=e,Ru=t)}function sl(e){e>Du&&(Du=e)}function fl(){for(;null!==Pu;)Pu=dl(Pu)}function pl(){for(;null!==Pu&&!Ri();)Pu=dl(Pu)}function dl(e){var t=_u(e.alternate,e,zu);return e.memoizedProps=e.pendingProps,null===t&&(t=hl(e)),xu.current=null,t}function hl(e){Pu=e;do{var t=Pu.alternate;if(e=Pu.return,0==(2048&Pu.effectTag)){if(t=Ja(t,Pu,zu),1===zu||1!==Pu.childExpirationTime){for(var n=0,r=Pu.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Pu.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Pu.firstEffect),null!==Pu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Pu.firstEffect),e.lastEffect=Pu.lastEffect),1<Pu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Pu:e.firstEffect=Pu,e.lastEffect=Pu))}else{if(null!==(t=Za(Pu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Pu.sibling))return t;Pu=e}while(null!==Pu);return Iu===ku&&(Iu=5),null}function yl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function ml(e){var t=Wi();return Hi(99,vl.bind(null,e,t)),null}function vl(e,t){do{bl()}while(null!==Hu);if(0!=(48&Ou))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=yl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Cu&&(Pu=Cu=null,zu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Ou;Ou|=32,xu.current=null,vn=Vt;var u=dn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,y=0,m=0,v=u,g=null;t:for(;;){for(var b;v!==l||0!==s&&3!==v.nodeType||(d=p+s),v!==f||0!==c&&3!==v.nodeType||(h=p+c),3===v.nodeType&&(p+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===u)break t;if(g===l&&++y===s&&(d=p),g===f&&++m===c&&(h=p),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;gn={activeElementDetached:null,focusedElem:u,selectionRange:l},Vt=!1,Fu=i;do{try{gl()}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);Fu=i;do{try{for(u=e,l=t;null!==Fu;){var _=Fu.effectTag;if(16&_&&Fe(Fu.stateNode,""),128&_){var w=Fu.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&_){case 2:fu(Fu),Fu.effectTag&=-3;break;case 6:fu(Fu),Fu.effectTag&=-3,yu(Fu.alternate,Fu);break;case 1024:Fu.effectTag&=-1025;break;case 1028:Fu.effectTag&=-1025,yu(Fu.alternate,Fu);break;case 4:yu(Fu.alternate,Fu);break;case 8:hu(u,s=Fu,l),cu(s)}Fu=Fu.nextEffect}}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);if(S=gn,w=dn(),_=S.focusedElem,l=S.selectionRange,w!==_&&_&&_.ownerDocument&&pn(_.ownerDocument.documentElement,_)){null!==l&&hn(_)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(S,_.value.length)):(S=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),s=_.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!S.extend&&u>l&&(s=l,l=u,u=s),s=fn(_,u),f=fn(_,l),s&&f&&(1!==S.rangeCount||S.anchorNode!==s.node||S.anchorOffset!==s.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(s.node,s.offset),S.removeAllRanges(),u>l?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=_;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(S=w[_]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Vt=!!vn,gn=vn=null,e.current=n,Fu=i;do{try{for(_=e;null!==Fu;){var x=Fu.effectTag;if(36&x&&uu(_,Fu.alternate,Fu),128&x){w=void 0;var k=Fu.ref;if(null!==k){var E=Fu.stateNode;switch(Fu.tag){case 5:w=E;break;default:w=E}"function"==typeof k?k(w):k.current=w}}Fu=Fu.nextEffect}}catch(e){if(null===Fu)throw Error(a(330));Sl(Fu,e),Fu=Fu.nextEffect}}while(null!==Fu);Fu=null,Di(),Ou=o}else e.current=n;if(qu)qu=!1,Hu=e,Vu=t;else for(Fu=i;null!==Fu;)t=Fu.nextEffect,Fu.nextEffect=null,Fu=t;if(0===(t=e.firstPendingTime)&&(Wu=null),1073741823===t?e===Qu?Ku++:(Ku=0,Qu=e):Ku=0,"function"==typeof El&&El(n.stateNode,r),tl(e),Bu)throw Bu=!1,e=Uu,Uu=null,e;return 0!=(8&Ou)||Ki(),null}function gl(){for(;null!==Fu;){var e=Fu.effectTag;0!=(256&e)&&iu(Fu.alternate,Fu),0==(512&e)||qu||(qu=!0,Vi(97,(function(){return bl(),null}))),Fu=Fu.nextEffect}}function bl(){if(90!==Vu){var e=97<Vu?97:Vu;return Vu=90,Hi(e,_l)}}function _l(){if(null===Hu)return!1;var e=Hu;if(Hu=null,0!=(48&Ou))throw Error(a(331));var t=Ou;for(Ou|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ou(5,n),au(5,n)}}catch(t){if(null===e)throw Error(a(330));Sl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ou=t,Ki(),!0}function wl(e,t,n){so(e,t=gu(e,t=eu(n,t),1073741823)),null!==(e=Zu(e,1073741823))&&tl(e)}function Sl(e,t){if(3===e.tag)wl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){wl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Wu||!Wu.has(r))){so(n,e=bu(n,e=eu(t,e),1073741823)),null!==(n=Zu(n,1073741823))&&tl(n);break}}n=n.return}}function xl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Cu===e&&zu===n?Iu===Tu||Iu===Eu&&1073741823===ju&&Ui()-Lu<500?al(e,zu):Au=!0:Dl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,tl(e)))}function kl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(t=Xu(t=Yu(),e,null)),null!==(e=Zu(e,t))&&tl(e)}_u=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||hi.current)Na=!0;else{if(r<n){switch(Na=!1,t.tag){case 3:Ua(t),za();break;case 5:if(Do(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&wi(t);break;case 4:Mo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,fi(Xi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?$a(e,t,n):(fi(Lo,1&Lo.current),null!==(t=Ya(e,t,n))?t.sibling:null);fi(Lo,1&Lo.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ga(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),fi(Lo,Lo.current),!r)return null}return Ya(e,t,n)}Na=!1}}else Na=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=mi(t,di.current),io(t,n),i=Yo(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var o=!0;wi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,uo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&vo(t,r,u,e),i.updater=go,t.stateNode=i,i._reactInternalFiber=t,So(t,r,e,n),t=Ba(null,t,r,!0,o,n)}else t.tag=0,ja(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Pl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Yi(i,e),o){case 0:t=La(null,t,i,e,n);break e;case 1:t=Fa(null,t,i,e,n);break e;case 11:t=Ma(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Yi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,La(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Fa(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,lo(e,t),po(t,r,null,n),(r=t.memoizedState.element)===i)za(),t=Ya(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),Sa=t,i=ka=!0),i)for(n=Co(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else ja(e,t,r,n),za();t=t.child}return t;case 5:return Do(t),null===e&&Oa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,_n(r,i)?u=null:null!==o&&_n(r,o)&&(t.effectTag|=16),Aa(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ja(e,t,u,n),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return $a(e,t,n);case 4:return Mo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oo(t,null,r,n):ja(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ma(e,t,r,i=t.elementType===r?i:Yi(r,i),n);case 7:return ja(e,t,t.pendingProps,n),t.child;case 8:case 12:return ja(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(fi(Xi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0==(o=Fr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!hi.current){t=Ya(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=co(n,null)).tag=2,so(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ro(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}ja(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,io(t,n),r=r(i=oo(i,o.unstable_observedBits)),t.effectTag|=1,ja(e,t,r,n),t.child;case 14:return o=Yi(i=t.type,t.pendingProps),Ra(e,t,i,o=Yi(i.type,o),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Yi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,wi(t)):e=!1,io(t,n),_o(t,r,i),So(t,r,i,n),Ba(null,t,r,!0,e,n);case 19:return Ga(e,t,n)}throw Error(a(156,t.tag))};var El=null,Tl=null;function Ol(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Cl(e,t,n,r){return new Ol(e,t,n,r)}function Pl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Cl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Il(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Pl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Nl(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=Cl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ce:return(e=Cl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=Cl(19,n,t,i)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case pe:u=16,r=null;break e;case de:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Cl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Nl(e,t,n,r){return(e=Cl(7,e,r,t)).expirationTime=n,e}function jl(e,t,n){return(e=Cl(6,e,null,t)).expirationTime=n,e}function Ml(e,t,n){return(t=Cl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Rl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Dl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Al(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Ll(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Fl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Bl(e,t,n,r){var i=t.current,o=Yu(),u=yo.suspense;o=Xu(o,i,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vi(c)){n=_i(n,c,l);break e}}n=l}else n=pi;return null===t.context?t.context=n:t.pendingContext=n,(t=co(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(i,t),Ju(i,o),o}function Ul(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Wl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ql(e,t){Wl(e,t),(e=e.alternate)&&Wl(e,t)}function Hl(e,t,n){var r=new Rl(e,t,n=null!=n&&!0===n.hydrate),i=Cl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,uo(i),e[Cn]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);Et.forEach((function(e){dt(e,t,n)})),Tt.forEach((function(e){dt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Vl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function $l(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Ul(a);u.call(e)}}Bl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Hl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ul(a);l.call(e)}}ol((function(){Bl(t,a,e,i)}))}return Ul(a)}function Kl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vl(t))throw Error(a(200));return Kl(e,t,null,n)}Hl.prototype.render=function(e){Bl(e,this._internalRoot,null,null)},Hl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Bl(null,e,null,(function(){t[Cn]=null}))},ht=function(e){if(13===e.tag){var t=Gi(Yu(),150,100);Ju(e,t),ql(e,t)}},yt=function(e){13===e.tag&&(Ju(e,3),ql(e,3))},mt=function(e){if(13===e.tag){var t=Yu();Ju(e,t=Xu(t,e,null)),ql(e,t)}},C=function(e,t,n){switch(t){case"input":if(Ee(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Nn(r);if(!i)throw Error(a(90));we(r),Ee(r,i)}}}break;case"textarea":Ne(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},M=il,R=function(e,t,n,r,i){var o=Ou;Ou|=4;try{return Hi(98,e.bind(null,t,n,r,i))}finally{0===(Ou=o)&&Ki()}},D=function(){0==(49&Ou)&&(function(){if(null!==$u){var e=$u;$u=null,e.forEach((function(e,t){Fl(t,e),tl(t)})),Ki()}}(),bl())},A=function(e,t){var n=Ou;Ou|=2;try{return e(t)}finally{0===(Ou=n)&&Ki()}};var Gl={Events:[zn,In,Nn,T,x,Fn,function(e){rt(e,Ln)},N,j,Yt,at,bl,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);El=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Tl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=tt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Pn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gl,t.createPortal=Ql,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=tt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ou))throw Error(a(187));var n=Ou;Ou|=1;try{return Hi(99,e.bind(null,t))}finally{Ou=n,Ki()}},t.hydrate=function(e,t,n){if(!Vl(t))throw Error(a(200));return $l(null,e,t,!0,n)},t.render=function(e,t,n){if(!Vl(t))throw Error(a(200));return $l(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Vl(e))throw Error(a(40));return!!e._reactRootContainer&&(ol((function(){$l(null,null,e,!1,(function(){e._reactRootContainer=null,e[Cn]=null}))})),!0)},t.unstable_batchedUpdates=il,t.unstable_createPortal=function(e,t){return Ql(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Vl(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return $l(e,t,n,!1,r)},t.version="16.14.0"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,y=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case o:case u:case a:case d:return e;default:switch(e=e&&e.$$typeof){case c:case p:case m:case y:case l:return e;default:return t}}case i:return t}}}function S(e){return w(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=o,t.Lazy=m,t.Memo=y,t.Portal=i,t.Profiler=u,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return S(e)||w(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===i},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===u||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===l||e.$$typeof===c||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=w},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.forward_ref"):60112,d=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,y=i?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var x=S.prototype=new w;x.constructor=S,r(x,_.prototype),x.isPureReactComponent=!0;var k={current:null},E=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)E.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,z=[];function I(e,t,n,r){if(z.length){var i=z.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>z.length&&z.push(e)}function j(e,t,n,r){var i=typeof e;"undefined"!==i&&"boolean"!==i||(e=null);var u=!1;if(null===e)u=!0;else switch(i){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return n(r,e,""===t?"."+R(e,0):t),1;if(u=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=t+R(i=e[l],l);u+=j(i,c,n,r)}else if("function"==typeof(c=null===e||"object"!=typeof e?null:"function"==typeof(c=m&&e[m]||e["@@iterator"])?c:null))for(e=c.call(e),l=0;!(i=e.next()).done;)u+=j(i=i.value,c=t+R(i,l++),n,r);else if("object"===i)throw n=""+e,Error(v(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return u}function M(e,t,n){return null==e?0:j(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),M(e,A,t=I(t,o,r,i)),N(t)}var F={current:null};function B(){var e=F.current;if(null===e)throw Error(v(321));return e}var U={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,D,t=I(null,null,t,n)),N(t)},count:function(e){return M(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(v(143));return e}},t.Component=_,t.Fragment=u,t.Profiler=c,t.PureComponent=S,t.StrictMode=l,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)E.call(t,s)&&!T.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.14.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,i,o,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},s=Date.now();t.unstable_now=function(){return Date.now()-s},n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(c,0))},r=function(e,t){l=setTimeout(e,t)},i=function(){clearTimeout(l)},o=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var m=p.now();t.unstable_now=function(){return p.now()-m}}var v=!1,g=null,b=-1,_=5,w=0;o=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,x=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+_;try{g(!0,e)?x.postMessage(null):(v=!1,g=null)}catch(e){throw x.postMessage(null),e}}else v=!1},n=function(e){g=e,v||(v=!0,x.postMessage(null))},r=function(e,n){b=d((function(){e(t.unstable_now())}),n)},i=function(){h(b),b=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<O(i,t)))break e;e[r]=t,e[n]=i,n=r}}function E(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>O(a,n))void 0!==l&&0>O(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>O(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function O(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],z=1,I=null,N=3,j=!1,M=!1,R=!1;function D(e){for(var t=E(P);null!==t;){if(null===t.callback)T(P);else{if(!(t.startTime<=e))break;T(P),t.sortIndex=t.expirationTime,k(C,t)}t=E(P)}}function A(e){if(R=!1,D(e),!M)if(null!==E(C))M=!0,n(L);else{var t=E(P);null!==t&&r(A,t.startTime-e)}}function L(e,n){M=!1,R&&(R=!1,i()),j=!0;var a=N;try{for(D(n),I=E(C);null!==I&&(!(I.expirationTime>n)||e&&!o());){var u=I.callback;if(null!==u){I.callback=null,N=I.priorityLevel;var l=u(I.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?I.callback=l:I===E(C)&&T(C),D(n)}else T(C);I=E(C)}if(null!==I)var c=!0;else{var s=E(P);null!==s&&r(A,s.startTime-n),c=!1}return c}finally{I=null,N=a,j=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){M||j||(M=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,o,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:F(e)}else a=F(e),l=u;return e={id:z++,callback:o,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,k(P,e),null===E(C)&&e===E(P)&&(R?i():R=!0,r(A,l-u))):(e.sortIndex=a,k(C,e),M||j||(M=!0,n(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=E(C);return n!==I&&null!==I&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<I.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},887:e=>{"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r](i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(33)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvYXNhcC9icm93c2VyLWFzYXAuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL2FzYXAvYnJvd3Nlci1yYXcuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tZXJnZVByb3BzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9jb25uZWN0LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hY3Rpb25zL25vdGlmaWNhdGlvbkFjdGlvblR5cGVzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hY3Rpb25zL25vdGlmaWNhdGlvbkFjdGlvbkNyZWF0b3JzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZXNlbGVjdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvc2VsZWN0b3JzL25vdGlmaWNhdGlvblNlbGVjdG9yLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9hcGhyb2RpdGUvZXMvY2h1bmstZmViY2U0NmIuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25JdGVtLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hc3NldHMvY2xvc2UtaWNvbi5wbmciLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zQ29udGFpbmVyLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hY3Rpb25zL3VpQWN0aW9uVHlwZXMuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL2FjdGlvbnMvdWlBY3Rpb25DcmVhdG9ycy5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvQXBwL0FwcENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL2Fzc2V0cy9ob2xiZXJ0b25fbG9nby5qcGciLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0hlYWRlci9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0JvZHlTZWN0aW9uL0JvZHlTZWN0aW9uLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20uanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0xvZ2luL0xvZ2luLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hY3Rpb25zL2NvdXJzZUFjdGlvblR5cGVzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZUxpc3RSb3cuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL0NvdXJzZUxpc3QvQ291cnNlTGlzdC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvc2VsZWN0b3JzL2NvdXJzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9hY3Rpb25zL2NvdXJzZUFjdGlvbkNyZWF0b3JzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9Gb290ZXIvRm9vdGVyLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvQXBwL0FwcC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvaW1tdXRhYmxlL2Rpc3QvaW1tdXRhYmxlLmVzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpenIvZGlzdC9ub3JtYWxpenIuZXMuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vc3JjL3NjaGVtYS9jb3Vyc2VzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9yZWR1Y2Vycy9jb3Vyc2VSZWR1Y2VyLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9zY2hlbWEvbm90aWZpY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvcmVkdWNlcnMvbm90aWZpY2F0aW9uUmVkdWNlci5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvcmVkdWNlcnMvdWlSZWR1Y2VyLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL3NyYy9yZWR1Y2Vycy9yb290UmVkdWNlci5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvLi9ub2RlX21vZHVsZXMvc3RyaW5nLWhhc2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFza181Ly4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2tfNS8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly90YXNrXzUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGFza181L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3Rhc2tfNS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdGFza181L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGFza181L3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vdGFza181L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdGFza181L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3Rhc2tfNS93ZWJwYWNrL3N0YXJ0dXAiXSwibmFtZXMiOlsicmF3QXNhcCIsImZyZWVUYXNrcyIsInBlbmRpbmdFcnJvcnMiLCJyZXF1ZXN0RXJyb3JUaHJvdyIsIm1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lciIsImxlbmd0aCIsInNoaWZ0IiwiYXNhcCIsInRhc2siLCJyYXdUYXNrIiwicG9wIiwiUmF3VGFzayIsInRoaXMiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvdG90eXBlIiwiY2FsbCIsImVycm9yIiwib25lcnJvciIsInB1c2giLCJxdWV1ZSIsInJlcXVlc3RGbHVzaCIsImluZGV4IiwiZmx1c2giLCJjdXJyZW50SW5kZXgiLCJzY2FuIiwibmV3TGVuZ3RoIiwidG9nZ2xlIiwib2JzZXJ2ZXIiLCJub2RlIiwic2NvcGUiLCJnIiwic2VsZiIsIkJyb3dzZXJNdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJjYWxsYmFjayIsInRpbWVvdXRIYW5kbGUiLCJzZXRUaW1lb3V0IiwiaGFuZGxlVGltZXIiLCJpbnRlcnZhbEhhbmRsZSIsInNldEludGVydmFsIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsImRhdGEiLCJyYW5kb21TdHJpbmciLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJzcGxpdCIsImpvaW4iLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0Iiwib2JqIiwicHJvdG8iLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwia2V5IiwiYWN0aW9uIiwiYWN0aW9uVHlwZSIsInR5cGUiLCJTdHJpbmciLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJkaXNwYXRjaCIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2RlZmluZVByb3BlcnR5IiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsImkiLCJzb3VyY2UiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiQXJyYXkiLCJfa2V5IiwiYXJnIiwicmVkdWNlIiwiYSIsImIiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYmluZCIsIl9wcm90byIsImFkZE5lc3RlZFN1YiIsImxpc3RlbmVyIiwidHJ5U3Vic2NyaWJlIiwic3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJpc1N1YnNjcmliZWQiLCJCb29sZWFuIiwiZmlyc3QiLCJsYXN0IiwiY2xlYXIiLCJuZXh0IiwiZ2V0IiwicHJldiIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsInRyeVVuc3Vic2NyaWJlIiwid2luZG93IiwiY3JlYXRlRWxlbWVudCIsInVzZUxheW91dEVmZmVjdCIsInVzZUVmZmVjdCIsIl9yZWYiLCJjb250ZXh0IiwiY2hpbGRyZW4iLCJjb250ZXh0VmFsdWUiLCJ1c2VNZW1vIiwic3Vic2NyaXB0aW9uIiwicHJldmlvdXNTdGF0ZSIsImdldFN0YXRlIiwiQ29udGV4dCIsIlByb3ZpZGVyIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJoYXNPd25Qcm9wZXJ0eSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaW5kZXhPZiIsIkVNUFRZX0FSUkFZIiwiTk9fU1VCU0NSSVBUSU9OX0FSUkFZIiwic3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyIiwic3RhdGUiLCJ1cGRhdGVDb3VudCIsInBheWxvYWQiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MiLCJlZmZlY3RGdW5jIiwiZWZmZWN0QXJncyIsImRlcGVuZGVuY2llcyIsImNhcHR1cmVXcmFwcGVyUHJvcHMiLCJsYXN0V3JhcHBlclByb3BzIiwibGFzdENoaWxkUHJvcHMiLCJyZW5kZXJJc1NjaGVkdWxlZCIsIndyYXBwZXJQcm9wcyIsImFjdHVhbENoaWxkUHJvcHMiLCJjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlIiwiY3VycmVudCIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIiLCJfcmVmMiRnZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwibmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJtZXRob2ROYW1lIiwiX3JlZjIkcmVuZGVyQ291bnRQcm9wIiwicmVuZGVyQ291bnRQcm9wIiwidW5kZWZpbmVkIiwiX3JlZjIkc2hvdWxkSGFuZGxlU3RhIiwiX3JlZjIkc3RvcmVLZXkiLCJzdG9yZUtleSIsIl9yZWYyJGZvcndhcmRSZWYiLCJ3aXRoUmVmIiwiZm9yd2FyZFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsImRpc3BsYXlOYW1lIiwic2VsZWN0b3JGYWN0b3J5T3B0aW9ucyIsInB1cmUiLCJ1c2VQdXJlT25seU1lbW8iLCJDb25uZWN0RnVuY3Rpb24iLCJwcm9wcyIsIl91c2VNZW1vIiwicmVhY3RSZWR1eEZvcndhcmRlZFJlZiIsInByb3BzQ29udGV4dCIsIkNvbnRleHRUb1VzZSIsIkNvbnN1bWVyIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJ1c2VDb250ZXh0IiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInVzZVJlZHVjZXIiLCJwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0IiwidXNlUmVmIiwicmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50IiwicmVmIiwiQ29ubmVjdCIsImZvcndhcmRlZCIsImlzIiwieCIsInkiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0Q29uc3RhbnQiLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiYWN0aW9uQ3JlYXRvcnMiLCJFcnJvciIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJtYXBTdGF0ZVRvUHJvcHMiLCJkZWZhdWx0TWVyZ2VQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwibWVyZ2VQcm9wcyIsIm1lcmdlZFByb3BzIiwiYXJlTWVyZ2VkUHJvcHNFcXVhbCIsImhhc1J1bk9uY2UiLCJuZXh0TWVyZ2VkUHJvcHMiLCJ3cmFwTWVyZ2VQcm9wc0Z1bmMiLCJpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwicHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJhcmVTdGF0ZXNFcXVhbCIsImFyZU93blByb3BzRXF1YWwiLCJhcmVTdGF0ZVByb3BzRXF1YWwiLCJoYXNSdW5BdExlYXN0T25jZSIsIm5leHRTdGF0ZSIsIm5leHRPd25Qcm9wcyIsIm5leHRTdGF0ZVByb3BzIiwic3RhdGVQcm9wc0NoYW5nZWQiLCJwcm9wc0NoYW5nZWQiLCJzdGF0ZUNoYW5nZWQiLCJoYW5kbGVTdWJzZXF1ZW50Q2FsbHMiLCJmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiaW5pdE1hcFN0YXRlVG9Qcm9wcyIsImluaXRNYXBEaXNwYXRjaFRvUHJvcHMiLCJpbml0TWVyZ2VQcm9wcyIsIm1hdGNoIiwiZmFjdG9yaWVzIiwicmVzdWx0Iiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMiLCJfcmVmMyRwdXJlIiwiX3JlZjMkYXJlU3RhdGVzRXF1YWwiLCJfcmVmMyRhcmVPd25Qcm9wc0VxdWEiLCJfcmVmMyRhcmVTdGF0ZVByb3BzRXEiLCJfcmVmMyRhcmVNZXJnZWRQcm9wc0UiLCJleHRyYU9wdGlvbnMiLCJuZXdCYXRjaCIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiTUFSS19BU19SRUFEIiwiU0VUX1RZUEVfRklMVEVSIiwiRkVUQ0hfTk9USUZJQ0FUSU9OU19TVUNDRVNTIiwiU0VUX0xPQURJTkdfU1RBVEUiLCJtYXJrQXNBcmVhZCIsInNldExvYWRpbmdTdGF0ZSIsImxvYWRpbmciLCJkZWZhdWx0RXF1YWxpdHlDaGVjayIsImFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsIiwiZXF1YWxpdHlDaGVjayIsImdldERlcGVuZGVuY2llcyIsImlzQXJyYXkiLCJldmVyeSIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsIm1hcCIsImdldFVucmVhZE5vdGlmaWNhdGlvbnNCeVR5cGUiLCJtZW1vaXplIiwibWVtb2l6ZU9wdGlvbnMiLCJfbGVuMiIsIl9rZXkyIiwicmVjb21wdXRhdGlvbnMiLCJyZXN1bHRGdW5jIiwibWVtb2l6ZWRSZXN1bHRGdW5jIiwiY29uY2F0Iiwic2VsZWN0b3IiLCJwYXJhbXMiLCJyZXNldFJlY29tcHV0YXRpb25zIiwiY3JlYXRlU2VsZWN0b3JDcmVhdG9yIiwiZnVuYyIsImxhc3RBcmdzIiwibGFzdFJlc3VsdCIsImNyZWF0ZVNlbGVjdG9yIiwibm90aWZpY2F0aW9ucyIsIm1lc3NhZ2VzIiwidmFsdWVTZXEiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIl9vYmplY3RTcHJlYWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsImZyb20iLCJfaXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiVVBQRVJDQVNFX1JFIiwiVVBQRVJDQVNFX1JFX1RPX0tFQkFCIiwidG9Mb3dlckNhc2UiLCJpc1VuaXRsZXNzTnVtYmVyIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkQ29sdW1uIiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJwcmVmaXhlcyIsInByb3AiLCJwcmVmaXgiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInByZWZpeEtleSIsInN0cmluZ2lmeVZhbHVlIiwic3RyaW5naWZ5QW5kSW1wb3J0YW50aWZ5VmFsdWUiLCJpbXBvcnRhbnRpZnkiLCJoYXNoU3RyaW5nIiwic3RyaW5nIiwic2xpY2UiLCJNQVBfRVhJU1RTIiwiTWFwIiwiT3JkZXJlZEVsZW1lbnRzIiwiZWxlbWVudHMiLCJrZXlPcmRlciIsInNldCIsInNob3VsZFJlb3JkZXIiLCJzcGxpY2UiLCJuZXN0ZWQiLCJfbmVzdGVkIiwiaGFzIiwiYWRkU3R5bGVUeXBlIiwic3R5bGVUeXBlIiwiX3RoaXMiLCJ1bndyYXBFeHBvcnRzIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwiY2FwaXRhbGl6ZVN0cmluZ18xIiwic3RyIiwicHJlZml4UHJvcGVydHlfMSIsInByZWZpeFByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsInN0eWxlIiwibmV3U3R5bGUiLCJyZXF1aXJlZFByZWZpeGVzIiwiY2FwaXRhbGl6ZWRQcm9wZXJ0eSIsIl9jYXBpdGFsaXplU3RyaW5nMiIsInN0eWxlUHJvcGVydHkiLCJqIiwicHJlZml4VmFsdWVfMSIsInBsdWdpbnMiLCJtZXRhRGF0YSIsImxlbiIsInByb2Nlc3NlZFZhbHVlIiwiYWRkTmV3VmFsdWVzT25seV8xIiwiYWRkSWZOZXciLCJsaXN0IiwidmFsdWVzIiwiaXNPYmplY3RfMSIsImNyZWF0ZVByZWZpeGVyIiwicHJlZml4TWFwIiwiX2lzT2JqZWN0MiIsImNvbWJpbmVkVmFsdWUiLCJfcHJlZml4VmFsdWUyIiwiX2FkZE5ld1ZhbHVlc09ubHkyIiwiX3Byb2Nlc3NlZFZhbHVlIiwiX3ByZWZpeFByb3BlcnR5MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJiYWNrZ3JvdW5kQ2xpcCIsImlzUHJlZml4ZWRWYWx1ZV8xIiwicmVnZXgiLCJ0ZXN0IiwiY2FsYyIsIl9pc1ByZWZpeGVkVmFsdWUyIiwicmVwbGFjZSIsImNyb3NzRmFkZSIsImN1cnNvciIsImdyYWIiLCJncmFiYmluZyIsImZsZXhib3hJRSIsImFsdGVybmF0aXZlUHJvcHMiLCJhbHRlcm5hdGl2ZVZhbHVlcyIsImZsZXhTaG9ydGhhbmRNYXBwaW5ncyIsIm1zRmxleCIsImZsZXhWYWx1ZXMiLCJhbGlnbkNvbnRlbnQiLCJhbGlnblNlbGYiLCJhbGlnbkl0ZW1zIiwianVzdGlmeUNvbnRlbnQiLCJmbGV4QmFzaXMiLCJhdXRvIiwiaW5oZXJpdCIsImluaXRpYWwiLCJub25lIiwidW5zZXQiLCJmbGV4Ym94T2xkIiwiV2Via2l0Qm94T3JpZW50IiwiV2Via2l0Qm94RGlyZWN0aW9uIiwid3JhcCIsImZsZXhXcmFwIiwiZ3JhZGllbnQiLCJncmFkIiwiZ3JpZCIsIl9zbGljZWRUb0FycmF5IiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJkb25lIiwiZXJyIiwic2xpY2VJdGVyYXRvciIsImlzU2ltcGxlUG9zaXRpb25WYWx1ZSIsImlzTmFOIiwiZGlzcGxheVZhbHVlcyIsInByb3BlcnR5Q29udmVydGVycyIsInByb3BlcnR5Q29udmVydGVyIiwiYWxpZ25tZW50VmFsdWVzIiwibXNHcmlkUm93QWxpZ24iLCJtc0dyaWRDb2x1bW4iLCJfdmFsdWUkc3BsaXQkbWFwIiwicG9zaXRpb24iLCJfdmFsdWUkc3BsaXQkbWFwMiIsInN0YXJ0IiwiZW5kIiwiZ3JpZENvbHVtblN0YXJ0IiwiZ3JpZENvbHVtbkVuZCIsIm1zR3JpZENvbHVtblNwYW4iLCJtc0dyaWRSb3ciLCJfdmFsdWUkc3BsaXQkbWFwMyIsIl92YWx1ZSRzcGxpdCRtYXA0IiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZFJvd0VuZCIsIm1zR3JpZFJvd1NwYW4iLCJncmlkVGVtcGxhdGVDb2x1bW5zIiwibXNHcmlkQ29sdW1ucyIsImdyaWRUZW1wbGF0ZVJvd3MiLCJtc0dyaWRSb3dzIiwianVzdGlmeVNlbGYiLCJtc0dyaWRDb2x1bW5BbGlnbiIsImltYWdlU2V0IiwibG9naWNhbCIsImFsdGVybmF0aXZlUHJvcExpc3QiLCJtYXJnaW5CbG9ja1N0YXJ0IiwibWFyZ2luQmxvY2tFbmQiLCJtYXJnaW5JbmxpbmVTdGFydCIsIm1hcmdpbklubGluZUVuZCIsInBhZGRpbmdCbG9ja1N0YXJ0IiwicGFkZGluZ0Jsb2NrRW5kIiwicGFkZGluZ0lubGluZVN0YXJ0IiwicGFkZGluZ0lubGluZUVuZCIsImJvcmRlckJsb2NrU3RhcnQiLCJib3JkZXJCbG9ja1N0YXJ0Q29sb3IiLCJib3JkZXJCbG9ja1N0YXJ0U3R5bGUiLCJib3JkZXJCbG9ja1N0YXJ0V2lkdGgiLCJib3JkZXJCbG9ja0VuZCIsImJvcmRlckJsb2NrRW5kQ29sb3IiLCJib3JkZXJCbG9ja0VuZFN0eWxlIiwiYm9yZGVyQmxvY2tFbmRXaWR0aCIsImJvcmRlcklubGluZVN0YXJ0IiwiYm9yZGVySW5saW5lU3RhcnRDb2xvciIsImJvcmRlcklubGluZVN0YXJ0U3R5bGUiLCJib3JkZXJJbmxpbmVTdGFydFdpZHRoIiwiYm9yZGVySW5saW5lRW5kIiwiYm9yZGVySW5saW5lRW5kQ29sb3IiLCJib3JkZXJJbmxpbmVFbmRTdHlsZSIsImJvcmRlcklubGluZUVuZFdpZHRoIiwic2l6aW5nIiwicHJvcGVydGllcyIsIm1heEhlaWdodCIsIm1heFdpZHRoIiwid2lkdGgiLCJoZWlnaHQiLCJjb2x1bW5XaWR0aCIsIm1pbldpZHRoIiwibWluSGVpZ2h0IiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImNhY2hlIiwidG9IeXBoZW5Mb3dlciIsIm4iLCJfaHlwaGVuYXRlU3R5bGVOYW1lIiwiZnJlZXplIiwiaE5hbWUiLCJoeXBoZW5hdGVQcm9wZXJ0eV8xIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZTIiLCJ3IiwibSIsIm1zIiwid20iLCJ3bXMiLCJ3bW1zIiwicHJlZml4QWxsIiwicHJvcGVydHlQcmVmaXhNYXAiLCJvdXRwdXRWYWx1ZSIsIm11bHRpcGxlVmFsdWVzIiwic2luZ2xlVmFsdWUiLCJkYXNoQ2FzZVByb3BlcnR5IiwiX2h5cGhlbmF0ZVByb3BlcnR5MiIsInBMZW4iLCJ1bnNoaWZ0IiwicHJlZml4TWFwcGluZyIsInByZWZpeFZhbHVlIiwid2Via2l0T3V0cHV0IiwidmFsIiwibW96T3V0cHV0IiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIldlYmtpdFRyYW5zaXRpb24iLCJXZWJraXRUcmFuc2l0aW9uUHJvcGVydHkiLCJNb3pUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvblByb3BlcnR5IiwiV2Via2l0IiwiTW96IiwiZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnMiLCJiYXNlU2VsZWN0b3IiLCJnZW5lcmF0ZVN1YnRyZWVTdHlsZXMiLCJnZW5lcmF0ZWQiLCJnZW5lcmF0ZUNTUyIsInN0eWxlVHlwZXMiLCJzZWxlY3RvckhhbmRsZXJzIiwic3RyaW5nSGFuZGxlcnMiLCJ1c2VJbXBvcnRhbnQiLCJtZXJnZWQiLCJwbGFpbkRlY2xhcmF0aW9ucyIsImdlbmVyYXRlZFN0eWxlcyIsInNvbWUiLCJoYW5kbGVyIiwibmV3U2VsZWN0b3IiLCJjb25zb2xlIiwid2FybiIsImdlbmVyYXRlZFJ1bGVzZXQiLCJnZW5lcmF0ZUNTU1J1bGVzZXQiLCJ0cmFuc2Zvcm1SdWxlIiwidHJhbnNmb3JtVmFsdWUiLCJhcnJheVRvT2JqZWN0S2V5c1JlZHVjZXIiLCJhY2MiLCJkZWNsYXJhdGlvbnMiLCJzdHJpbmdIYW5kbGVyS2V5cyIsInJ1blN0cmluZ0hhbmRsZXJzIiwib3JpZ2luYWxFbGVtZW50cyIsImNyZWF0ZSIsInByZWZpeGVkRWxlbWVudHMiLCJlbGVtZW50TmFtZXMiLCJvcmlnaW5hbFN0eWxlIiwib3JpZ2luYWxJbmRleCIsInJ1bGVzIiwic3R5bGVUYWciLCJmb250RmFtaWx5IiwibmFtZU1hcCIsInYiLCJpbmplY3RTdHlsZU9uY2UiLCJzcmMiLCJhbmltYXRpb25OYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsImZpbmFsVmFsIiwidmFsVmFsIiwidmFsS2V5IiwiaW5qZWN0R2VuZXJhdGVkQ1NTT25jZSIsImFscmVhZHlJbmplY3RlZCIsImluamVjdGlvbkJ1ZmZlciIsImlzQnVmZmVyaW5nIiwiZ2VuZXJhdGVkQ1NTIiwiX2luamVjdGlvbkJ1ZmZlciIsImZsdXNoVG9TdHlsZVRhZyIsImRlZmluaXRpb25zIiwicmVzZXRJbmplY3RlZFN0eWxlIiwiZmx1c2hUb0FycmF5IiwicmV0IiwiY3NzUnVsZXMiLCJxdWVyeVNlbGVjdG9yIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJzaGVldCIsInN0eWxlU2hlZXQiLCJpbnNlcnRSdWxlIiwibnVtUnVsZXMiLCJydWxlIiwiaW5uZXJUZXh0IiwiaW5qZWN0U3R5bGVUYWciLCJhZGRSZW5kZXJlZENsYXNzTmFtZXMiLCJjbGFzc05hbWVzIiwiY2xhc3NOYW1lIiwicHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMiLCJzdHlsZURlZmluaXRpb25zIiwiY2xhc3NOYW1lQml0cyIsImRlZmluaXRpb25CaXRzIiwiZGVmIiwiX25hbWUiLCJfZGVmaW5pdGlvbiIsImluamVjdEFuZEdldENsYXNzTmFtZSIsInVubWluaWZpZWRIYXNoRm4iLCJoYXNoRm4iLCJTdHlsZVNoZWV0Iiwic2hlZXREZWZpbml0aW9uIiwibWFwcGVkU2hlZXREZWZpbml0aW9uIiwic3RyaW5nVmFsIiwicmVoeWRyYXRlIiwicmVuZGVyZWRDbGFzc05hbWVzIiwiU3R5bGVTaGVldFNlcnZlciIsInJlbmRlclN0YXRpYyIsInJlbmRlckZ1bmMiLCJzdGFydEJ1ZmZlcmluZyIsImh0bWwiLCJjc3MiLCJjb250ZW50IiwiQXBocm9kaXRlIiwibWFrZUV4cG9ydHMiLCJleHRlbmQiLCJleHRlbnNpb25zIiwiZXh0ZW5zaW9uU2VsZWN0b3JIYW5kbGVycyIsImV4dGVuc2lvbiIsInNlbGVjdG9ySGFuZGxlciIsIlN0eWxlU2hlZXRUZXN0VXRpbHMiLCJtaW5pZnkiLCJzaG91bGRNaW5pZnkiLCJyZXNldCIsIk5vdGlmaWNhdGlvbkl0ZW0iLCJSZWFjdCIsIm1hcmtBc1JlYWQiLCJpZCIsInR5cGVTdHlsZSIsInN0eWxlcyIsInVyZ2VudCIsIm5vTm90aWZpY2F0aW9ucyIsImRhdGEtbm90aWZpY2F0aW9uLXR5cGUiLCJvbkNsaWNrIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJkZWZhdWx0UHJvcHMiLCJOYU4iLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJfX2h0bWwiLCJzY3JlZW5TaXplIiwibGlzdEl0ZW1TbWFsbCIsImxpc3RTdHlsZSIsImJvcmRlckJvdHRvbSIsInBhZGRpbmciLCJmb250U2l6ZSIsImNvbG9yIiwiTm90aWZpY2F0aW9ucyIsImRpc3BsYXlEcmF3ZXIiLCJsaXN0Tm90aWZpY2F0aW9ucyIsImhhbmRsZURpc3BsYXlEcmF3ZXIiLCJoYW5kbGVIaWRlRHJhd2VyIiwibWFya05vdGlmaWNhdGlvbkFzUmVhZCIsInNldE5vdGlmaWNhdGlvbkZpbHRlciIsIm1lbnVQU3R5bGUiLCJtZW51SXRlbVBOb1Nob3ciLCJtZW51SXRlbVBTaG93IiwibWVudUl0ZW0iLCJiYWNrZ3JvdW5kIiwiYm9yZGVyIiwicmlnaHQiLCJhcmlhLWxhYmVsIiwiY2xvc2VJY29uIiwiYWx0Iiwibm90aWZpY2F0aW9uc0J1dHRvbkltYWdlIiwibm90aWZpY2F0aW9uc1AiLCJmaWx0ZXJCdXR0b24iLCJub3RpZmljYXRpb25zVUwiLCJjb3VudCIsIm5vdGlmaWNhdGlvbiIsInRvSlMiLCJmZXRjaE5vdGlmaWNhdGlvbnMiLCJib3JkZXJLZXlmcmFtZXMiLCJmbG9hdCIsImJhY2tncm91bmRDb2xvciIsInRvIiwidHJhbnNmb3JtIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJtYXJnaW5SaWdodCIsImRpc3BsYXkiLCJtYXJnaW5Cb3R0b20iLCJhbmltYXRpb25GaWxsTW9kZSIsIm1hcmdpbiIsIm1hcmdpblRvcCIsIk5vdGlmaWNhdGlvbnNDb250YWluZXIiLCJDb21wb25lbnQiLCJjb25uZWN0IiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsInNldE5vdGlmaWNhdGlvbnMiLCJMT0dJTiIsIkxPR09VVCIsIkRJU1BMQVlfTk9USUZJQ0FUSU9OX0RSQVdFUiIsIkhJREVfTk9USUZJQ0FUSU9OX0RSQVdFUiIsIkxPR0lOX1NVQ0NFU1MiLCJMT0dJTl9GQUlMVVJFIiwibG9nb3V0IiwidXNlciIsImVtYWlsIiwicGFzc3dvcmQiLCJpc0xvZ2dlZEluIiwibG9nT3V0IiwiSGVhZGVyIiwiaGVhZGVyIiwiaG9sYmVydG9uX2xvZ28iLCJoZWFkZXJJbWciLCJsb2dvdXRTZWN0aW9uIiwibG9nb3V0U2VjdGlvblNwYW4iLCJwYWRkaW5nUmlnaHQiLCJmb250U3R5bGUiLCJjb250ZXh0VHlwZSIsIkFwcENvbnRleHQiLCJ1aSIsIkJvZHlTZWN0aW9uIiwidGl0bGUiLCJib2R5U2VjdGlvbiIsImJvZHlTZWN0aW9uSDIiLCJib3hTaXppbmciLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdCb3R0b20iLCJCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20iLCJib2R5U2VjdGlvbldpdGhNYXJnaW4iLCJMb2dpbiIsImVuYWJsZVN1Ym1pdCIsImhhbmRsZUxvZ2luU3VibWl0IiwiaGFuZGxlQ2hhbmdlRW1haWwiLCJoYW5kbGVDaGFuZ2VQYXNzd29yZCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJsb2dJbiIsInNldFN0YXRlIiwibG9naW4iLCJvblN1Ym1pdCIsImh0bWxGb3IiLCJsb2dpbklucHV0Iiwib25DaGFuZ2UiLCJkaXNhYmxlZCIsIm1hcmdpbkxlZnQiLCJTRUxFQ1RfQ09VUlNFIiwiVU5TRUxFQ1RfQ09VUlNFIiwiRkVUQ0hfQ09VUlNFX1NVQ0NFU1MiLCJyb3dTdHlsZXMiLCJoZWFkZXJSb3dTdHlsZXMiLCJDb3Vyc2VMaXN0Um93IiwiZWxlbWVudCIsImlzSGVhZGVyU3R5bGUiLCJpc0hlYWRlciIsInRleHRGaXJzdENlbGwiLCJ0ZXh0U2Vjb25kQ2VsbCIsImlzQ2hlY2tlZCIsIm9uQ2hhbmdlUm93IiwidGFibGVJdGVtU3R5bGUiLCJDb3Vyc2VMaXN0VGgiLCJDb3Vyc2VMaXN0VGQiLCJyb3dDaGVja2VkIiwiY29sU3BhbiIsIkNvdXJzZUxpc3RUaFNwYW4yIiwiY3NzVmFycyIsImJvcmRlclRvcCIsInRleHRBbGlnbiIsIkNvdXJzZUxpc3QiLCJmZXRjaENvdXJzZXMiLCJjaGVja2VkIiwic2VsZWN0Q291cnNlIiwidW5TZWxlY3RDb3Vyc2UiLCJsaXN0Q291cnNlcyIsImNvdXJzZSIsImNyZWRpdCIsImlzU2VsZWN0ZWQiLCJib3JkZXJDb2xsYXBzZSIsImNvdXJzZXMiLCJnZXRMaXN0Q291cnNlcyIsInNldENvdXJzZXMiLCJGb290ZXIiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJocmVmIiwiYm9keSIsIkFwcCIsImhhbmRsZUtleUNvbWJpbmF0aW9uIiwiY3RybEtleSIsImFsZXJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwbGF5Tm90aWZpY2F0aW9uRHJhd2VyIiwiaGlkZU5vdGlmaWNhdGlvbkRyYXdlciIsImNvbnRhaW5lciIsImFwcCIsImFwcEJvZHkiLCJmb290ZXIiLCJib3R0b20iLCJTSVpFIiwiTUFTSyIsIk5PVF9TRVQiLCJTZXRSZWYiLCJPd25lcklEIiwiZW5zdXJlU2l6ZSIsInNpemUiLCJfX2l0ZXJhdGUiLCJyZXR1cm5UcnVlIiwid3JhcEluZGV4IiwidWludDMySW5kZXgiLCJ3aG9sZVNsaWNlIiwiYmVnaW4iLCJpc05lZyIsInJlc29sdmVCZWdpbiIsInJlc29sdmVJbmRleCIsInJlc29sdmVFbmQiLCJkZWZhdWx0SW5kZXgiLCJJbmZpbml0eSIsIm1heCIsIm1pbiIsIklTX0NPTExFQ1RJT05fU1lNQk9MIiwiaXNDb2xsZWN0aW9uIiwibWF5YmVDb2xsZWN0aW9uIiwiSVNfS0VZRURfU1lNQk9MIiwiaXNLZXllZCIsIm1heWJlS2V5ZWQiLCJJU19JTkRFWEVEX1NZTUJPTCIsImlzSW5kZXhlZCIsIm1heWJlSW5kZXhlZCIsImlzQXNzb2NpYXRpdmUiLCJtYXliZUFzc29jaWF0aXZlIiwiQ29sbGVjdGlvbiIsIlNlcSIsIktleWVkQ29sbGVjdGlvbiIsIktleWVkU2VxIiwiX19wcm90b19fIiwiSW5kZXhlZENvbGxlY3Rpb24iLCJJbmRleGVkU2VxIiwiU2V0Q29sbGVjdGlvbiIsIlNldFNlcSIsIktleWVkIiwiSW5kZXhlZCIsIlNldCIsIklTX1NFUV9TWU1CT0wiLCJpc1NlcSIsIm1heWJlU2VxIiwiSVNfUkVDT1JEX1NZTUJPTCIsImlzUmVjb3JkIiwibWF5YmVSZWNvcmQiLCJpc0ltbXV0YWJsZSIsIm1heWJlSW1tdXRhYmxlIiwiSVNfT1JERVJFRF9TWU1CT0wiLCJpc09yZGVyZWQiLCJtYXliZU9yZGVyZWQiLCJSRUFMX0lURVJBVE9SX1NZTUJPTCIsIklURVJBVE9SX1NZTUJPTCIsIkl0ZXJhdG9yIiwiaXRlcmF0b3JWYWx1ZSIsImsiLCJpdGVyYXRvclJlc3VsdCIsIml0ZXJhdG9yRG9uZSIsImhhc0l0ZXJhdG9yIiwibWF5YmVJdGVyYWJsZSIsImdldEl0ZXJhdG9yRm4iLCJpc0l0ZXJhdG9yIiwibWF5YmVJdGVyYXRvciIsImdldEl0ZXJhdG9yIiwiaXRlcmFibGUiLCJpdGVyYXRvckZuIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsImluc3BlY3QiLCJ0b1NvdXJjZSIsImlzQXJyYXlMaWtlIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiQ29sbGVjdGlvbiQkMSIsImVtcHR5U2VxdWVuY2UiLCJ0b1NlcSIsInNlcSIsIm1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSIsIk9iamVjdFNlcSIsInNlcUZyb21WYWx1ZSIsIl9fdG9TdHJpbmciLCJjYWNoZVJlc3VsdCIsIl9jYWNoZSIsIl9faXRlcmF0ZVVuY2FjaGVkIiwiZW50cnlTZXEiLCJ0b0FycmF5IiwicmV2ZXJzZSIsImVudHJ5IiwiX19pdGVyYXRvciIsIl9faXRlcmF0b3JVbmNhY2hlZCIsInRvS2V5ZWRTZXEiLCJmcm9tRW50cnlTZXEiLCJrZXllZFNlcUZyb21WYWx1ZSIsInRvSW5kZXhlZFNlcSIsImluZGV4ZWRTZXFGcm9tVmFsdWUiLCJvZiIsInRvU2V0U2VxIiwiQXJyYXlTZXEiLCJhcnJheSIsIl9hcnJheSIsIm5vdFNldFZhbHVlIiwiaWkiLCJfb2JqZWN0IiwiX2tleXMiLCJFTVBUWV9TRVEiLCJDb2xsZWN0aW9uU2VxIiwiY29sbGVjdGlvbiIsIl9jb2xsZWN0aW9uIiwiaXRlcmF0aW9ucyIsInN0ZXAiLCJJU19NQVBfU1lNQk9MIiwiaXNNYXAiLCJtYXliZU1hcCIsImlzT3JkZXJlZE1hcCIsIm1heWJlT3JkZXJlZE1hcCIsImlzVmFsdWVPYmplY3QiLCJtYXliZVZhbHVlIiwiZXF1YWxzIiwiaGFzaENvZGUiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJ2YWx1ZU9mIiwiaW11bCIsImMiLCJkIiwic21pIiwiaTMyIiwiZGVmYXVsdFZhbHVlT2YiLCJoYXNoIiwibyIsImhhc2hOdW1iZXIiLCJTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOIiwiaGFzaGVkIiwic3RyaW5nSGFzaENhY2hlIiwiU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSIsIlNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFIiwidXNpbmdXZWFrTWFwIiwid2Vha01hcCIsIlVJRF9IQVNIX0tFWSIsImNhbkRlZmluZVByb3BlcnR5IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJub2RlVHlwZSIsInVuaXF1ZUlEIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0SUVOb2RlSGFzaCIsIm9iakhhc2hVSUQiLCJpc0V4dGVuc2libGUiLCJoYXNoSlNPYmoiLCJjaGFyQ29kZUF0IiwiV2Vha01hcCIsIlRvS2V5ZWRTZXF1ZW5jZSIsIktleWVkU2VxJCQxIiwiaW5kZXhlZCIsInVzZUtleXMiLCJfaXRlciIsIl91c2VLZXlzIiwidGhpcyQxIiwicmV2ZXJzZWRTZXF1ZW5jZSIsInJldmVyc2VGYWN0b3J5IiwibWFwcGVyIiwibWFwcGVkU2VxdWVuY2UiLCJtYXBGYWN0b3J5IiwiVG9JbmRleGVkU2VxdWVuY2UiLCJJbmRleGVkU2VxJCQxIiwiaW5jbHVkZXMiLCJUb1NldFNlcXVlbmNlIiwiU2V0U2VxJCQxIiwiRnJvbUVudHJpZXNTZXF1ZW5jZSIsImVudHJpZXMiLCJ2YWxpZGF0ZUVudHJ5IiwiaW5kZXhlZENvbGxlY3Rpb24iLCJmbGlwRmFjdG9yeSIsImZsaXBTZXF1ZW5jZSIsIm1ha2VTZXF1ZW5jZSIsImZsaXAiLCJjYWNoZVJlc3VsdFRocm91Z2giLCJmaWx0ZXJGYWN0b3J5IiwicHJlZGljYXRlIiwiZmlsdGVyU2VxdWVuY2UiLCJzbGljZUZhY3RvcnkiLCJvcmlnaW5hbFNpemUiLCJyZXNvbHZlZEJlZ2luIiwicmVzb2x2ZWRFbmQiLCJzbGljZVNpemUiLCJyZXNvbHZlZFNpemUiLCJzbGljZVNlcSIsInNraXBwZWQiLCJpc1NraXBwaW5nIiwic2tpcFdoaWxlRmFjdG9yeSIsInNraXBTZXF1ZW5jZSIsInNraXBwaW5nIiwiY29uY2F0RmFjdG9yeSIsImlzS2V5ZWRDb2xsZWN0aW9uIiwiaXRlcnMiLCJzaW5nbGV0b24iLCJjb25jYXRTZXEiLCJmbGF0dGVuIiwic3VtIiwiZmxhdHRlbkZhY3RvcnkiLCJkZXB0aCIsImZsYXRTZXF1ZW5jZSIsInN0b3BwZWQiLCJmbGF0RGVlcCIsImN1cnJlbnREZXB0aCIsInN0YWNrIiwic29ydEZhY3RvcnkiLCJjb21wYXJhdG9yIiwiZGVmYXVsdENvbXBhcmF0b3IiLCJzb3J0IiwibWF4RmFjdG9yeSIsIm1heENvbXBhcmUiLCJjb21wIiwiemlwV2l0aEZhY3RvcnkiLCJrZXlJdGVyIiwiemlwcGVyIiwiemlwQWxsIiwiemlwU2VxdWVuY2UiLCJzaXplcyIsIml0ZXJhdG9ycyIsImlzRG9uZSIsInN0ZXBzIiwicyIsInJlaWZ5IiwiY29sbGVjdGlvbkNsYXNzIiwiYXJyQ29weSIsIm9mZnNldCIsIm5ld0FyciIsImludmFyaWFudCIsImNvbmRpdGlvbiIsImFzc2VydE5vdEluZmluaXRlIiwiY29lcmNlS2V5UGF0aCIsImtleVBhdGgiLCJpc1BsYWluT2JqIiwiaXNEYXRhU3RydWN0dXJlIiwicXVvdGVTdHJpbmciLCJfaWdub3JlRXJyb3IiLCJzaGFsbG93Q29weSIsInVwZGF0ZUluIiwidXBkYXRlciIsInVwZGF0ZWRWYWx1ZSIsInVwZGF0ZUluRGVlcGx5IiwiaW5JbW11dGFibGUiLCJleGlzdGluZyIsIndhc05vdFNldCIsImV4aXN0aW5nVmFsdWUiLCJuZXdWYWx1ZSIsIm5leHRFeGlzdGluZyIsIm5leHRVcGRhdGVkIiwicmVtb3ZlIiwiY29sbGVjdGlvbkNvcHkiLCJlbXB0eU1hcCIsInNldEluJDEiLCJzZXRJbiIsImRlbGV0ZUluIiwicmVtb3ZlSW4iLCJ1cGRhdGUiLCJ1cGRhdGUkMSIsInVwZGF0ZUluJDEiLCJtZXJnZSIsIm1lcmdlSW50b0tleWVkV2l0aCIsIm1lcmdlV2l0aCIsIm1lcmdlciIsImNvbGxlY3Rpb25zIiwiY29sbGVjdGlvbiQxIiwiX19vd25lcklEIiwid2l0aE11dGF0aW9ucyIsIm1lcmdlSW50b0NvbGxlY3Rpb24iLCJvbGRWYWwiLCJtZXJnZURlZXBXaXRoU291cmNlcyIsInNvdXJjZXMiLCJtZXJnZVdpdGhTb3VyY2VzIiwiZGVlcE1lcmdlciIsIm9sZFZhbHVlIiwiZGVlcE1lcmdlcldpdGgiLCJtZXJnZUl0ZW0iLCJoYXNWYWwiLCJuZXh0VmFsIiwibWVyZ2VEZWVwJDEiLCJtZXJnZURlZXBXaXRoJDEiLCJtZXJnZUluIiwibWVyZ2VEZWVwSW4iLCJtdXRhYmxlIiwiYXNNdXRhYmxlIiwid2FzQWx0ZXJlZCIsIl9fZW5zdXJlT3duZXIiLCJhc0ltbXV0YWJsZSIsIl9fYWx0ZXJlZCIsIktleWVkQ29sbGVjdGlvbiQkMSIsImtleVZhbHVlcyIsIl9yb290IiwidXBkYXRlTWFwIiwiZGVsZXRlQWxsIiwiX19oYXNoIiwiT3JkZXJlZE1hcCIsInNvcnRCeSIsIk1hcEl0ZXJhdG9yIiwiaXRlcmF0ZSIsIm93bmVySUQiLCJtYWtlTWFwIiwiTWFwUHJvdG90eXBlIiwicmVtb3ZlQWxsIiwibWVyZ2VEZWVwIiwibWVyZ2VEZWVwV2l0aCIsIkFycmF5TWFwTm9kZSIsImtleUhhc2giLCJkaWRDaGFuZ2VTaXplIiwiZGlkQWx0ZXIiLCJyZW1vdmVkIiwiaWR4IiwiZXhpc3RzIiwiTUFYX0FSUkFZX01BUF9TSVpFIiwiVmFsdWVOb2RlIiwiY3JlYXRlTm9kZXMiLCJpc0VkaXRhYmxlIiwibmV3RW50cmllcyIsIkJpdG1hcEluZGV4ZWROb2RlIiwiYml0bWFwIiwibm9kZXMiLCJiaXQiLCJwb3BDb3VudCIsImtleUhhc2hGcmFnIiwibmV3Tm9kZSIsInVwZGF0ZU5vZGUiLCJNQVhfQklUTUFQX0lOREVYRURfU0laRSIsImluY2x1ZGluZyIsImV4cGFuZGVkTm9kZXMiLCJIYXNoQXJyYXlNYXBOb2RlIiwiZXhwYW5kTm9kZXMiLCJpc0xlYWZOb2RlIiwibmV3Qml0bWFwIiwibmV3Tm9kZXMiLCJzZXRBdCIsImNhbkVkaXQiLCJuZXdMZW4iLCJuZXdBcnJheSIsImFmdGVyIiwic3BsaWNlT3V0Iiwic3BsaWNlSW4iLCJuZXdDb3VudCIsIk1JTl9IQVNIX0FSUkFZX01BUF9TSVpFIiwiZXhjbHVkaW5nIiwicGFja2VkSUkiLCJwYWNrZWROb2RlcyIsInBhY2tOb2RlcyIsIkhhc2hDb2xsaXNpb25Ob2RlIiwibWVyZ2VJbnRvTm9kZSIsImtleU1hdGNoIiwibWF4SW5kZXgiLCJFTVBUWV9NQVAiLCJJdGVyYXRvciQkMSIsIl90eXBlIiwiX3JldmVyc2UiLCJfc3RhY2siLCJtYXBJdGVyYXRvckZyYW1lIiwibWFwSXRlcmF0b3JWYWx1ZSIsInN1Yk5vZGUiLCJfX3ByZXYiLCJyb290IiwiaGFzaCQkMSIsIm5ld1Jvb3QiLCJuZXdTaXplIiwiaWR4MSIsImlkeDIiLCJJU19MSVNUX1NZTUJPTCIsImlzTGlzdCIsIm1heWJlTGlzdCIsIkxpc3QiLCJJbmRleGVkQ29sbGVjdGlvbiQkMSIsImVtcHR5IiwiZW1wdHlMaXN0IiwibWFrZUxpc3QiLCJWTm9kZSIsInNldFNpemUiLCJsaXN0Tm9kZUZvciIsIl9vcmlnaW4iLCJzZXRMaXN0Qm91bmRzIiwibmV3VGFpbCIsIl90YWlsIiwiZ2V0VGFpbE9mZnNldCIsIl9jYXBhY2l0eSIsInVwZGF0ZVZOb2RlIiwiX2xldmVsIiwidXBkYXRlTGlzdCIsImluc2VydCIsIm9sZFNpemUiLCJhcmd1bWVudHMkMSIsInNlcXMiLCJhcmd1bWVudCIsIml0ZXJhdGVMaXN0IiwiRE9ORSIsIkxpc3RQcm90b3R5cGUiLCJyZW1vdmVCZWZvcmUiLCJsZXZlbCIsIm9yaWdpbkluZGV4IiwibmV3Q2hpbGQiLCJyZW1vdmluZ0ZpcnN0Iiwib2xkQ2hpbGQiLCJlZGl0YWJsZSIsImVkaXRhYmxlVk5vZGUiLCJyZW1vdmVBZnRlciIsInNpemVJbmRleCIsIkVNUFRZX0xJU1QiLCJsZWZ0IiwidGFpbFBvcyIsInRhaWwiLCJpdGVyYXRlTm9kZU9yTGVhZiIsIml0ZXJhdGVMZWFmIiwiaXRlcmF0ZU5vZGUiLCJvcmlnaW4iLCJjYXBhY2l0eSIsIm5vZGVIYXMiLCJsb3dlck5vZGUiLCJuZXdMb3dlck5vZGUiLCJyYXdJbmRleCIsIm93bmVyIiwib2xkT3JpZ2luIiwib2xkQ2FwYWNpdHkiLCJuZXdPcmlnaW4iLCJuZXdDYXBhY2l0eSIsIm5ld0xldmVsIiwib2Zmc2V0U2hpZnQiLCJvbGRUYWlsT2Zmc2V0IiwibmV3VGFpbE9mZnNldCIsIm9sZFRhaWwiLCJiZWdpbkluZGV4IiwiRU1QVFlfT1JERVJFRF9NQVAiLCJNYXAkJDEiLCJlbXB0eU9yZGVyZWRNYXAiLCJfbWFwIiwiX2xpc3QiLCJ1cGRhdGVPcmRlcmVkTWFwIiwibmV3TWFwIiwibmV3TGlzdCIsIm1ha2VPcmRlcmVkTWFwIiwib21hcCIsInRvTWFwIiwiSVNfU1RBQ0tfU1lNQk9MIiwiaXNTdGFjayIsIm1heWJlU3RhY2siLCJTdGFjayIsImVtcHR5U3RhY2siLCJwdXNoQWxsIiwiX2hlYWQiLCJwZWVrIiwibWFrZVN0YWNrIiwiRU1QVFlfU1RBQ0siLCJTdGFja1Byb3RvdHlwZSIsInVuc2hpZnRBbGwiLCJJU19TRVRfU1lNQk9MIiwiaXNTZXQiLCJtYXliZVNldCIsImlzT3JkZXJlZFNldCIsIm1heWJlT3JkZXJlZFNldCIsImRlZXBFcXVhbCIsIm5vdEFzc29jaWF0aXZlIiwiZmxpcHBlZCIsIl8iLCJhbGxFcXVhbCIsImJTaXplIiwibWl4aW4iLCJjdG9yIiwibWV0aG9kcyIsImtleUNvcGllciIsInJlc3VsdCQxIiwiU2V0Q29sbGVjdGlvbiQkMSIsImVtcHR5U2V0IiwiYWRkIiwiZnJvbUtleXMiLCJrZXlTZXEiLCJpbnRlcnNlY3QiLCJzZXRzIiwiU2V0UHJvdG90eXBlIiwidW5pb24iLCJ1cGRhdGVTZXQiLCJyZW1vdmVzIiwiYWRkcyIsIm1hcHBlZCIsInRvUmVtb3ZlIiwic3VidHJhY3QiLCJPcmRlcmVkU2V0IiwiX19tYWtlIiwiX19lbXB0eSIsIkVNUFRZX1NFVCIsIm1ha2VTZXQiLCJFTVBUWV9SQU5HRSIsIlJhbmdlIiwiYWJzIiwiX3N0YXJ0IiwiX2VuZCIsIl9zdGVwIiwiY2VpbCIsInNlYXJjaFZhbHVlIiwicG9zc2libGVJbmRleCIsImZsb29yIiwib2Zmc2V0VmFsdWUiLCJsYXN0SW5kZXhPZiIsIm90aGVyIiwiZ2V0SW4iLCJzZWFyY2hLZXlQYXRoIiwiZ2V0SW4kMSIsInRvT2JqZWN0IiwiaXNJdGVyYWJsZSIsInVzZVR1cGxlcyIsInRvT3JkZXJlZE1hcCIsInRvT3JkZXJlZFNldCIsInRvU2V0IiwidG9TdGFjayIsInRvTGlzdCIsIl9fdG9TdHJpbmdNYXBwZXIiLCJyZXR1cm5WYWx1ZSIsImZpbmQiLCJmaW5kRW50cnkiLCJzaWRlRWZmZWN0Iiwic2VwYXJhdG9yIiwiam9pbmVkIiwiaXNGaXJzdCIsInJlZHVjZXIiLCJpbml0aWFsUmVkdWN0aW9uIiwicmVkdWNlUmlnaHQiLCJub3QiLCJidXRMYXN0IiwiaXNFbXB0eSIsImNvdW50QnkiLCJncm91cGVyIiwiZ3JvdXBzIiwiY291bnRCeUZhY3RvcnkiLCJlbnRyaWVzU2VxdWVuY2UiLCJlbnRyeU1hcHBlciIsImZpbHRlck5vdCIsImZvdW5kIiwiZmluZEtleSIsImZpbmRMYXN0IiwiZmluZExhc3RFbnRyeSIsImZpbmRMYXN0S2V5IiwiZmxhdE1hcCIsImNvZXJjZSIsImZsYXRNYXBGYWN0b3J5Iiwic2VhcmNoS2V5IiwiZ3JvdXBCeSIsImlzS2V5ZWRJdGVyIiwiZ3JvdXBCeUZhY3RvcnkiLCJoYXNJbiIsImlzU3Vic2V0IiwiaXNTdXBlcnNldCIsImtleU9mIiwia2V5TWFwcGVyIiwibGFzdEtleU9mIiwibWF4QnkiLCJuZWciLCJkZWZhdWx0TmVnQ29tcGFyYXRvciIsIm1pbkJ5IiwicmVzdCIsInNraXAiLCJhbW91bnQiLCJza2lwTGFzdCIsInNraXBXaGlsZSIsInNraXBVbnRpbCIsInRha2UiLCJ0YWtlTGFzdCIsInRha2VXaGlsZSIsInRha2VTZXF1ZW5jZSIsIml0ZXJhdGluZyIsInRha2VXaGlsZUZhY3RvcnkiLCJ0YWtlVW50aWwiLCJvcmRlcmVkIiwia2V5ZWQiLCJoIiwibXVybXVySGFzaE9mU2l6ZSIsImhhc2hNZXJnZSIsImhhc2hDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsInRvSlNPTiIsImNoYWluIiwiY29udGFpbnMiLCJtYXBFbnRyaWVzIiwibWFwS2V5cyIsIktleWVkQ29sbGVjdGlvblByb3RvdHlwZSIsImZpbmRJbmRleCIsInJlbW92ZU51bSIsIm51bUFyZ3MiLCJzcGxpY2VkIiwiZmluZExhc3RJbmRleCIsImludGVycG9zZSIsImludGVycG9zZWRTZXF1ZW5jZSIsImludGVycG9zZUZhY3RvcnkiLCJpbnRlcmxlYXZlIiwiemlwcGVkIiwiaW50ZXJsZWF2ZWQiLCJ6aXAiLCJkZWZhdWx0WmlwcGVyIiwiemlwV2l0aCIsIkluZGV4ZWRDb2xsZWN0aW9uUHJvdG90eXBlIiwicmVkdWN0aW9uIiwidXNlRmlyc3QiLCJTZXQkJDEiLCJlbXB0eU9yZGVyZWRTZXQiLCJFTVBUWV9PUkRFUkVEX1NFVCIsIk9yZGVyZWRTZXRQcm90b3R5cGUiLCJtYWtlT3JkZXJlZFNldCIsIlJlY29yZCIsImRlZmF1bHRWYWx1ZXMiLCJoYXNJbml0aWFsaXplZCIsIlJlY29yZFR5cGUiLCJpbmRpY2VzIiwiUmVjb3JkVHlwZVByb3RvdHlwZSIsIl9pbmRpY2VzIiwiX2RlZmF1bHRWYWx1ZXMiLCJwcm9wTmFtZSIsInJlY29yZE5hbWUiLCJzZXRQcm9wIiwiX3ZhbHVlcyIsImwiLCJSZWNvcmRQcm90b3R5cGUiLCJyZWNvcmRTZXEiLCJuZXdWYWx1ZXMiLCJtYWtlUmVjb3JkIiwiZ2V0RGVzY3JpcHRpdmVOYW1lIiwibGlrZVJlY29yZCIsInJlY29yZCIsImZyb21KUyIsImNvbnZlcnRlciIsImZyb21KU1dpdGgiLCJkZWZhdWx0Q29udmVydGVyIiwicGFyZW50VmFsdWUiLCJjb252ZXJ0ZWQiLCJkZXNjcmlwdG9yIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImRlbm9ybWFsaXplSW1tdXRhYmxlIiwic2NoZW1hIiwiaW5wdXQiLCJ1bnZpc2l0Iiwic3RyaW5nS2V5IiwiRW50aXR5U2NoZW1hIiwiZGVmaW5pdGlvbiIsIl9vcHRpb25zIiwiX29wdGlvbnMkaWRBdHRyaWJ1dGUiLCJpZEF0dHJpYnV0ZSIsIl9vcHRpb25zJG1lcmdlU3RyYXRlZyIsIm1lcmdlU3RyYXRlZ3kiLCJlbnRpdHlBIiwiZW50aXR5QiIsIl9vcHRpb25zJHByb2Nlc3NTdHJhdCIsInByb2Nlc3NTdHJhdGVneSIsIl9vcHRpb25zJGZhbGxiYWNrU3RyYSIsImZhbGxiYWNrU3RyYXRlZ3kiLCJfZ2V0SWQiLCJnZXREZWZhdWx0R2V0SWQiLCJfaWRBdHRyaWJ1dGUiLCJfbWVyZ2VTdHJhdGVneSIsIl9wcm9jZXNzU3RyYXRlZ3kiLCJfZmFsbGJhY2tTdHJhdGVneSIsImRlZmluZSIsImVudGl0eVNjaGVtYSIsIl9leHRlbmRzMiIsImdldElkIiwicGFyZW50IiwiZmFsbGJhY2siLCJub3JtYWxpemUiLCJ2aXNpdCIsImFkZEVudGl0eSIsInZpc2l0ZWRFbnRpdGllcyIsImVudGl0eVR5cGUiLCJlbnRpdHkiLCJwcm9jZXNzZWRFbnRpdHkiLCJyZXNvbHZlZFNjaGVtYSIsImRlbm9ybWFsaXplIiwiX3RoaXMyIiwiUG9seW1vcnBoaWNTY2hlbWEiLCJzY2hlbWFBdHRyaWJ1dGUiLCJfc2NoZW1hQXR0cmlidXRlIiwiZ2V0U2NoZW1hQXR0cmlidXRlIiwiaXNTaW5nbGVTY2hlbWEiLCJpbmZlclNjaGVtYSIsImF0dHIiLCJub3JtYWxpemVWYWx1ZSIsIm5vcm1hbGl6ZWRWYWx1ZSIsImRlbm9ybWFsaXplVmFsdWUiLCJzY2hlbWFLZXkiLCJVbmlvblNjaGVtYSIsIl9Qb2x5bW9ycGhpY1NjaGVtYSIsIlZhbHVlc1NjaGVtYSIsIm91dHB1dCIsIl9leHRlbmRzMyIsImVudGl0eU9ySWQiLCJnZXRWYWx1ZXMiLCJ2YWxpZGF0ZVNjaGVtYSIsIkFycmF5U2NoZW1hIiwiX25vcm1hbGl6ZSIsImxvY2FsU2NoZW1hIiwicmVzb2x2ZWRMb2NhbFNjaGVtYSIsIl9kZW5vcm1hbGl6ZSIsIkVudGl0eSIsIk9iamVjdFNjaGVtYSIsImFyZ3MiLCJVbmlvbiIsIlZhbHVlcyIsIm5vcm1hbGl6ZSQxIiwiZW50aXRpZXMiLCJleGlzdGluZ0VudGl0eSIsImFkZEVudGl0aWVzIiwiaW5pdGlhbENvdXJzZVN0YXRlIiwibWVzc2FnZSIsImF1dGhvciIsIm5vdGlmaWNhdGlvbnNEYXRhIiwiaW5pdGlhbE5vdGlmaWNhdGlvblN0YXRlIiwiaW5pdGlhbFVpU3RhdGUiLCJpc05vdGlmaWNhdGlvbkRyYXdlclZpc2libGUiLCJpc1VzZXJMb2dnZWRJbiIsImluaXRpYWxTdGF0ZSIsIm5vcm1hbGl6ZWREYXRhIiwiY291cnNlc05vcm1hbGl6ZXIiLCJub3RpZmljYXRpb25zTm9ybWFsaXplciIsImlzUmVhZCIsImNvbXBvc2VFbmhhbmNlcnMiLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJjcmVhdGVTdG9yZSIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib2JzZXJ2YWJsZSIsIm91dGVyU3Vic2NyaWJlIiwib2JzZXJ2ZVN0YXRlIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiY29tYmluZVJlZHVjZXJzIiwicm9vdFJlZHVjZXIiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiYXBwbHlNaWRkbGV3YXJlIiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZXMiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJnbG9iYWwiLCJnZXRHbG9iYWwiLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwicHJvcElzRW51bWVyYWJsZSIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwiY29tcG9uZW50TmFtZSIsImxvY2F0aW9uIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJudW1iZXIiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsImFhIiwiciIsInUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJiYSIsImYiLCJvbkVycm9yIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwiQyIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiWGEiLCJTYSIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiWWEiLCJFIiwiZm9yIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJjYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsIiQkdHlwZW9mIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiQ2hpbGRyZW4iLCJGYiIsIkhiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJYiIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwiY2hpbGQiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwicmMiLCJldmVudFN5c3RlbUZsYWdzIiwic2MiLCJjb250YWluZXJJbmZvIiwidGMiLCJ1YyIsInZjIiwiRiIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJMYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsIk9jIiwiamQiLCJjb2x1bW5zIiwiZ3JpZEFyZWEiLCJncmlkUm93U3BhbiIsImdyaWRDb2x1bW5TcGFuIiwia2QiLCJsZCIsInRyaW0iLCJtZCIsInNldFByb3BlcnR5IiwibmQiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsInFkIiwicmQiLCJzZCIsInRkIiwidWQiLCJ2ZCIsIm5leHRTaWJsaW5nIiwid2QiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInhkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJCZCIsIkNkIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkciLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJyZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiZGF0ZSIsImRhdGV0aW1lIiwibW9udGgiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwicCIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCI4IiwiOSIsIjEyIiwiMTMiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjciLCIzMiIsIjMzIiwiMzQiLCIzNSIsIjM2IiwiMzciLCIzOCIsIjM5IiwiNDAiLCI0NSIsIjQ2IiwiMTEyIiwiMTEzIiwiMTE0IiwiMTE1IiwiMTE2IiwiMTE3IiwiMTE4IiwiMTE5IiwiMTIwIiwiMTIxIiwiMTIyIiwiMTIzIiwiMTQ0IiwiMTQ1IiwiMjI0IiwicmYiLCJyZXBlYXQiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInVmIiwidmYiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIndmIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInlmIiwiemYiLCJIIiwiSSIsIkFmIiwiSiIsIksiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiTCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsIl9jb250ZXh0IiwiX2N1cnJlbnRWYWx1ZSIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwib2JzZXJ2ZWRCaXRzIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwieGciLCJ5ZyIsInpnIiwieiIsImNhIiwiQWciLCJEIiwidCIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwicmVmcyIsIkZnIiwiSmciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiZW5xdWV1ZVNldFN0YXRlIiwiR2ciLCJIZyIsIklnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJMZyIsIk1nIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsIk9nIiwiUGciLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwibW9kZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiQSIsInEiLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsIk0iLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwiTiIsIk8iLCJQIiwibWgiLCJRIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJSZWFjdEN1cnJlbnRPd25lciIsIlIiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwicmV0cnlUaW1lIiwiamkiLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwibGkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsIlMiLCJ0aSIsInZpIiwid2kiLCJUIiwieGkiLCJVIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJXZWFrU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJpbnN0YW5jZSIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2oiLCJkaiIsIlciLCJYIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsIlkiLCJxaiIsInJqIiwic2oiLCJ0aiIsInVqIiwidmoiLCJ3aiIsInRpbWVvdXRNcyIsInhqIiwieWoiLCJaIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJ0aW1lb3V0IiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJCIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwiX2N0b3IiLCJvYiIsIlhqIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiWmoiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwia2V5UHJlZml4IiwiViIsImVzY2FwZSIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwibWVtbyIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJobWQiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiXSwibWFwcGluZ3MiOiI7d0NBR0EsSUFBSUEsRUFBVSxFQUFRLEtBRWxCQyxFQUFZLEdBR1pDLEVBQWdCLEdBQ2hCQyxFQUFvQkgsRUFBUUksMEJBRWhDLFdBQ0ksR0FBSUYsRUFBY0csT0FDZCxNQUFNSCxFQUFjSSxXQWE1QixTQUFTQyxFQUFLQyxHQUNWLElBQUlDLEdBRUFBLEVBREFSLEVBQVVJLE9BQ0FKLEVBQVVTLE1BRVYsSUFBSUMsR0FFVkgsS0FBT0EsRUFDZlIsRUFBUVMsR0FLWixTQUFTRSxJQUNMQyxLQUFLSixLQUFPLEtBZmhCSyxFQUFPQyxRQUFVUCxFQW9CakJJLEVBQVFJLFVBQVVDLEtBQU8sV0FDckIsSUFDSUosS0FBS0osS0FBS1EsT0FDWixNQUFPQyxHQUNEVixFQUFLVyxRQUlMWCxFQUFLVyxRQUFRRCxJQUtiZixFQUFjaUIsS0FBS0YsR0FDbkJkLEtBRU4sUUFDRVMsS0FBS0osS0FBTyxLQUNaUCxFQUFVQSxFQUFVSSxRQUFVTyxRLDJCQ2xEdEMsU0FBU1osRUFBUVEsR0FDUlksRUFBTWYsUUFDUGdCLElBSUpELEVBQU1BLEVBQU1mLFFB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QUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEZxdkUsRUFBb0JwbEIsRUFBSTRsQixHLEdDWkVSLEVBQW9CLEsiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJhd0FzYXAgcHJvdmlkZXMgZXZlcnl0aGluZyB3ZSBuZWVkIGV4Y2VwdCBleGNlcHRpb24gbWFuYWdlbWVudC5cbnZhciByYXdBc2FwID0gcmVxdWlyZShcIi4vcmF3XCIpO1xuLy8gUmF3VGFza3MgYXJlIHJlY3ljbGVkIHRvIHJlZHVjZSBHQyBjaHVybi5cbnZhciBmcmVlVGFza3MgPSBbXTtcbi8vIFdlIHF1ZXVlIGVycm9ycyB0byBlbnN1cmUgdGhleSBhcmUgdGhyb3duIGluIHJpZ2h0IG9yZGVyIChGSUZPKS5cbi8vIEFycmF5LWFzLXF1ZXVlIGlzIGdvb2QgZW5vdWdoIGhlcmUsIHNpbmNlIHdlIGFyZSBqdXN0IGRlYWxpbmcgd2l0aCBleGNlcHRpb25zLlxudmFyIHBlbmRpbmdFcnJvcnMgPSBbXTtcbnZhciByZXF1ZXN0RXJyb3JUaHJvdyA9IHJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKHRocm93Rmlyc3RFcnJvcik7XG5cbmZ1bmN0aW9uIHRocm93Rmlyc3RFcnJvcigpIHtcbiAgICBpZiAocGVuZGluZ0Vycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgcGVuZGluZ0Vycm9ycy5zaGlmdCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxscyBhIHRhc2sgYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciByZXR1cm5pbmcsIGluIGl0cyBvd24gZXZlbnQsIHdpdGggcHJpb3JpdHlcbiAqIG92ZXIgb3RoZXIgZXZlbnRzIGxpa2UgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZXBhaW50LiBBbiBlcnJvciB0aHJvd24gZnJvbSBhblxuICogZXZlbnQgd2lsbCBub3QgaW50ZXJydXB0LCBub3IgZXZlbiBzdWJzdGFudGlhbGx5IHNsb3cgZG93biB0aGUgcHJvY2Vzc2luZyBvZlxuICogb3RoZXIgZXZlbnRzLCBidXQgd2lsbCBiZSByYXRoZXIgcG9zdHBvbmVkIHRvIGEgbG93ZXIgcHJpb3JpdHkgZXZlbnQuXG4gKiBAcGFyYW0ge3tjYWxsfX0gdGFzayBBIGNhbGxhYmxlIG9iamVjdCwgdHlwaWNhbGx5IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBub1xuICogYXJndW1lbnRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzYXA7XG5mdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgICB2YXIgcmF3VGFzaztcbiAgICBpZiAoZnJlZVRhc2tzLmxlbmd0aCkge1xuICAgICAgICByYXdUYXNrID0gZnJlZVRhc2tzLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd1Rhc2sgPSBuZXcgUmF3VGFzaygpO1xuICAgIH1cbiAgICByYXdUYXNrLnRhc2sgPSB0YXNrO1xuICAgIHJhd0FzYXAocmF3VGFzayk7XG59XG5cbi8vIFdlIHdyYXAgdGFza3Mgd2l0aCByZWN5Y2xhYmxlIHRhc2sgb2JqZWN0cy4gIEEgdGFzayBvYmplY3QgaW1wbGVtZW50c1xuLy8gYGNhbGxgLCBqdXN0IGxpa2UgYSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJhd1Rhc2soKSB7XG4gICAgdGhpcy50YXNrID0gbnVsbDtcbn1cblxuLy8gVGhlIHNvbGUgcHVycG9zZSBvZiB3cmFwcGluZyB0aGUgdGFzayBpcyB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIGFuZCByZWN5Y2xlXG4vLyB0aGUgdGFzayBvYmplY3QgYWZ0ZXIgaXRzIHNpbmdsZSB1c2UuXG5SYXdUYXNrLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRoaXMudGFzay5jYWxsKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGFzYXAub25lcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBob29rIGV4aXN0cyBwdXJlbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAgICAgICAgICAvLyBJdHMgbmFtZSB3aWxsIGJlIHBlcmlvZGljYWxseSByYW5kb21pemVkIHRvIGJyZWFrIGFueSBjb2RlIHRoYXRcbiAgICAgICAgICAgIC8vIGRlcGVuZHMgb24gaXRzIGV4aXN0ZW5jZS5cbiAgICAgICAgICAgIGFzYXAub25lcnJvcihlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJbiBhIHdlYiBicm93c2VyLCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuIEhvd2V2ZXIsIHRvIGF2b2lkXG4gICAgICAgICAgICAvLyBzbG93aW5nIGRvd24gdGhlIHF1ZXVlIG9mIHBlbmRpbmcgdGFza3MsIHdlIHJldGhyb3cgdGhlIGVycm9yIGluIGFcbiAgICAgICAgICAgIC8vIGxvd2VyIHByaW9yaXR5IHR1cm4uXG4gICAgICAgICAgICBwZW5kaW5nRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgcmVxdWVzdEVycm9yVGhyb3coKTtcbiAgICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgIGZyZWVUYXNrc1tmcmVlVGFza3MubGVuZ3RoXSA9IHRoaXM7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBVc2UgdGhlIGZhc3Rlc3QgbWVhbnMgcG9zc2libGUgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gaXRzIG93biB0dXJuLCB3aXRoXG4vLyBwcmlvcml0eSBvdmVyIG90aGVyIGV2ZW50cyBpbmNsdWRpbmcgSU8sIGFuaW1hdGlvbiwgcmVmbG93LCBhbmQgcmVkcmF3XG4vLyBldmVudHMgaW4gYnJvd3NlcnMuXG4vL1xuLy8gQW4gZXhjZXB0aW9uIHRocm93biBieSBhIHRhc2sgd2lsbCBwZXJtYW5lbnRseSBpbnRlcnJ1cHQgdGhlIHByb2Nlc3Npbmcgb2Zcbi8vIHN1YnNlcXVlbnQgdGFza3MuIFRoZSBoaWdoZXIgbGV2ZWwgYGFzYXBgIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93biBieSBhIHRhc2ssIHRoYXQgdGhlIHRhc2sgcXVldWUgd2lsbCBjb250aW51ZSBmbHVzaGluZyBhc1xuLy8gc29vbiBhcyBwb3NzaWJsZSwgYnV0IGlmIHlvdSB1c2UgYHJhd0FzYXBgIGRpcmVjdGx5LCB5b3UgYXJlIHJlc3BvbnNpYmxlIHRvXG4vLyBlaXRoZXIgZW5zdXJlIHRoYXQgbm8gZXhjZXB0aW9ucyBhcmUgdGhyb3duIGZyb20geW91ciB0YXNrLCBvciB0byBtYW51YWxseVxuLy8gY2FsbCBgcmF3QXNhcC5yZXF1ZXN0Rmx1c2hgIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG5tb2R1bGUuZXhwb3J0cyA9IHJhd0FzYXA7XG5mdW5jdGlvbiByYXdBc2FwKHRhc2spIHtcbiAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgICAgICByZXF1ZXN0Rmx1c2goKTtcbiAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBFcXVpdmFsZW50IHRvIHB1c2gsIGJ1dCBhdm9pZHMgYSBmdW5jdGlvbiBjYWxsLlxuICAgIHF1ZXVlW3F1ZXVlLmxlbmd0aF0gPSB0YXNrO1xufVxuXG52YXIgcXVldWUgPSBbXTtcbi8vIE9uY2UgYSBmbHVzaCBoYXMgYmVlbiByZXF1ZXN0ZWQsIG5vIGZ1cnRoZXIgY2FsbHMgdG8gYHJlcXVlc3RGbHVzaGAgYXJlXG4vLyBuZWNlc3NhcnkgdW50aWwgdGhlIG5leHQgYGZsdXNoYCBjb21wbGV0ZXMuXG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIG1ldGhvZCB0aGF0IGF0dGVtcHRzIHRvIGtpY2tcbi8vIG9mZiBhIGBmbHVzaGAgZXZlbnQgYXMgcXVpY2tseSBhcyBwb3NzaWJsZS4gYGZsdXNoYCB3aWxsIGF0dGVtcHQgdG8gZXhoYXVzdFxuLy8gdGhlIGV2ZW50IHF1ZXVlIGJlZm9yZSB5aWVsZGluZyB0byB0aGUgYnJvd3NlcidzIG93biBldmVudCBsb29wLlxudmFyIHJlcXVlc3RGbHVzaDtcbi8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV4dCB0YXNrIHRvIGV4ZWN1dGUgaW4gdGhlIHRhc2sgcXVldWUuIFRoaXMgaXNcbi8vIHByZXNlcnZlZCBiZXR3ZWVuIGNhbGxzIHRvIGBmbHVzaGAgc28gdGhhdCBpdCBjYW4gYmUgcmVzdW1lZCBpZlxuLy8gYSB0YXNrIHRocm93cyBhbiBleGNlcHRpb24uXG52YXIgaW5kZXggPSAwO1xuLy8gSWYgYSB0YXNrIHNjaGVkdWxlcyBhZGRpdGlvbmFsIHRhc2tzIHJlY3Vyc2l2ZWx5LCB0aGUgdGFzayBxdWV1ZSBjYW4gZ3Jvd1xuLy8gdW5ib3VuZGVkLiBUbyBwcmV2ZW50IG1lbW9yeSBleGhhdXN0aW9uLCB0aGUgdGFzayBxdWV1ZSB3aWxsIHBlcmlvZGljYWxseVxuLy8gdHJ1bmNhdGUgYWxyZWFkeS1jb21wbGV0ZWQgdGFza3MuXG52YXIgY2FwYWNpdHkgPSAxMDI0O1xuXG4vLyBUaGUgZmx1c2ggZnVuY3Rpb24gcHJvY2Vzc2VzIGFsbCB0YXNrcyB0aGF0IGhhdmUgYmVlbiBzY2hlZHVsZWQgd2l0aFxuLy8gYHJhd0FzYXBgIHVubGVzcyBhbmQgdW50aWwgb25lIG9mIHRob3NlIHRhc2tzIHRocm93cyBhbiBleGNlcHRpb24uXG4vLyBJZiBhIHRhc2sgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgYGZsdXNoYCBlbnN1cmVzIHRoYXQgaXRzIHN0YXRlIHdpbGwgcmVtYWluXG4vLyBjb25zaXN0ZW50IGFuZCB3aWxsIHJlc3VtZSB3aGVyZSBpdCBsZWZ0IG9mZiB3aGVuIGNhbGxlZCBhZ2Fpbi5cbi8vIEhvd2V2ZXIsIGBmbHVzaGAgZG9lcyBub3QgbWFrZSBhbnkgYXJyYW5nZW1lbnRzIHRvIGJlIGNhbGxlZCBhZ2FpbiBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93bi5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHdoaWxlIChpbmRleCA8IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIEFkdmFuY2UgdGhlIGluZGV4IGJlZm9yZSBjYWxsaW5nIHRoZSB0YXNrLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSB3aWxsXG4gICAgICAgIC8vIGJlZ2luIGZsdXNoaW5nIG9uIHRoZSBuZXh0IHRhc2sgdGhlIHRhc2sgdGhyb3dzIGFuIGVycm9yLlxuICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgcXVldWVbY3VycmVudEluZGV4XS5jYWxsKCk7XG4gICAgICAgIC8vIFByZXZlbnQgbGVha2luZyBtZW1vcnkgZm9yIGxvbmcgY2hhaW5zIG9mIHJlY3Vyc2l2ZSBjYWxscyB0byBgYXNhcGAuXG4gICAgICAgIC8vIElmIHdlIGNhbGwgYGFzYXBgIHdpdGhpbiB0YXNrcyBzY2hlZHVsZWQgYnkgYGFzYXBgLCB0aGUgcXVldWUgd2lsbFxuICAgICAgICAvLyBncm93LCBidXQgdG8gYXZvaWQgYW4gTyhuKSB3YWxrIGZvciBldmVyeSB0YXNrIHdlIGV4ZWN1dGUsIHdlIGRvbid0XG4gICAgICAgIC8vIHNoaWZ0IHRhc2tzIG9mZiB0aGUgcXVldWUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gZXhlY3V0ZWQuXG4gICAgICAgIC8vIEluc3RlYWQsIHdlIHBlcmlvZGljYWxseSBzaGlmdCAxMDI0IHRhc2tzIG9mZiB0aGUgcXVldWUuXG4gICAgICAgIGlmIChpbmRleCA+IGNhcGFjaXR5KSB7XG4gICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgIGZvciAodmFyIHNjYW4gPSAwLCBuZXdMZW5ndGggPSBxdWV1ZS5sZW5ndGggLSBpbmRleDsgc2NhbiA8IG5ld0xlbmd0aDsgc2NhbisrKSB7XG4gICAgICAgICAgICAgICAgcXVldWVbc2Nhbl0gPSBxdWV1ZVtzY2FuICsgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUubGVuZ3RoIC09IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgaW5kZXggPSAwO1xuICAgIGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgc3RyYXRlZ3kgYmFzZWQgb24gZGF0YSBjb2xsZWN0ZWQgZnJvbVxuLy8gZXZlcnkgYXZhaWxhYmxlIFNhdWNlTGFicyBTZWxlbml1bSB3ZWIgZHJpdmVyIHdvcmtlciBhdCB0aW1lIG9mIHdyaXRpbmcuXG4vLyBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xbUctNVVZR3VwNXF4R2RFTVdraFA2QldDejA1M05VYjJFMVFvVVRVMTZ1QS9lZGl0I2dpZD03ODM3MjQ1OTNcblxuLy8gU2FmYXJpIDYgYW5kIDYuMSBmb3IgZGVza3RvcCwgaVBhZCwgYW5kIGlQaG9uZSBhcmUgdGhlIG9ubHkgYnJvd3NlcnMgdGhhdFxuLy8gaGF2ZSBXZWJLaXRNdXRhdGlvbk9ic2VydmVyIGJ1dCBub3QgdW4tcHJlZml4ZWQgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11c3QgdXNlIGBnbG9iYWxgIG9yIGBzZWxmYCBpbnN0ZWFkIG9mIGB3aW5kb3dgIHRvIHdvcmsgaW4gYm90aCBmcmFtZXMgYW5kIHdlYlxuLy8gd29ya2Vycy4gYGdsb2JhbGAgaXMgYSBwcm92aXNpb24gb2YgQnJvd3NlcmlmeSwgTXIsIE1ycywgb3IgTW9wLlxuXG4vKiBnbG9iYWxzIHNlbGYgKi9cbnZhciBzY29wZSA9IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBzZWxmO1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gc2NvcGUuTXV0YXRpb25PYnNlcnZlciB8fCBzY29wZS5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuXG4vLyBNdXRhdGlvbk9ic2VydmVycyBhcmUgZGVzaXJhYmxlIGJlY2F1c2UgdGhleSBoYXZlIGhpZ2ggcHJpb3JpdHkgYW5kIHdvcmtcbi8vIHJlbGlhYmx5IGV2ZXJ5d2hlcmUgdGhleSBhcmUgaW1wbGVtZW50ZWQuXG4vLyBUaGV5IGFyZSBpbXBsZW1lbnRlZCBpbiBhbGwgbW9kZXJuIGJyb3dzZXJzLlxuLy9cbi8vIC0gQW5kcm9pZCA0LTQuM1xuLy8gLSBDaHJvbWUgMjYtMzRcbi8vIC0gRmlyZWZveCAxNC0yOVxuLy8gLSBJbnRlcm5ldCBFeHBsb3JlciAxMVxuLy8gLSBpUGFkIFNhZmFyaSA2LTcuMVxuLy8gLSBpUGhvbmUgU2FmYXJpIDctNy4xXG4vLyAtIFNhZmFyaSA2LTdcbmlmICh0eXBlb2YgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJlcXVlc3RGbHVzaCA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcblxuLy8gTWVzc2FnZUNoYW5uZWxzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGdpdmUgZGlyZWN0IGFjY2VzcyB0byB0aGUgSFRNTFxuLy8gdGFzayBxdWV1ZSwgYXJlIGltcGxlbWVudGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLCBTYWZhcmkgNS4wLTEsIGFuZCBPcGVyYVxuLy8gMTEtMTIsIGFuZCBpbiB3ZWIgd29ya2VycyBpbiBtYW55IGVuZ2luZXMuXG4vLyBBbHRob3VnaCBtZXNzYWdlIGNoYW5uZWxzIHlpZWxkIHRvIGFueSBxdWV1ZWQgcmVuZGVyaW5nIGFuZCBJTyB0YXNrcywgdGhleVxuLy8gd291bGQgYmUgYmV0dGVyIHRoYW4gaW1wb3NpbmcgdGhlIDRtcyBkZWxheSBvZiB0aW1lcnMuXG4vLyBIb3dldmVyLCB0aGV5IGRvIG5vdCB3b3JrIHJlbGlhYmx5IGluIEludGVybmV0IEV4cGxvcmVyIG9yIFNhZmFyaS5cblxuLy8gSW50ZXJuZXQgRXhwbG9yZXIgMTAgaXMgdGhlIG9ubHkgYnJvd3NlciB0aGF0IGhhcyBzZXRJbW1lZGlhdGUgYnV0IGRvZXNcbi8vIG5vdCBoYXZlIE11dGF0aW9uT2JzZXJ2ZXJzLlxuLy8gQWx0aG91Z2ggc2V0SW1tZWRpYXRlIHlpZWxkcyB0byB0aGUgYnJvd3NlcidzIHJlbmRlcmVyLCBpdCB3b3VsZCBiZVxuLy8gcHJlZmVycmFibGUgdG8gZmFsbGluZyBiYWNrIHRvIHNldFRpbWVvdXQgc2luY2UgaXQgZG9lcyBub3QgaGF2ZVxuLy8gdGhlIG1pbmltdW0gNG1zIHBlbmFsdHkuXG4vLyBVbmZvcnR1bmF0ZWx5IHRoZXJlIGFwcGVhcnMgdG8gYmUgYSBidWcgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAgTW9iaWxlIChhbmRcbi8vIERlc2t0b3AgdG8gYSBsZXNzZXIgZXh0ZW50KSB0aGF0IHJlbmRlcnMgYm90aCBzZXRJbW1lZGlhdGUgYW5kXG4vLyBNZXNzYWdlQ2hhbm5lbCB1c2VsZXNzIGZvciB0aGUgcHVycG9zZXMgb2YgQVNBUC5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS9pc3N1ZXMvMzk2XG5cbi8vIFRpbWVycyBhcmUgaW1wbGVtZW50ZWQgdW5pdmVyc2FsbHkuXG4vLyBXZSBmYWxsIGJhY2sgdG8gdGltZXJzIGluIHdvcmtlcnMgaW4gbW9zdCBlbmdpbmVzLCBhbmQgaW4gZm9yZWdyb3VuZFxuLy8gY29udGV4dHMgaW4gdGhlIGZvbGxvd2luZyBicm93c2Vycy5cbi8vIEhvd2V2ZXIsIG5vdGUgdGhhdCBldmVuIHRoaXMgc2ltcGxlIGNhc2UgcmVxdWlyZXMgbnVhbmNlcyB0byBvcGVyYXRlIGluIGFcbi8vIGJyb2FkIHNwZWN0cnVtIG9mIGJyb3dzZXJzLlxuLy9cbi8vIC0gRmlyZWZveCAzLTEzXG4vLyAtIEludGVybmV0IEV4cGxvcmVyIDYtOVxuLy8gLSBpUGFkIFNhZmFyaSA0LjNcbi8vIC0gTHlueCAyLjguN1xufSBlbHNlIHtcbiAgICByZXF1ZXN0Rmx1c2ggPSBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIoZmx1c2gpO1xufVxuXG4vLyBgcmVxdWVzdEZsdXNoYCByZXF1ZXN0cyB0aGF0IHRoZSBoaWdoIHByaW9yaXR5IGV2ZW50IHF1ZXVlIGJlIGZsdXNoZWQgYXNcbi8vIHNvb24gYXMgcG9zc2libGUuXG4vLyBUaGlzIGlzIHVzZWZ1bCB0byBwcmV2ZW50IGFuIGVycm9yIHRocm93biBpbiBhIHRhc2sgZnJvbSBzdGFsbGluZyB0aGUgZXZlbnRcbi8vIHF1ZXVlIGlmIHRoZSBleGNlcHRpb24gaGFuZGxlZCBieSBOb2RlLmpz4oCZc1xuLy8gYHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiKWAgb3IgYnkgYSBkb21haW4uXG5yYXdBc2FwLnJlcXVlc3RGbHVzaCA9IHJlcXVlc3RGbHVzaDtcblxuLy8gVG8gcmVxdWVzdCBhIGhpZ2ggcHJpb3JpdHkgZXZlbnQsIHdlIGluZHVjZSBhIG11dGF0aW9uIG9ic2VydmVyIGJ5IHRvZ2dsaW5nXG4vLyB0aGUgdGV4dCBvZiBhIHRleHQgbm9kZSBiZXR3ZWVuIFwiMVwiIGFuZCBcIi0xXCIuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjaykge1xuICAgIHZhciB0b2dnbGUgPSAxO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjayk7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICB0b2dnbGUgPSAtdG9nZ2xlO1xuICAgICAgICBub2RlLmRhdGEgPSB0b2dnbGU7XG4gICAgfTtcbn1cblxuLy8gVGhlIG1lc3NhZ2UgY2hhbm5lbCB0ZWNobmlxdWUgd2FzIGRpc2NvdmVyZWQgYnkgTWFsdGUgVWJsIGFuZCB3YXMgdGhlXG4vLyBvcmlnaW5hbCBmb3VuZGF0aW9uIGZvciB0aGlzIGxpYnJhcnkuXG4vLyBodHRwOi8vd3d3Lm5vbmJsb2NraW5nLmlvLzIwMTEvMDYvd2luZG93bmV4dHRpY2suaHRtbFxuXG4vLyBTYWZhcmkgNi4wLjUgKGF0IGxlYXN0KSBpbnRlcm1pdHRlbnRseSBmYWlscyB0byBjcmVhdGUgbWVzc2FnZSBwb3J0cyBvbiBhXG4vLyBwYWdlJ3MgZmlyc3QgbG9hZC4gVGhhbmtmdWxseSwgdGhpcyB2ZXJzaW9uIG9mIFNhZmFyaSBzdXBwb3J0c1xuLy8gTXV0YXRpb25PYnNlcnZlcnMsIHNvIHdlIGRvbid0IG5lZWQgdG8gZmFsbCBiYWNrIGluIHRoYXQgY2FzZS5cblxuLy8gZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbU1lc3NhZ2VDaGFubmVsKGNhbGxiYWNrKSB7XG4vLyAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbi8vICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGNhbGxiYWNrO1xuLy8gICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbi8vICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbi8vICAgICB9O1xuLy8gfVxuXG4vLyBGb3IgcmVhc29ucyBleHBsYWluZWQgYWJvdmUsIHdlIGFyZSBhbHNvIHVuYWJsZSB0byB1c2UgYHNldEltbWVkaWF0ZWBcbi8vIHVuZGVyIGFueSBjaXJjdW1zdGFuY2VzLlxuLy8gRXZlbiBpZiB3ZSB3ZXJlLCB0aGVyZSBpcyBhbm90aGVyIGJ1ZyBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbi8vIEl0IGlzIG5vdCBzdWZmaWNpZW50IHRvIGFzc2lnbiBgc2V0SW1tZWRpYXRlYCB0byBgcmVxdWVzdEZsdXNoYCBiZWNhdXNlXG4vLyBgc2V0SW1tZWRpYXRlYCBtdXN0IGJlIGNhbGxlZCAqYnkgbmFtZSogYW5kIHRoZXJlZm9yZSBtdXN0IGJlIHdyYXBwZWQgaW4gYVxuLy8gY2xvc3VyZS5cbi8vIE5ldmVyIGZvcmdldC5cblxuLy8gZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuLy8gICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbi8vICAgICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbi8vICAgICB9O1xuLy8gfVxuXG4vLyBTYWZhcmkgNi4wIGhhcyBhIHByb2JsZW0gd2hlcmUgdGltZXJzIHdpbGwgZ2V0IGxvc3Qgd2hpbGUgdGhlIHVzZXIgaXNcbi8vIHNjcm9sbGluZy4gVGhpcyBwcm9ibGVtIGRvZXMgbm90IGltcGFjdCBBU0FQIGJlY2F1c2UgU2FmYXJpIDYuMCBzdXBwb3J0c1xuLy8gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB0aGF0IGltcGxlbWVudGF0aW9uIGlzIHVzZWQgaW5zdGVhZC5cbi8vIEhvd2V2ZXIsIGlmIHdlIGV2ZXIgZWxlY3QgdG8gdXNlIHRpbWVycyBpbiBTYWZhcmksIHRoZSBwcmV2YWxlbnQgd29yay1hcm91bmRcbi8vIGlzIHRvIGFkZCBhIHNjcm9sbCBldmVudCBsaXN0ZW5lciB0aGF0IGNhbGxzIGZvciBhIGZsdXNoLlxuXG4vLyBgc2V0VGltZW91dGAgZG9lcyBub3QgY2FsbCB0aGUgcGFzc2VkIGNhbGxiYWNrIGlmIHRoZSBkZWxheSBpcyBsZXNzIHRoYW5cbi8vIGFwcHJveGltYXRlbHkgNyBpbiB3ZWIgd29ya2VycyBpbiBGaXJlZm94IDggdGhyb3VnaCAxOCwgYW5kIHNvbWV0aW1lcyBub3Rcbi8vIGV2ZW4gdGhlbi5cblxuZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICAvLyBXZSBkaXNwYXRjaCBhIHRpbWVvdXQgd2l0aCBhIHNwZWNpZmllZCBkZWxheSBvZiAwIGZvciBlbmdpbmVzIHRoYXRcbiAgICAgICAgLy8gY2FuIHJlbGlhYmx5IGFjY29tbW9kYXRlIHRoYXQgcmVxdWVzdC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgc25hcHBlZFxuICAgICAgICAvLyB0byBhIDQgbWlsaXNlY29uZCBkZWxheSwgYnV0IG9uY2Ugd2UncmUgZmx1c2hpbmcsIHRoZXJlJ3Mgbm8gZGVsYXlcbiAgICAgICAgLy8gYmV0d2VlbiBldmVudHMuXG4gICAgICAgIHZhciB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChoYW5kbGVUaW1lciwgMCk7XG4gICAgICAgIC8vIEhvd2V2ZXIsIHNpbmNlIHRoaXMgdGltZXIgZ2V0cyBmcmVxdWVudGx5IGRyb3BwZWQgaW4gRmlyZWZveFxuICAgICAgICAvLyB3b3JrZXJzLCB3ZSBlbmxpc3QgYW4gaW50ZXJ2YWwgaGFuZGxlIHRoYXQgd2lsbCB0cnkgdG8gZmlyZVxuICAgICAgICAvLyBhbiBldmVudCAyMCB0aW1lcyBwZXIgc2Vjb25kIHVudGlsIGl0IHN1Y2NlZWRzLlxuICAgICAgICB2YXIgaW50ZXJ2YWxIYW5kbGUgPSBzZXRJbnRlcnZhbChoYW5kbGVUaW1lciwgNTApO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRpbWVyKCkge1xuICAgICAgICAgICAgLy8gV2hpY2hldmVyIHRpbWVyIHN1Y2NlZWRzIHdpbGwgY2FuY2VsIGJvdGggdGltZXJzIGFuZFxuICAgICAgICAgICAgLy8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBUaGlzIGlzIGZvciBgYXNhcC5qc2Agb25seS5cbi8vIEl0cyBuYW1lIHdpbGwgYmUgcGVyaW9kaWNhbGx5IHJhbmRvbWl6ZWQgdG8gYnJlYWsgYW55IGNvZGUgdGhhdCBkZXBlbmRzIG9uXG4vLyBpdHMgZXhpc3RlbmNlLlxucmF3QXNhcC5tYWtlUmVxdWVzdENhbGxGcm9tVGltZXIgPSBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXI7XG5cbi8vIEFTQVAgd2FzIG9yaWdpbmFsbHkgYSBuZXh0VGljayBzaGltIGluY2x1ZGVkIGluIFEuIFRoaXMgd2FzIGZhY3RvcmVkIG91dFxuLy8gaW50byB0aGlzIEFTQVAgcGFja2FnZS4gSXQgd2FzIGxhdGVyIGFkYXB0ZWQgdG8gUlNWUCB3aGljaCBtYWRlIGZ1cnRoZXJcbi8vIGFtZW5kbWVudHMuIFRoZXNlIGRlY2lzaW9ucywgcGFydGljdWxhcmx5IHRvIG1hcmdpbmFsaXplIE1lc3NhZ2VDaGFubmVsIGFuZFxuLy8gdG8gY2FwdHVyZSB0aGUgTXV0YXRpb25PYnNlcnZlciBpbXBsZW1lbnRhdGlvbiBpbiBhIGNsb3N1cmUsIHdlcmUgaW50ZWdyYXRlZFxuLy8gYmFjayBpbnRvIEFTQVAgcHJvcGVyLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RpbGRlaW8vcnN2cC5qcy9ibG9iL2NkZGY3MjMyNTQ2YTljZjg1ODUyNGI3NWNkZTZmOWVkZjcyNjIwYTcvbGliL3JzdnAvYXNhcC5qc1xuIiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcihfcmVmKSB7XG4gIHZhciBzdG9yZSA9IF9yZWYuc3RvcmUsXG4gICAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgY29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbnZhciBFTVBUWV9BUlJBWSA9IFtdO1xudmFyIE5PX1NVQlNDUklQVElPTl9BUlJBWSA9IFtudWxsLCBudWxsXTtcblxudmFyIHN0cmluZ2lmeUNvbXBvbmVudCA9IGZ1bmN0aW9uIHN0cmluZ2lmeUNvbXBvbmVudChDb21wKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICB2YXIgdXBkYXRlQ291bnQgPSBzdGF0ZVsxXTtcbiAgcmV0dXJuIFthY3Rpb24ucGF5bG9hZCwgdXBkYXRlQ291bnQgKyAxXTtcbn1cblxuZnVuY3Rpb24gdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGVmZmVjdEZ1bmMsIGVmZmVjdEFyZ3MsIGRlcGVuZGVuY2llcykge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZWZmZWN0RnVuYy5hcHBseSh2b2lkIDAsIGVmZmVjdEFyZ3MpO1xuICB9LCBkZXBlbmRlbmNpZXMpO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV3JhcHBlclByb3BzKGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBhY3R1YWxDaGlsZFByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IGZhbHNlOyAvLyBJZiB0aGUgcmVuZGVyIHdhcyBmcm9tIGEgc3RvcmUgdXBkYXRlLCBjbGVhciBvdXQgdGhhdCByZWZlcmVuY2UgYW5kIGNhc2NhZGUgdGhlIHN1YnNjcmliZXIgdXBkYXRlXG5cbiAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCkge1xuICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG51bGw7XG4gICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZVVwZGF0ZXMoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLCBzdG9yZSwgc3Vic2NyaXB0aW9uLCBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCkge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuOyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICB2YXIgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgdmFyIGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICB2YXIgY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgdmFyIG5ld0NoaWxkUHJvcHMsIGVycm9yO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFjdHVhbGx5IHJ1biB0aGUgc2VsZWN0b3Igd2l0aCB0aGUgbW9zdCByZWNlbnQgc3RvcmUgc3RhdGUgYW5kIHdyYXBwZXIgcHJvcHNcbiAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmVcbiAgICAgIG5ld0NoaWxkUHJvcHMgPSBjaGlsZFByb3BzU2VsZWN0b3IobGF0ZXN0U3RvcmVTdGF0ZSwgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvciA9IGU7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBlO1xuICAgIH1cblxuICAgIGlmICghZXJyb3IpIHtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IG51bGw7XG4gICAgfSAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgaGF2ZW4ndCBjaGFuZ2VkLCBub3RoaW5nIHRvIGRvIGhlcmUgLSBjYXNjYWRlIHRoZSBzdWJzY3JpcHRpb24gdXBkYXRlXG5cblxuICAgIGlmIChuZXdDaGlsZFByb3BzID09PSBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50KSB7XG4gICAgICBpZiAoIXJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQpIHtcbiAgICAgICAgbm90aWZ5TmVzdGVkU3VicygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTYXZlIHJlZmVyZW5jZXMgdG8gdGhlIG5ldyBjaGlsZCBwcm9wcy4gIE5vdGUgdGhhdCB3ZSB0cmFjayB0aGUgXCJjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZVwiXG4gICAgICAvLyBhcyBhIHJlZiBpbnN0ZWFkIG9mIGEgdXNlU3RhdGUvdXNlUmVkdWNlciBiZWNhdXNlIHdlIG5lZWQgYSB3YXkgdG8gZGV0ZXJtaW5lIGlmIHRoYXQgdmFsdWUgaGFzXG4gICAgICAvLyBiZWVuIHByb2Nlc3NlZC4gIElmIHRoaXMgd2VudCBpbnRvIHVzZVN0YXRlL3VzZVJlZHVjZXIsIHdlIGNvdWxkbid0IGNsZWFyIG91dCB0aGUgdmFsdWUgd2l0aG91dFxuICAgICAgLy8gZm9yY2luZyBhbm90aGVyIHJlLXJlbmRlciwgd2hpY2ggd2UgZG9uJ3Qgd2FudC5cbiAgICAgIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSB0cnVlOyAvLyBJZiB0aGUgY2hpbGQgcHJvcHMgX2RpZF8gY2hhbmdlIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IpLCB0aGlzIHdyYXBwZXIgY29tcG9uZW50IG5lZWRzIHRvIHJlLXJlbmRlclxuXG4gICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NUT1JFX1VQREFURUQnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIHZhciB1bnN1YnNjcmliZVdyYXBwZXIgPSBmdW5jdGlvbiB1bnN1YnNjcmliZVdyYXBwZXIoKSB7XG4gICAgZGlkVW5zdWJzY3JpYmUgPSB0cnVlO1xuICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcblxuICAgIGlmIChsYXN0VGhyb3duRXJyb3IpIHtcbiAgICAgIC8vIEl0J3MgcG9zc2libGUgdGhhdCB3ZSBjYXVnaHQgYW4gZXJyb3IgZHVlIHRvIGEgYmFkIG1hcFN0YXRlIGZ1bmN0aW9uLCBidXQgdGhlXG4gICAgICAvLyBwYXJlbnQgcmUtcmVuZGVyZWQgd2l0aG91dCB0aGlzIGNvbXBvbmVudCBhbmQgd2UncmUgYWJvdXQgdG8gdW5tb3VudC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiBhcyBsb25nIGFzIHdlIGRvIHRvcC1kb3duIHN1YnNjcmlwdGlvbnMgY29ycmVjdGx5LCBidXRcbiAgICAgIC8vIGlmIHdlIGV2ZXIgZG8gdGhvc2Ugd3JvbmcsIHRoaXMgdGhyb3cgd2lsbCBzdXJmYWNlIHRoZSBlcnJvciBpbiBvdXIgdGVzdHMuXG4gICAgICAvLyBJbiB0aGF0IGNhc2UsIHRocm93IHRoZSBlcnJvciBmcm9tIGhlcmUgc28gaXQgZG9lc24ndCBnZXQgbG9zdC5cbiAgICAgIHRocm93IGxhc3RUaHJvd25FcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVuc3Vic2NyaWJlV3JhcHBlcjtcbn1cblxudmFyIGluaXRTdGF0ZVVwZGF0ZXMgPSBmdW5jdGlvbiBpbml0U3RhdGVVcGRhdGVzKCkge1xuICByZXR1cm4gW251bGwsIDBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29ubmVjdEFkdmFuY2VkKFxuLypcclxuICBzZWxlY3RvckZhY3RvcnkgaXMgYSBmdW5jIHRoYXQgaXMgcmVzcG9uc2libGUgZm9yIHJldHVybmluZyB0aGUgc2VsZWN0b3IgZnVuY3Rpb24gdXNlZCB0b1xyXG4gIGNvbXB1dGUgbmV3IHByb3BzIGZyb20gc3RhdGUsIHByb3BzLCBhbmQgZGlzcGF0Y2guIEZvciBleGFtcGxlOlxyXG4gICAgICBleHBvcnQgZGVmYXVsdCBjb25uZWN0QWR2YW5jZWQoKGRpc3BhdGNoLCBvcHRpb25zKSA9PiAoc3RhdGUsIHByb3BzKSA9PiAoe1xyXG4gICAgICB0aGluZzogc3RhdGUudGhpbmdzW3Byb3BzLnRoaW5nSWRdLFxyXG4gICAgICBzYXZlVGhpbmc6IGZpZWxkcyA9PiBkaXNwYXRjaChhY3Rpb25DcmVhdG9ycy5zYXZlVGhpbmcocHJvcHMudGhpbmdJZCwgZmllbGRzKSksXHJcbiAgICB9KSkoWW91ckNvbXBvbmVudClcclxuICAgIEFjY2VzcyB0byBkaXNwYXRjaCBpcyBwcm92aWRlZCB0byB0aGUgZmFjdG9yeSBzbyBzZWxlY3RvckZhY3RvcmllcyBjYW4gYmluZCBhY3Rpb25DcmVhdG9yc1xyXG4gIG91dHNpZGUgb2YgdGhlaXIgc2VsZWN0b3IgYXMgYW4gb3B0aW1pemF0aW9uLiBPcHRpb25zIHBhc3NlZCB0byBjb25uZWN0QWR2YW5jZWQgYXJlIHBhc3NlZCB0b1xyXG4gIHRoZSBzZWxlY3RvckZhY3RvcnksIGFsb25nIHdpdGggZGlzcGxheU5hbWUgYW5kIFdyYXBwZWRDb21wb25lbnQsIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuXHJcbiAgICBOb3RlIHRoYXQgc2VsZWN0b3JGYWN0b3J5IGlzIHJlc3BvbnNpYmxlIGZvciBhbGwgY2FjaGluZy9tZW1vaXphdGlvbiBvZiBpbmJvdW5kIGFuZCBvdXRib3VuZFxyXG4gIHByb3BzLiBEbyBub3QgdXNlIGNvbm5lY3RBZHZhbmNlZCBkaXJlY3RseSB3aXRob3V0IG1lbW9pemluZyByZXN1bHRzIGJldHdlZW4gY2FsbHMgdG8geW91clxyXG4gIHNlbGVjdG9yLCBvdGhlcndpc2UgdGhlIENvbm5lY3QgY29tcG9uZW50IHdpbGwgcmUtcmVuZGVyIG9uIGV2ZXJ5IHN0YXRlIG9yIHByb3BzIGNoYW5nZS5cclxuKi9cbnNlbGVjdG9yRmFjdG9yeSwgLy8gb3B0aW9ucyBvYmplY3Q6XG5fcmVmKSB7XG4gIGlmIChfcmVmID09PSB2b2lkIDApIHtcbiAgICBfcmVmID0ge307XG4gIH1cblxuICB2YXIgX3JlZjIgPSBfcmVmLFxuICAgICAgX3JlZjIkZ2V0RGlzcGxheU5hbWUgPSBfcmVmMi5nZXREaXNwbGF5TmFtZSxcbiAgICAgIGdldERpc3BsYXlOYW1lID0gX3JlZjIkZ2V0RGlzcGxheU5hbWUgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIFwiQ29ubmVjdEFkdmFuY2VkKFwiICsgbmFtZSArIFwiKVwiO1xuICB9IDogX3JlZjIkZ2V0RGlzcGxheU5hbWUsXG4gICAgICBfcmVmMiRtZXRob2ROYW1lID0gX3JlZjIubWV0aG9kTmFtZSxcbiAgICAgIG1ldGhvZE5hbWUgPSBfcmVmMiRtZXRob2ROYW1lID09PSB2b2lkIDAgPyAnY29ubmVjdEFkdmFuY2VkJyA6IF9yZWYyJG1ldGhvZE5hbWUsXG4gICAgICBfcmVmMiRyZW5kZXJDb3VudFByb3AgPSBfcmVmMi5yZW5kZXJDb3VudFByb3AsXG4gICAgICByZW5kZXJDb3VudFByb3AgPSBfcmVmMiRyZW5kZXJDb3VudFByb3AgPT09IHZvaWQgMCA/IHVuZGVmaW5lZCA6IF9yZWYyJHJlbmRlckNvdW50UHJvcCxcbiAgICAgIF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9IF9yZWYyLnNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IF9yZWYyJHNob3VsZEhhbmRsZVN0YSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYyJHNob3VsZEhhbmRsZVN0YSxcbiAgICAgIF9yZWYyJHN0b3JlS2V5ID0gX3JlZjIuc3RvcmVLZXksXG4gICAgICBzdG9yZUtleSA9IF9yZWYyJHN0b3JlS2V5ID09PSB2b2lkIDAgPyAnc3RvcmUnIDogX3JlZjIkc3RvcmVLZXksXG4gICAgICBfcmVmMiR3aXRoUmVmID0gX3JlZjIud2l0aFJlZixcbiAgICAgIHdpdGhSZWYgPSBfcmVmMiR3aXRoUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJHdpdGhSZWYsXG4gICAgICBfcmVmMiRmb3J3YXJkUmVmID0gX3JlZjIuZm9yd2FyZFJlZixcbiAgICAgIGZvcndhcmRSZWYgPSBfcmVmMiRmb3J3YXJkUmVmID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGZvcndhcmRSZWYsXG4gICAgICBfcmVmMiRjb250ZXh0ID0gX3JlZjIuY29udGV4dCxcbiAgICAgIGNvbnRleHQgPSBfcmVmMiRjb250ZXh0ID09PSB2b2lkIDAgPyBSZWFjdFJlZHV4Q29udGV4dCA6IF9yZWYyJGNvbnRleHQsXG4gICAgICBjb25uZWN0T3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocmVuZGVyQ291bnRQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbmRlckNvdW50UHJvcCBpcyByZW1vdmVkLiByZW5kZXIgY291bnRpbmcgaXMgYnVpbHQgaW50byB0aGUgbGF0ZXN0IFJlYWN0IERldiBUb29scyBwcm9maWxpbmcgZXh0ZW5zaW9uXCIpO1xuICAgIH1cblxuICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3dpdGhSZWYgaXMgcmVtb3ZlZC4gVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB1c2UgYSByZWYgb24gdGhlIGNvbm5lY3RlZCBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICB2YXIgY3VzdG9tU3RvcmVXYXJuaW5nTWVzc2FnZSA9ICdUbyB1c2UgYSBjdXN0b20gUmVkdXggc3RvcmUgZm9yIHNwZWNpZmljIGNvbXBvbmVudHMsIGNyZWF0ZSBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHdpdGggJyArIFwiUmVhY3QuY3JlYXRlQ29udGV4dCgpLCBhbmQgcGFzcyB0aGUgY29udGV4dCBvYmplY3QgdG8gUmVhY3QgUmVkdXgncyBQcm92aWRlciBhbmQgc3BlY2lmaWMgY29tcG9uZW50c1wiICsgJyBsaWtlOiA8UHJvdmlkZXIgY29udGV4dD17TXlDb250ZXh0fT48Q29ubmVjdGVkQ29tcG9uZW50IGNvbnRleHQ9e015Q29udGV4dH0gLz48L1Byb3ZpZGVyPi4gJyArICdZb3UgbWF5IGFsc28gcGFzcyBhIHtjb250ZXh0IDogTXlDb250ZXh0fSBvcHRpb24gdG8gY29ubmVjdCc7XG5cbiAgICBpZiAoc3RvcmVLZXkgIT09ICdzdG9yZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3RvcmVLZXkgaGFzIGJlZW4gcmVtb3ZlZCBhbmQgZG9lcyBub3QgZG8gYW55dGhpbmcuICcgKyBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgQ29udGV4dCA9IGNvbnRleHQ7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IFwiICsgKG1ldGhvZE5hbWUgKyBcIi4gSW5zdGVhZCByZWNlaXZlZCBcIiArIHN0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KSkpO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKHdyYXBwZWRDb21wb25lbnROYW1lKTtcblxuICAgIHZhciBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbm5lY3RPcHRpb25zLCB7XG4gICAgICBnZXREaXNwbGF5TmFtZTogZ2V0RGlzcGxheU5hbWUsXG4gICAgICBtZXRob2ROYW1lOiBtZXRob2ROYW1lLFxuICAgICAgcmVuZGVyQ291bnRQcm9wOiByZW5kZXJDb3VudFByb3AsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIHN0b3JlS2V5OiBzdG9yZUtleSxcbiAgICAgIGRpc3BsYXlOYW1lOiBkaXNwbGF5TmFtZSxcbiAgICAgIHdyYXBwZWRDb21wb25lbnROYW1lOiB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQ6IFdyYXBwZWRDb21wb25lbnRcbiAgICB9KTtcblxuICAgIHZhciBwdXJlID0gY29ubmVjdE9wdGlvbnMucHVyZTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpIHtcbiAgICAgIHJldHVybiBzZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgIH0gLy8gSWYgd2UgYXJlbid0IHJ1bm5pbmcgaW4gXCJwdXJlXCIgbW9kZSwgd2UgZG9uJ3Qgd2FudCB0byBtZW1vaXplIHZhbHVlcy5cbiAgICAvLyBUbyBhdm9pZCBjb25kaXRpb25hbGx5IGNhbGxpbmcgaG9va3MsIHdlIGZhbGwgYmFjayB0byBhIHRpbnkgd3JhcHBlclxuICAgIC8vIHRoYXQganVzdCBleGVjdXRlcyB0aGUgZ2l2ZW4gY2FsbGJhY2sgaW1tZWRpYXRlbHkuXG5cblxuICAgIHZhciB1c2VQdXJlT25seU1lbW8gPSBwdXJlID8gdXNlTWVtbyA6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIENvbm5lY3RGdW5jdGlvbihwcm9wcykge1xuICAgICAgdmFyIF91c2VNZW1vID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgdmFyIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBwcm9wcy5yZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcInJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcIl0pO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pLFxuICAgICAgICAgIHByb3BzQ29udGV4dCA9IF91c2VNZW1vWzBdLFxuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocHJvcHNDb250ZXh0LkNvbnN1bWVyLCBudWxsKSkgPyBwcm9wc0NvbnRleHQgOiBDb250ZXh0O1xuICAgICAgfSwgW3Byb3BzQ29udGV4dCwgQ29udGV4dF0pOyAvLyBSZXRyaWV2ZSB0aGUgc3RvcmUgYW5kIGFuY2VzdG9yIHN1YnNjcmlwdGlvbiB2aWEgY29udGV4dCwgaWYgYXZhaWxhYmxlXG5cbiAgICAgIHZhciBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICB2YXIgZGlkU3RvcmVDb21lRnJvbUNvbnRleHQgPSBCb29sZWFuKGNvbnRleHRWYWx1ZSkgJiYgQm9vbGVhbihjb250ZXh0VmFsdWUuc3RvcmUpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhZGlkU3RvcmVDb21lRnJvbVByb3BzICYmICFkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBcXFwic3RvcmVcXFwiIGluIHRoZSBjb250ZXh0IG9mIFwiICsgKFwiXFxcIlwiICsgZGlzcGxheU5hbWUgKyBcIlxcXCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIFwiKSArIFwib3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIFwiICsgKFwiUmVhY3QgY29udGV4dCBjb25zdW1lciB0byBcIiArIGRpc3BsYXlOYW1lICsgXCIgaW4gY29ubmVjdCBvcHRpb25zLlwiKSk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIHZhciBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgdmFyIGNoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUaGUgY2hpbGQgcHJvcHMgc2VsZWN0b3IgbmVlZHMgdGhlIHN0b3JlIHJlZmVyZW5jZSBhcyBhbiBpbnB1dC5cbiAgICAgICAgLy8gUmUtY3JlYXRlIHRoaXMgc2VsZWN0b3Igd2hlbmV2ZXIgdGhlIHN0b3JlIGNoYW5nZXMuXG4gICAgICAgIHJldHVybiBjcmVhdGVDaGlsZFNlbGVjdG9yKHN0b3JlKTtcbiAgICAgIH0sIFtzdG9yZV0pO1xuXG4gICAgICB2YXIgX3VzZU1lbW8yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBudWxsIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgdmFyIG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKSxcbiAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdXNlTWVtbzJbMF0sXG4gICAgICAgICAgbm90aWZ5TmVzdGVkU3VicyA9IF91c2VNZW1vMlsxXTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cblxuICAgICAgdmFyIG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBXZSBuZWVkIHRvIGZvcmNlIHRoaXMgd3JhcHBlciBjb21wb25lbnQgdG8gcmUtcmVuZGVyIHdoZW5ldmVyIGEgUmVkdXggc3RvcmUgdXBkYXRlXG4gICAgICAvLyBjYXVzZXMgYSBjaGFuZ2UgdG8gdGhlIGNhbGN1bGF0ZWQgY2hpbGQgY29tcG9uZW50IHByb3BzIChvciB3ZSBjYXVnaHQgYW4gZXJyb3IgaW4gbWFwU3RhdGUpXG5cbiAgICAgIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyLCBFTVBUWV9BUlJBWSwgaW5pdFN0YXRlVXBkYXRlcyksXG4gICAgICAgICAgX3VzZVJlZHVjZXIkID0gX3VzZVJlZHVjZXJbMF0sXG4gICAgICAgICAgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCA9IF91c2VSZWR1Y2VyJFswXSxcbiAgICAgICAgICBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoID0gX3VzZVJlZHVjZXJbMV07IC8vIFByb3BhZ2F0ZSBhbnkgbWFwU3RhdGUvbWFwRGlzcGF0Y2ggZXJyb3JzIHVwd2FyZHNcblxuXG4gICAgICBpZiAocHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdCAmJiBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQuZXJyb3I7XG4gICAgICB9IC8vIFNldCB1cCByZWZzIHRvIGNvb3JkaW5hdGUgdmFsdWVzIGJldHdlZW4gdGhlIHN1YnNjcmlwdGlvbiBlZmZlY3QgYW5kIHRoZSByZW5kZXIgbG9naWNcblxuXG4gICAgICB2YXIgbGFzdENoaWxkUHJvcHMgPSB1c2VSZWYoKTtcbiAgICAgIHZhciBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICB2YXIgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgdmFyIHJlbmRlcklzU2NoZWR1bGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIHZhciBhY3R1YWxDaGlsZFByb3BzID0gdXNlUHVyZU9ubHlNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHJpY2t5IGxvZ2ljIGhlcmU6XG4gICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAvLyBJZiB3ZSBoYXZlIG5ldyBjaGlsZCBwcm9wcywgYW5kIHRoZSBzYW1lIHdyYXBwZXIgcHJvcHMsIHdlIGtub3cgd2Ugc2hvdWxkIHVzZSB0aGUgbmV3IGNoaWxkIHByb3BzIGFzLWlzLlxuICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgJiYgd3JhcHBlclByb3BzID09PSBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgIC8vIFRoaXMgd2lsbCBsaWtlbHkgY2F1c2UgQmFkIFRoaW5ncyAoVE0pIHRvIGhhcHBlbiBpbiBDb25jdXJyZW50IE1vZGUuXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICByZXR1cm4gY2hpbGRQcm9wc1NlbGVjdG9yKHN0b3JlLmdldFN0YXRlKCksIHdyYXBwZXJQcm9wcyk7XG4gICAgICB9LCBbc3RvcmUsIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pOyAvLyBPdXIgcmUtc3Vic2NyaWJlIGxvZ2ljIG9ubHkgcnVucyB3aGVuIHRoZSBzdG9yZS9zdWJzY3JpcHRpb24gc2V0dXAgY2hhbmdlc1xuXG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3Moc3Vic2NyaWJlVXBkYXRlcywgW3Nob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2hdLCBbc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yXSk7IC8vIE5vdyB0aGF0IGFsbCB0aGF0J3MgZG9uZSwgd2UgY2FuIGZpbmFsbHkgdHJ5IHRvIGFjdHVhbGx5IHJlbmRlciB0aGUgY2hpbGQgY29tcG9uZW50LlxuICAgICAgLy8gV2UgbWVtb2l6ZSB0aGUgZWxlbWVudHMgZm9yIHRoZSByZW5kZXJlZCBjaGlsZCBjb21wb25lbnQgYXMgYW4gb3B0aW1pemF0aW9uLlxuXG4gICAgICB2YXIgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9KSk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIHZhciByZW5kZXJlZENoaWxkID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIGNvbXBvbmVudCBpcyBzdWJzY3JpYmVkIHRvIHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdG8gcGFzcyBpdHMgb3duXG4gICAgICAgICAgLy8gc3Vic2NyaXB0aW9uIGluc3RhbmNlIGRvd24gdG8gb3VyIGRlc2NlbmRhbnRzLiBUaGF0IG1lYW5zIHJlbmRlcmluZyB0aGUgc2FtZVxuICAgICAgICAgIC8vIENvbnRleHQgaW5zdGFuY2UsIGFuZCBwdXR0aW5nIGEgZGlmZmVyZW50IHZhbHVlIGludG8gdGhlIGNvbnRleHQuXG4gICAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG59IiwiZnVuY3Rpb24gaXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgdmVyaWZ5UGxhaW5PYmplY3QgZnJvbSAnLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3QnO1xuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZ2V0Q29uc3RhbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRDb25zdGFudFNlbGVjdG9yKGRpc3BhdGNoLCBvcHRpb25zKSB7XG4gICAgdmFyIGNvbnN0YW50ID0gZ2V0Q29uc3RhbnQoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gICAgZnVuY3Rpb24gY29uc3RhbnRTZWxlY3RvcigpIHtcbiAgICAgIHJldHVybiBjb25zdGFudDtcbiAgICB9XG5cbiAgICBjb25zdGFudFNlbGVjdG9yLmRlcGVuZHNPbk93blByb3BzID0gZmFsc2U7XG4gICAgcmV0dXJuIGNvbnN0YW50U2VsZWN0b3I7XG4gIH07XG59IC8vIGRlcGVuZHNPbk93blByb3BzIGlzIHVzZWQgYnkgY3JlYXRlTWFwVG9Qcm9wc1Byb3h5IHRvIGRldGVybWluZSB3aGV0aGVyIHRvIHBhc3MgcHJvcHMgYXMgYXJnc1xuLy8gdG8gdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgd3JhcHBlZC4gSXQgaXMgYWxzbyB1c2VkIGJ5IG1ha2VQdXJlUHJvcHNTZWxlY3RvciB0byBkZXRlcm1pbmVcbi8vIHdoZXRoZXIgbWFwVG9Qcm9wcyBuZWVkcyB0byBiZSBpbnZva2VkIHdoZW4gcHJvcHMgaGF2ZSBjaGFuZ2VkLlxuLy9cbi8vIEEgbGVuZ3RoIG9mIG9uZSBzaWduYWxzIHRoYXQgbWFwVG9Qcm9wcyBkb2VzIG5vdCBkZXBlbmQgb24gcHJvcHMgZnJvbSB0aGUgcGFyZW50IGNvbXBvbmVudC5cbi8vIEEgbGVuZ3RoIG9mIHplcm8gaXMgYXNzdW1lZCB0byBtZWFuIG1hcFRvUHJvcHMgaXMgZ2V0dGluZyBhcmdzIHZpYSBhcmd1bWVudHMgb3IgLi4uYXJncyBhbmRcbi8vIHRoZXJlZm9yZSBub3QgcmVwb3J0aW5nIGl0cyBsZW5ndGggYWNjdXJhdGVseS4uXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSBudWxsICYmIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IHVuZGVmaW5lZCA/IEJvb2xlYW4obWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgOiBtYXBUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbn0gLy8gVXNlZCBieSB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbiBhbmQgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sXG4vLyB0aGlzIGZ1bmN0aW9uIHdyYXBzIG1hcFRvUHJvcHMgaW4gYSBwcm94eSBmdW5jdGlvbiB3aGljaCBkb2VzIHNldmVyYWwgdGhpbmdzOlxuLy9cbi8vICAqIERldGVjdHMgd2hldGhlciB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyBjYWxsZWQgZGVwZW5kcyBvbiBwcm9wcywgd2hpY2hcbi8vICAgIGlzIHVzZWQgYnkgc2VsZWN0b3JGYWN0b3J5IHRvIGRlY2lkZSBpZiBpdCBzaG91bGQgcmVpbnZva2Ugb24gcHJvcHMgY2hhbmdlcy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCBoYW5kbGVzIG1hcFRvUHJvcHMgaWYgcmV0dXJucyBhbm90aGVyIGZ1bmN0aW9uLCBhbmQgdHJlYXRzIHRoYXRcbi8vICAgIG5ldyBmdW5jdGlvbiBhcyB0aGUgdHJ1ZSBtYXBUb1Byb3BzIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIHZlcmlmaWVzIHRoZSBmaXJzdCByZXN1bHQgaXMgYSBwbGFpbiBvYmplY3QsIGluIG9yZGVyIHRvIHdhcm5cbi8vICAgIHRoZSBkZXZlbG9wZXIgdGhhdCB0aGVpciBtYXBUb1Byb3BzIGZ1bmN0aW9uIGlzIG5vdCByZXR1cm5pbmcgYSB2YWxpZCByZXN1bHQuXG4vL1xuXG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChwcm9wcywgZGlzcGxheU5hbWUsIG1ldGhvZE5hbWUpO1xuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJveHk7XG4gIH07XG59IiwiaW1wb3J0IHsgYmluZEFjdGlvbkNyZWF0b3JzIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgd3JhcE1hcFRvUHJvcHNDb25zdGFudCwgd3JhcE1hcFRvUHJvcHNGdW5jIH0gZnJvbSAnLi93cmFwTWFwVG9Qcm9wcyc7XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24obWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcERpc3BhdGNoVG9Qcm9wcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiAhbWFwRGlzcGF0Y2hUb1Byb3BzID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoXG4gICAgfTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0KG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gbWFwRGlzcGF0Y2hUb1Byb3BzICYmIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdvYmplY3QnID8gd3JhcE1hcFRvUHJvcHNDb25zdGFudChmdW5jdGlvbiAoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3JzKG1hcERpc3BhdGNoVG9Qcm9wcywgZGlzcGF0Y2gpO1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbiwgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZywgd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzT2JqZWN0XTsiLCJpbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNGdW5jdGlvbihtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwU3RhdGVUb1Byb3BzLCAnbWFwU3RhdGVUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcFN0YXRlVG9Qcm9wc0lzTWlzc2luZyhtYXBTdGF0ZVRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBTdGF0ZVRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nXTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvd25Qcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRNZXJnZVByb3BzUHJveHkoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lLFxuICAgICAgICBwdXJlID0gX3JlZi5wdXJlLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZi5hcmVNZXJnZWRQcm9wc0VxdWFsO1xuICAgIHZhciBoYXNSdW5PbmNlID0gZmFsc2U7XG4gICAgdmFyIG1lcmdlZFByb3BzO1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZVByb3BzUHJveHkoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgICAgIHZhciBuZXh0TWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcblxuICAgICAgaWYgKGhhc1J1bk9uY2UpIHtcbiAgICAgICAgaWYgKCFwdXJlIHx8ICFhcmVNZXJnZWRQcm9wc0VxdWFsKG5leHRNZXJnZWRQcm9wcywgbWVyZ2VkUHJvcHMpKSBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhhc1J1bk9uY2UgPSB0cnVlO1xuICAgICAgICBtZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KG1lcmdlZFByb3BzLCBkaXNwbGF5TmFtZSwgJ21lcmdlUHJvcHMnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgIH07XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtZXJnZVByb3BzID09PSAnZnVuY3Rpb24nID8gd3JhcE1lcmdlUHJvcHNGdW5jKG1lcmdlUHJvcHMpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkKG1lcmdlUHJvcHMpIHtcbiAgcmV0dXJuICFtZXJnZVByb3BzID8gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgfSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBkZWZhdWx0IFt3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24sIHdoZW5NZXJnZVByb3BzSXNPbWl0dGVkXTsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB2ZXJpZnlTdWJzZWxlY3RvcnMgZnJvbSAnLi92ZXJpZnlTdWJzZWxlY3RvcnMnO1xuZXhwb3J0IGZ1bmN0aW9uIGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3Ioc3RhdGUsIG93blByb3BzKSB7XG4gICAgcmV0dXJuIG1lcmdlUHJvcHMobWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyksIG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpLCBvd25Qcm9wcyk7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBfcmVmKSB7XG4gIHZhciBhcmVTdGF0ZXNFcXVhbCA9IF9yZWYuYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsID0gX3JlZi5hcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsID0gX3JlZi5hcmVTdGF0ZVByb3BzRXF1YWw7XG4gIHZhciBoYXNSdW5BdExlYXN0T25jZSA9IGZhbHNlO1xuICB2YXIgc3RhdGU7XG4gIHZhciBvd25Qcm9wcztcbiAgdmFyIHN0YXRlUHJvcHM7XG4gIHZhciBkaXNwYXRjaFByb3BzO1xuICB2YXIgbWVyZ2VkUHJvcHM7XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmlyc3RDYWxsKGZpcnN0U3RhdGUsIGZpcnN0T3duUHJvcHMpIHtcbiAgICBzdGF0ZSA9IGZpcnN0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBmaXJzdE93blByb3BzO1xuICAgIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICBoYXNSdW5BdExlYXN0T25jZSA9IHRydWU7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpIHtcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgaWYgKG1hcERpc3BhdGNoVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmV3UHJvcHMoKSB7XG4gICAgaWYgKG1hcFN0YXRlVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcykgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1N0YXRlKCkge1xuICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZVByb3BzQ2hhbmdlZCA9ICFhcmVTdGF0ZVByb3BzRXF1YWwobmV4dFN0YXRlUHJvcHMsIHN0YXRlUHJvcHMpO1xuICAgIHN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICBpZiAoc3RhdGVQcm9wc0NoYW5nZWQpIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgdmFyIHByb3BzQ2hhbmdlZCA9ICFhcmVPd25Qcm9wc0VxdWFsKG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHZhciBzdGF0ZUNoYW5nZWQgPSAhYXJlU3RhdGVzRXF1YWwobmV4dFN0YXRlLCBzdGF0ZSk7XG4gICAgc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgb3duUHJvcHMgPSBuZXh0T3duUHJvcHM7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCAmJiBzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wc0FuZE5ld1N0YXRlKCk7XG4gICAgaWYgKHByb3BzQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1Byb3BzKCk7XG4gICAgaWYgKHN0YXRlQ2hhbmdlZCkgcmV0dXJuIGhhbmRsZU5ld1N0YXRlKCk7XG4gICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3IobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIHtcbiAgICByZXR1cm4gaGFzUnVuQXRMZWFzdE9uY2UgPyBoYW5kbGVTdWJzZXF1ZW50Q2FsbHMobmV4dFN0YXRlLCBuZXh0T3duUHJvcHMpIDogaGFuZGxlRmlyc3RDYWxsKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKTtcbiAgfTtcbn0gLy8gVE9ETzogQWRkIG1vcmUgY29tbWVudHNcbi8vIElmIHB1cmUgaXMgdHJ1ZSwgdGhlIHNlbGVjdG9yIHJldHVybmVkIGJ5IHNlbGVjdG9yRmFjdG9yeSB3aWxsIG1lbW9pemUgaXRzIHJlc3VsdHMsXG4vLyBhbGxvd2luZyBjb25uZWN0QWR2YW5jZWQncyBzaG91bGRDb21wb25lbnRVcGRhdGUgdG8gcmV0dXJuIGZhbHNlIGlmIGZpbmFsXG4vLyBwcm9wcyBoYXZlIG5vdCBjaGFuZ2VkLiBJZiBmYWxzZSwgdGhlIHNlbGVjdG9yIHdpbGwgYWx3YXlzIHJldHVybiBhIG5ld1xuLy8gb2JqZWN0IGFuZCBzaG91bGRDb21wb25lbnRVcGRhdGUgd2lsbCBhbHdheXMgcmV0dXJuIHRydWUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkoZGlzcGF0Y2gsIF9yZWYyKSB7XG4gIHZhciBpbml0TWFwU3RhdGVUb1Byb3BzID0gX3JlZjIuaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBfcmVmMi5pbml0TWFwRGlzcGF0Y2hUb1Byb3BzLFxuICAgICAgaW5pdE1lcmdlUHJvcHMgPSBfcmVmMi5pbml0TWVyZ2VQcm9wcyxcbiAgICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiaW5pdE1hcFN0YXRlVG9Qcm9wc1wiLCBcImluaXRNYXBEaXNwYXRjaFRvUHJvcHNcIiwgXCJpbml0TWVyZ2VQcm9wc1wiXSk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJwdXJlXCIsIFwiYXJlU3RhdGVzRXF1YWxcIiwgXCJhcmVPd25Qcm9wc0VxdWFsXCIsIFwiYXJlU3RhdGVQcm9wc0VxdWFsXCIsIFwiYXJlTWVyZ2VkUHJvcHNFcXVhbFwiXSk7XG5cbiAgICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hdGNoKG1hcFN0YXRlVG9Qcm9wcywgbWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgdmFyIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXRjaChtYXBEaXNwYXRjaFRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcywgJ21hcERpc3BhdGNoVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWVyZ2VQcm9wcyA9IG1hdGNoKG1lcmdlUHJvcHMsIG1lcmdlUHJvcHNGYWN0b3JpZXMsICdtZXJnZVByb3BzJyk7XG4gICAgcmV0dXJuIGNvbm5lY3RIT0Moc2VsZWN0b3JGYWN0b3J5LCBfZXh0ZW5kcyh7XG4gICAgICAvLyB1c2VkIGluIGVycm9yIG1lc3NhZ2VzXG4gICAgICBtZXRob2ROYW1lOiAnY29ubmVjdCcsXG4gICAgICAvLyB1c2VkIHRvIGNvbXB1dGUgQ29ubmVjdCdzIGRpc3BsYXlOYW1lIGZyb20gdGhlIHdyYXBwZWQgY29tcG9uZW50J3MgZGlzcGxheU5hbWUuXG4gICAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gXCJDb25uZWN0KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSxcbiAgICAgIC8vIGlmIG1hcFN0YXRlVG9Qcm9wcyBpcyBmYWxzeSwgdGhlIENvbm5lY3QgY29tcG9uZW50IGRvZXNuJ3Qgc3Vic2NyaWJlIHRvIHN0b3JlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpLFxuICAgICAgLy8gcGFzc2VkIHRocm91Z2ggdG8gc2VsZWN0b3JGYWN0b3J5XG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzOiBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wczogaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzOiBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIHB1cmU6IHB1cmUsXG4gICAgICBhcmVTdGF0ZXNFcXVhbDogYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsOiBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsOiBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsOiBhcmVNZXJnZWRQcm9wc0VxdWFsXG4gICAgfSwgZXh0cmFPcHRpb25zKSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovY3JlYXRlQ29ubmVjdCgpOyIsImltcG9ydCB7IHVzZVJlZHVjZXIsIHVzZVJlZiwgdXNlTWVtbywgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG52YXIgcmVmRXF1YWxpdHkgPSBmdW5jdGlvbiByZWZFcXVhbGl0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufTtcblxuZnVuY3Rpb24gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKSB7XG4gIHZhciBfdXNlUmVkdWNlciA9IHVzZVJlZHVjZXIoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIDE7XG4gIH0sIDApLFxuICAgICAgZm9yY2VSZW5kZXIgPSBfdXNlUmVkdWNlclsxXTtcblxuICB2YXIgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9LCBbc3RvcmUsIGNvbnRleHRTdWJdKTtcbiAgdmFyIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgdmFyIGxhdGVzdFNlbGVjdG9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RlZFN0YXRlID0gdXNlUmVmKCk7XG4gIHZhciBzdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgdmFyIHNlbGVjdGVkU3RhdGU7XG5cbiAgdHJ5IHtcbiAgICBpZiAoc2VsZWN0b3IgIT09IGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgfHwgc3RvcmVTdGF0ZSAhPT0gbGF0ZXN0U3RvcmVTdGF0ZS5jdXJyZW50IHx8IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCkge1xuICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZVN0YXRlKTsgLy8gZW5zdXJlIGxhdGVzdCBzZWxlY3RlZCBzdGF0ZSBpcyByZXVzZWQgc28gdGhhdCBhIGN1c3RvbSBlcXVhbGl0eSBmdW5jdGlvbiBjYW4gcmVzdWx0IGluIGlkZW50aWNhbCByZWZlcmVuY2VzXG5cbiAgICAgIGlmIChsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPT09IHVuZGVmaW5lZCB8fCAhZXF1YWxpdHlGbihuZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IHN0b3JlU3RhdGU7XG4gICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gc2VsZWN0ZWRTdGF0ZTtcbiAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gIH0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgX25ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKF9uZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gX25ld1NlbGVjdGVkU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yXCIpO1xuICAgIH1cblxuICAgIHZhciBfdXNlUmVkdXhDb250ZXh0ID0gdXNlUmVkdXhDb250ZXh0KCksXG4gICAgICAgIHN0b3JlID0gX3VzZVJlZHV4Q29udGV4dC5zdG9yZSxcbiAgICAgICAgY29udGV4dFN1YiA9IF91c2VSZWR1eENvbnRleHQuc3Vic2NyaXB0aW9uO1xuXG4gICAgdmFyIHNlbGVjdGVkU3RhdGUgPSB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICAgIHVzZURlYnVnVmFsdWUoc2VsZWN0ZWRTdGF0ZSk7XG4gICAgcmV0dXJuIHNlbGVjdGVkU3RhdGU7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggc3RvcmUncyBzdGF0ZS4gVGhpcyBob29rIHRha2VzIGEgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogYXMgYW4gYXJndW1lbnQuIFRoZSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgc3RvcmUgc3RhdGUuXHJcbiAqXHJcbiAqIFRoaXMgaG9vayB0YWtlcyBhbiBvcHRpb25hbCBlcXVhbGl0eSBjb21wYXJpc29uIGZ1bmN0aW9uIGFzIHRoZSBzZWNvbmQgcGFyYW1ldGVyXHJcbiAqIHRoYXQgYWxsb3dzIHlvdSB0byBjdXN0b21pemUgdGhlIHdheSB0aGUgc2VsZWN0ZWQgc3RhdGUgaXMgY29tcGFyZWQgdG8gZGV0ZXJtaW5lXHJcbiAqIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2VsZWN0b3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb249fSBlcXVhbGl0eUZuIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgZXF1YWxpdHlcclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHNlbGVjdGVkIHN0YXRlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU2VsZWN0b3IgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgY291bnRlciA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLmNvdW50ZXIpXHJcbiAqICAgcmV0dXJuIDxkaXY+e2NvdW50ZXJ9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCB2YXIgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaCxcbiAgICAgICAgZ2V0U3RhdGUgPSBfcmVmLmdldFN0YXRlO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmFBcmd1bWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTtcbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuXG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJpbXBvcnQgUHJvdmlkZXIgZnJvbSAnLi9jb21wb25lbnRzL1Byb3ZpZGVyJztcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCBjb25uZWN0IGZyb20gJy4vY29ubmVjdC9jb25uZWN0JztcbmltcG9ydCB7IHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZURpc3BhdGNoJztcbmltcG9ydCB7IHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVNlbGVjdG9yJztcbmltcG9ydCB7IHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2sgfSBmcm9tICcuL2hvb2tzL3VzZVN0b3JlJztcbmltcG9ydCB7IHNldEJhdGNoIH0gZnJvbSAnLi91dGlscy9iYXRjaCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IFByb3ZpZGVyLCBjb25uZWN0QWR2YW5jZWQsIFJlYWN0UmVkdXhDb250ZXh0LCBjb25uZWN0LCBiYXRjaCwgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vaywgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vaywgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vaywgc2hhbGxvd0VxdWFsIH07IiwiZXhwb3J0IGNvbnN0IE1BUktfQVNfUkVBRCA9IFwiTUFSS19BU19SRUFEXCI7XG5cbmV4cG9ydCBjb25zdCBTRVRfVFlQRV9GSUxURVIgPSBcIlNFVF9UWVBFX0ZJTFRFUlwiO1xuXG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uVHlwZUZpbHRlcnMgPSB7XG4gIERFRkFVTFQ6IFwiREVGQVVMVFwiLFxuICBVUkdFTlQ6IFwiVVJHRU5UXCIsXG59O1xuXG5leHBvcnQgY29uc3QgRkVUQ0hfTk9USUZJQ0FUSU9OU19TVUNDRVNTID0gXCJGRVRDSF9OT1RJRklDQVRJT05TX1NVQ0NFU1NcIjtcblxuZXhwb3J0IGNvbnN0IFNFVF9MT0FESU5HX1NUQVRFID0gXCJTRVRfTE9BRElOR19TVEFURVwiO1xuIiwiaW1wb3J0IHtcbiAgTUFSS19BU19SRUFELFxuICBTRVRfVFlQRV9GSUxURVIsXG4gIFNFVF9MT0FESU5HX1NUQVRFLFxuICBGRVRDSF9OT1RJRklDQVRJT05TX1NVQ0NFU1MsXG59IGZyb20gXCIuL25vdGlmaWNhdGlvbkFjdGlvblR5cGVzXCI7XG5cbmltcG9ydCBcIm5vZGUtZmV0Y2hcIjtcblxuZXhwb3J0IGNvbnN0IG1hcmtBc0FyZWFkID0gKGluZGV4KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTUFSS19BU19SRUFELFxuICAgIGluZGV4LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJvdW5kTWFya0FzQXJlYWQgPSAoaW5kZXgpID0+IGRpc3BhdGNoKG1hcmtBc0FyZWFkKGluZGV4KSk7XG5cbmV4cG9ydCBjb25zdCBzZXROb3RpZmljYXRpb25GaWx0ZXIgPSAoZmlsdGVyKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX1RZUEVfRklMVEVSLFxuICAgIGZpbHRlcixcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBib3VuZFNldE5vdGlmaWNhdGlvbkZpbHRlciA9IChmaWx0ZXIpID0+XG4gIGRpc3BhdGNoKHNldE5vdGlmaWNhdGlvbkZpbHRlcihmaWx0ZXIpKTtcblxuZXhwb3J0IGNvbnN0IHNldExvYWRpbmdTdGF0ZSA9IChsb2FkaW5nKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0VUX0xPQURJTkdfU1RBVEUsXG4gICAgbG9hZGluZyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXROb3RpZmljYXRpb25zID0gKGRhdGEpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRVRDSF9OT1RJRklDQVRJT05TX1NVQ0NFU1MsXG4gICAgZGF0YSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaE5vdGlmaWNhdGlvbnMgPSAoKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gpID0+IHtcbiAgICBkaXNwYXRjaChzZXRMb2FkaW5nU3RhdGUodHJ1ZSkpO1xuICAgIHJldHVybiBmZXRjaChcIi4vbm90aWZpY2F0aW9ucy5qc29uXCIpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGRpc3BhdGNoKHNldE5vdGlmaWNhdGlvbnMoZGF0YSkpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge30pXG4gICAgICAuZmluYWxseSgoKSA9PiBkaXNwYXRjaChzZXRMb2FkaW5nU3RhdGUoZmFsc2UpKSk7XG4gIH07XG59O1xuIiwiZnVuY3Rpb24gZGVmYXVsdEVxdWFsaXR5Q2hlY2soYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZnVuY3Rpb24gYXJlQXJndW1lbnRzU2hhbGxvd2x5RXF1YWwoZXF1YWxpdHlDaGVjaywgcHJldiwgbmV4dCkge1xuICBpZiAocHJldiA9PT0gbnVsbCB8fCBuZXh0ID09PSBudWxsIHx8IHByZXYubGVuZ3RoICE9PSBuZXh0Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG4gIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE1lbW9pemUoZnVuYykge1xuICB2YXIgZXF1YWxpdHlDaGVjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdEVxdWFsaXR5Q2hlY2s7XG5cbiAgdmFyIGxhc3RBcmdzID0gbnVsbDtcbiAgdmFyIGxhc3RSZXN1bHQgPSBudWxsO1xuICAvLyB3ZSByZWZlcmVuY2UgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIHRoZW0gZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWFyZUFyZ3VtZW50c1NoYWxsb3dseUVxdWFsKGVxdWFsaXR5Q2hlY2ssIGxhc3RBcmdzLCBhcmd1bWVudHMpKSB7XG4gICAgICAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuICAgICAgbGFzdFJlc3VsdCA9IGZ1bmMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZWxlY3RvciBjcmVhdG9ycyBleHBlY3QgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsICcgKyAoJ2luc3RlYWQgcmVjZWl2ZWQgdGhlIGZvbGxvd2luZyB0eXBlczogWycgKyBkZXBlbmRlbmN5VHlwZXMgKyAnXScpKTtcbiAgfVxuXG4gIHJldHVybiBkZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckNyZWF0b3IobWVtb2l6ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVtb2l6ZU9wdGlvbnMgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWVtb2l6ZU9wdGlvbnNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGZ1bmNzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0YXRpb25zID0gMDtcbiAgICB2YXIgcmVzdWx0RnVuYyA9IGZ1bmNzLnBvcCgpO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuXG4gICAgdmFyIG1lbW9pemVkUmVzdWx0RnVuYyA9IG1lbW9pemUuYXBwbHkodW5kZWZpbmVkLCBbZnVuY3Rpb24gKCkge1xuICAgICAgcmVjb21wdXRhdGlvbnMrKztcbiAgICAgIC8vIGFwcGx5IGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChtZW1vaXplT3B0aW9ucykpO1xuXG4gICAgLy8gSWYgYSBzZWxlY3RvciBpcyBjYWxsZWQgd2l0aCB0aGUgZXhhY3Qgc2FtZSBhcmd1bWVudHMgd2UgZG9uJ3QgbmVlZCB0byB0cmF2ZXJzZSBvdXIgZGVwZW5kZW5jaWVzIGFnYWluLlxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIHBhcmFtcy5wdXNoKGRlcGVuZGVuY2llc1tpXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGZvciBwZXJmb3JtYW5jZS5cbiAgICAgIHJldHVybiBtZW1vaXplZFJlc3VsdEZ1bmMuYXBwbHkobnVsbCwgcGFyYW1zKTtcbiAgICB9KTtcblxuICAgIHNlbGVjdG9yLnJlc3VsdEZ1bmMgPSByZXN1bHRGdW5jO1xuICAgIHNlbGVjdG9yLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICBzZWxlY3Rvci5yZWNvbXB1dGF0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZWNvbXB1dGF0aW9ucztcbiAgICB9O1xuICAgIHNlbGVjdG9yLnJlc2V0UmVjb21wdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIHNlbGVjdG9yO1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGNyZWF0ZVNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKGRlZmF1bHRNZW1vaXplKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvcihzZWxlY3RvcnMpIHtcbiAgdmFyIHNlbGVjdG9yQ3JlYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY3JlYXRlU2VsZWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvcnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgZXhwZWN0cyBmaXJzdCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QgJyArICgnd2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgJyArIHR5cGVvZiBzZWxlY3RvcnMpKTtcbiAgfVxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHJldHVybiBzZWxlY3RvckNyZWF0b3Iob2JqZWN0S2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBzZWxlY3RvcnNba2V5XTtcbiAgfSksIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIHZhbHVlcyA9IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xuXG5leHBvcnQgY29uc3QgZmlsdGVyVHlwZVNlbGVjdGVkID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiBzdGF0ZS5nZXQoXCJmaWx0ZXJcIik7XG59O1xuZXhwb3J0IGNvbnN0IGdldE5vdGlmaWNhdGlvbnMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHN0YXRlLmdldChcIm5vdGlmaWNhdGlvbnNcIik7XG59O1xuXG5jb25zdCBnZXROb3RpZmljYXRpb25zU2VsZWN0b3IgPSAoc3RhdGUpID0+IHN0YXRlLm5vdGlmaWNhdGlvbnM7XG5cbmV4cG9ydCBjb25zdCBnZXRVbnJlYWROb3RpZmljYXRpb25zQnlUeXBlID0gY3JlYXRlU2VsZWN0b3IoXG4gIGdldE5vdGlmaWNhdGlvbnNTZWxlY3RvcixcbiAgKG5vdGlmaWNhdGlvbnMpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IG5vdGlmaWNhdGlvbnMuZ2V0KFwibWVzc2FnZXNcIik7XG4gICAgY29uc3QgZmlsdGVyID0gbm90aWZpY2F0aW9ucy5nZXQoXCJmaWx0ZXJcIik7XG5cbiAgICBpZiAobWVzc2FnZXMpIHtcbiAgICAgIGxldCBmaWx0ZXJlZDtcblxuICAgICAgaWYgKGZpbHRlciA9PT0gXCJVUkdFTlRcIikge1xuICAgICAgICBmaWx0ZXJlZCA9IG1lc3NhZ2VzXG4gICAgICAgICAgLnZhbHVlU2VxKClcbiAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgKHZhbHVlKSA9PlxuICAgICAgICAgICAgICB2YWx1ZS5nZXQoXCJpc1JlYWRcIikgPT09IGZhbHNlICYmIHZhbHVlLmdldChcInR5cGVcIikgPT09IFwidXJnZW50XCJcbiAgICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlsdGVyZWQgPSBtZXNzYWdlc1xuICAgICAgICAgIC52YWx1ZVNlcSgpXG4gICAgICAgICAgLmZpbHRlcigodmFsdWUpID0+IHZhbHVlLmdldChcImlzUmVhZFwiKSA9PT0gZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9XG4pO1xuIiwiaW1wb3J0IHN0cmluZ0hhc2ggZnJvbSAnc3RyaW5nLWhhc2gnO1xuaW1wb3J0IGFzYXAgZnJvbSAnYXNhcCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZXIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSByZXR1cm4gQXJyYXkuZnJvbShpdGVyKTtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbi8qIEBmbG93ICovXG4vKiA6OlxudHlwZSBPYmplY3RNYXAgPSB7IFtpZDpzdHJpbmddOiBhbnkgfTtcbiovXG5cbnZhciBVUFBFUkNBU0VfUkUgPSAvKFtBLVpdKS9nO1xuXG52YXIgVVBQRVJDQVNFX1JFX1RPX0tFQkFCID0gZnVuY3Rpb24gVVBQRVJDQVNFX1JFX1RPX0tFQkFCKG1hdGNoXG4vKiA6IHN0cmluZyAqL1xuKSB7XG4gIHJldHVybiAoXG4gICAgLyogOiBzdHJpbmcgKi9cbiAgICBcIi1cIi5jb25jYXQobWF0Y2gudG9Mb3dlckNhc2UoKSlcbiAgKTtcbn07XG5cbnZhciBrZWJhYmlmeVN0eWxlTmFtZSA9IGZ1bmN0aW9uIGtlYmFiaWZ5U3R5bGVOYW1lKHN0cmluZ1xuLyogOiBzdHJpbmcgKi9cbilcbi8qIDogc3RyaW5nICovXG57XG4gIHZhciByZXN1bHQgPSBzdHJpbmcucmVwbGFjZShVUFBFUkNBU0VfUkUsIFVQUEVSQ0FTRV9SRV9UT19LRUJBQik7XG5cbiAgaWYgKHJlc3VsdFswXSA9PT0gJ20nICYmIHJlc3VsdFsxXSA9PT0gJ3MnICYmIHJlc3VsdFsyXSA9PT0gJy0nKSB7XG4gICAgcmV0dXJuIFwiLVwiLmNvbmNhdChyZXN1bHQpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqIFRha2VuIGZyb20gUmVhY3QncyBDU1NQcm9wZXJ0eS5qc1xuICovXG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGdyaWRSb3c6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiB0cnVlLFxuICBmbG9vZE9wYWNpdHk6IHRydWUsXG4gIHN0b3BPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VEYXNoYXJyYXk6IHRydWUsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IHRydWUsXG4gIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gIHN0cm9rZU9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZVdpZHRoOiB0cnVlXG59O1xuLyoqXG4gKiBUYWtlbiBmcm9tIFJlYWN0J3MgQ1NTUHJvcGVydHkuanNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4S2V5KHByZWZpeCwga2V5KSB7XG4gIHJldHVybiBwcmVmaXggKyBrZXkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXkuc3Vic3RyaW5nKDEpO1xufVxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqIFRha2VuIGZyb20gUmVhY3QncyBDU1NQcm9wZXJ0eS5qc1xuICovXG5cblxudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTsgLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG4vLyBUYWtlbiBmcm9tIFJlYWN0J3MgQ1NTUHJvcGVydHkuanNcblxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG52YXIgc3RyaW5naWZ5VmFsdWUgPSBmdW5jdGlvbiBzdHJpbmdpZnlWYWx1ZShrZXlcbi8qIDogc3RyaW5nICovXG4sIHByb3Bcbi8qIDogYW55ICovXG4pXG4vKiA6IHN0cmluZyAqL1xue1xuICBpZiAodHlwZW9mIHByb3AgPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAoaXNVbml0bGVzc051bWJlcltrZXldKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwcm9wICsgXCJweFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJycgKyBwcm9wO1xuICB9XG59O1xudmFyIHN0cmluZ2lmeUFuZEltcG9ydGFudGlmeVZhbHVlID0gZnVuY3Rpb24gc3RyaW5naWZ5QW5kSW1wb3J0YW50aWZ5VmFsdWUoa2V5XG4vKiA6IHN0cmluZyAqL1xuLCBwcm9wXG4vKiA6IGFueSAqL1xuKSB7XG4gIHJldHVybiAoXG4gICAgLyogOiBzdHJpbmcgKi9cbiAgICBpbXBvcnRhbnRpZnkoc3RyaW5naWZ5VmFsdWUoa2V5LCBwcm9wKSlcbiAgKTtcbn07IC8vIFR1cm4gYSBzdHJpbmcgaW50byBhIGhhc2ggc3RyaW5nIG9mIGJhc2UtMzYgdmFsdWVzICh1c2luZyBsZXR0ZXJzIGFuZCBudW1iZXJzKVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cbnZhciBoYXNoU3RyaW5nID0gZnVuY3Rpb24gaGFzaFN0cmluZyhzdHJpbmdcbi8qIDogc3RyaW5nICovXG4sIGtleVxuLyogOiA/c3RyaW5nICovXG4pIHtcbiAgcmV0dXJuIChcbiAgICAvKiBzdHJpbmcgKi9cbiAgICBzdHJpbmdIYXNoKHN0cmluZykudG9TdHJpbmcoMzYpXG4gICk7XG59OyAvLyBIYXNoIGEgamF2YXNjcmlwdCBvYmplY3QgdXNpbmcgSlNPTi5zdHJpbmdpZnkuIFRoaXMgaXMgdmVyeSBmYXN0LCBhYm91dCAzXG4vLyBtaWNyb3NlY29uZHMgb24gbXkgY29tcHV0ZXIgZm9yIGEgc2FtcGxlIG9iamVjdDpcbi8vIGh0dHA6Ly9qc3BlcmYuY29tL3Rlc3QtaGFzaGZudjMyYS1oYXNoLzVcbi8vXG4vLyBOb3RlIHRoYXQgdGhpcyB1c2VzIEpTT04uc3RyaW5naWZ5IHRvIHN0cmluZ2lmeSB0aGUgb2JqZWN0cyBzbyBpbiBvcmRlciBmb3Jcbi8vIHRoaXMgdG8gcHJvZHVjZSBjb25zaXN0ZW50IGhhc2hlcyBicm93c2VycyBuZWVkIHRvIGhhdmUgYSBjb25zaXN0ZW50XG4vLyBvcmRlcmluZyBvZiBvYmplY3RzLiBCZW4gQWxwZXJ0IHNheXMgdGhhdCBGYWNlYm9vayBkZXBlbmRzIG9uIHRoaXMsIHNvIHdlXG4vLyBjYW4gcHJvYmFibHkgZGVwZW5kIG9uIHRoaXMgdG9vLlxuXG52YXIgaGFzaE9iamVjdCA9IGZ1bmN0aW9uIGhhc2hPYmplY3Qob2JqZWN0XG4vKiA6IE9iamVjdE1hcCAqL1xuKSB7XG4gIHJldHVybiAoXG4gICAgLyogOiBzdHJpbmcgKi9cbiAgICBoYXNoU3RyaW5nKEpTT04uc3RyaW5naWZ5KG9iamVjdCkpXG4gICk7XG59OyAvLyBHaXZlbiBhIHNpbmdsZSBzdHlsZSB2YWx1ZSBzdHJpbmcgbGlrZSB0aGUgXCJiXCIgZnJvbSBcImE6IGI7XCIsIGFkZHMgIWltcG9ydGFudFxuLy8gdG8gZ2VuZXJhdGUgXCJiICFpbXBvcnRhbnRcIi5cblxudmFyIGltcG9ydGFudGlmeSA9IGZ1bmN0aW9uIGltcG9ydGFudGlmeShzdHJpbmdcbi8qIDogc3RyaW5nICovXG4pIHtcbiAgcmV0dXJuIChcbiAgICAvKiA6IHN0cmluZyAqL1xuICAgIC8vIEJyYWNrZXQgc3RyaW5nIGNoYXJhY3RlciBhY2Nlc3MgaXMgdmVyeSBmYXN0LCBhbmQgaW4gdGhlIGRlZmF1bHQgY2FzZSB3ZVxuICAgIC8vIG5vcm1hbGx5IGRvbid0IGV4cGVjdCB0aGVyZSB0byBiZSBcIiFpbXBvcnRhbnRcIiBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmdcbiAgICAvLyBzbyB3ZSBjYW4gdXNlIHRoaXMgc2ltcGxlIGNoZWNrIHRvIHRha2UgYW4gb3B0aW1pemVkIHBhdGguIElmIHRoZXJlXG4gICAgLy8gaGFwcGVucyB0byBiZSBhIFwiIVwiIGluIHRoaXMgcG9zaXRpb24sIHdlIGZvbGxvdyB1cCB3aXRoIGEgbW9yZSB0aG9yb3VnaFxuICAgIC8vIGNoZWNrLlxuICAgIHN0cmluZ1tzdHJpbmcubGVuZ3RoIC0gMTBdID09PSAnIScgJiYgc3RyaW5nLnNsaWNlKC0xMSkgPT09ICcgIWltcG9ydGFudCcgPyBzdHJpbmcgOiBcIlwiLmNvbmNhdChzdHJpbmcsIFwiICFpbXBvcnRhbnRcIilcbiAgKTtcbn07XG5cbi8qIEBmbG93ICovXG52YXIgTUFQX0VYSVNUUyA9IHR5cGVvZiBNYXAgIT09ICd1bmRlZmluZWQnO1xuXG52YXIgT3JkZXJlZEVsZW1lbnRzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyogOjpcbiAgZWxlbWVudHM6IHtbc3RyaW5nXTogYW55fTtcbiAga2V5T3JkZXI6IHN0cmluZ1tdO1xuICAqL1xuICBmdW5jdGlvbiBPcmRlcmVkRWxlbWVudHMoKSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IHt9O1xuICAgIHRoaXMua2V5T3JkZXIgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBPcmRlcmVkRWxlbWVudHMucHJvdG90eXBlO1xuXG4gIF9wcm90by5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja1xuICAvKiA6IChzdHJpbmcsIGFueSkgPT4gdm9pZCAqL1xuICApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMua2V5T3JkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vICh2YWx1ZSwga2V5KSB0byBtYXRjaCBNYXAncyBBUElcbiAgICAgIGNhbGxiYWNrKHRoaXMuZWxlbWVudHNbdGhpcy5rZXlPcmRlcltpXV0sIHRoaXMua2V5T3JkZXJbaV0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0ID0gZnVuY3Rpb24gc2V0KGtleVxuICAvKiA6IHN0cmluZyAqL1xuICAsIHZhbHVlXG4gIC8qIDogYW55ICovXG4gICwgc2hvdWxkUmVvcmRlclxuICAvKiA6ID9ib29sZWFuICovXG4gICkge1xuICAgIGlmICghdGhpcy5lbGVtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICB0aGlzLmtleU9yZGVyLnB1c2goa2V5KTtcbiAgICB9IGVsc2UgaWYgKHNob3VsZFJlb3JkZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IHRoaXMua2V5T3JkZXIuaW5kZXhPZihrZXkpO1xuICAgICAgdGhpcy5rZXlPcmRlci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5rZXlPcmRlci5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHZhbHVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChNQVBfRVhJU1RTICYmIHZhbHVlIGluc3RhbmNlb2YgTWFwIHx8IHZhbHVlIGluc3RhbmNlb2YgT3JkZXJlZEVsZW1lbnRzKSB7XG4gICAgICAvLyBXZSBoYXZlIGZvdW5kIGEgbmVzdGVkIE1hcCwgc28gd2UgbmVlZCB0byByZWN1cnNlIHNvIHRoYXQgYWxsXG4gICAgICAvLyBvZiB0aGUgbmVzdGVkIG9iamVjdHMgYW5kIE1hcHMgYXJlIG1lcmdlZCBwcm9wZXJseS5cbiAgICAgIHZhciBuZXN0ZWQgPSB0aGlzLmVsZW1lbnRzLmhhc093blByb3BlcnR5KGtleSkgPyB0aGlzLmVsZW1lbnRzW2tleV0gOiBuZXcgT3JkZXJlZEVsZW1lbnRzKCk7XG4gICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIG5lc3RlZC5zZXQoa2V5LCB2YWx1ZSwgc2hvdWxkUmVvcmRlcik7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IG5lc3RlZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gV2UgaGF2ZSBmb3VuZCBhIG5lc3RlZCBvYmplY3QsIHNvIHdlIG5lZWQgdG8gcmVjdXJzZSBzbyB0aGF0IGFsbFxuICAgICAgLy8gb2YgdGhlIG5lc3RlZCBvYmplY3RzIGFuZCBNYXBzIGFyZSBtZXJnZWQgcHJvcGVybHkuXG4gICAgICB2YXIgX25lc3RlZCA9IHRoaXMuZWxlbWVudHMuaGFzT3duUHJvcGVydHkoa2V5KSA/IHRoaXMuZWxlbWVudHNba2V5XSA6IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcblxuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBfbmVzdGVkLnNldChrZXlzW2ldLCB2YWx1ZVtrZXlzW2ldXSwgc2hvdWxkUmVvcmRlcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IF9uZXN0ZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50c1trZXldID0gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChrZXlcbiAgLyogOiBzdHJpbmcgKi9cbiAgKVxuICAvKiA6IGFueSAqL1xuICB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHNba2V5XTtcbiAgfTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGtleVxuICAvKiA6IHN0cmluZyAqL1xuICApXG4gIC8qIDogYm9vbGVhbiAqL1xuICB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHMuaGFzT3duUHJvcGVydHkoa2V5KTtcbiAgfTtcblxuICBfcHJvdG8uYWRkU3R5bGVUeXBlID0gZnVuY3Rpb24gYWRkU3R5bGVUeXBlKHN0eWxlVHlwZVxuICAvKiA6IGFueSAqL1xuICApXG4gIC8qIDogdm9pZCAqL1xuICB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmIChNQVBfRVhJU1RTICYmIHN0eWxlVHlwZSBpbnN0YW5jZW9mIE1hcCB8fCBzdHlsZVR5cGUgaW5zdGFuY2VvZiBPcmRlcmVkRWxlbWVudHMpIHtcbiAgICAgIHN0eWxlVHlwZS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIF90aGlzLnNldChrZXksIHZhbHVlLCB0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlVHlwZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLnNldChrZXlzW2ldLCBzdHlsZVR5cGVba2V5c1tpXV0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gT3JkZXJlZEVsZW1lbnRzO1xufSgpO1xuXG5mdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7XG5cdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHguZGVmYXVsdCA6IHg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG5mdW5jdGlvbiBnZXRDanNFeHBvcnRGcm9tTmFtZXNwYWNlIChuKSB7XG5cdHJldHVybiBuICYmIG4uZGVmYXVsdCB8fCBuO1xufVxuXG52YXIgY2FwaXRhbGl6ZVN0cmluZ18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FwaXRhbGl6ZVN0cmluZztcbmZ1bmN0aW9uIGNhcGl0YWxpemVTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG59KTtcblxudW53cmFwRXhwb3J0cyhjYXBpdGFsaXplU3RyaW5nXzEpO1xuXG52YXIgcHJlZml4UHJvcGVydHlfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHByZWZpeFByb3BlcnR5O1xuXG5cblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoY2FwaXRhbGl6ZVN0cmluZ18xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gcHJlZml4UHJvcGVydHkocHJlZml4UHJvcGVydGllcywgcHJvcGVydHksIHN0eWxlKSB7XG4gIGlmIChwcmVmaXhQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHZhciBuZXdTdHlsZSA9IHt9O1xuICAgIHZhciByZXF1aXJlZFByZWZpeGVzID0gcHJlZml4UHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgdmFyIGNhcGl0YWxpemVkUHJvcGVydHkgPSAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHN0eWxlKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzdHlsZVByb3BlcnR5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChzdHlsZVByb3BlcnR5ID09PSBwcm9wZXJ0eSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlcXVpcmVkUHJlZml4ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBuZXdTdHlsZVtyZXF1aXJlZFByZWZpeGVzW2pdICsgY2FwaXRhbGl6ZWRQcm9wZXJ0eV0gPSBzdHlsZVtwcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld1N0eWxlW3N0eWxlUHJvcGVydHldID0gc3R5bGVbc3R5bGVQcm9wZXJ0eV07XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHlsZTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG59KTtcblxudW53cmFwRXhwb3J0cyhwcmVmaXhQcm9wZXJ0eV8xKTtcblxudmFyIHByZWZpeFZhbHVlXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhWYWx1ZTtcbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gcGx1Z2luc1tpXShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBtZXRhRGF0YSk7XG5cbiAgICAvLyB3ZSBjYW4gc3RvcCBwcm9jZXNzaW5nIGlmIGEgdmFsdWUgaXMgcmV0dXJuZWRcbiAgICAvLyBhcyBhbGwgcGx1Z2luIGNyaXRlcmlhIGFyZSB1bmlxdWVcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cbn0pO1xuXG51bndyYXBFeHBvcnRzKHByZWZpeFZhbHVlXzEpO1xuXG52YXIgYWRkTmV3VmFsdWVzT25seV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTmV3VmFsdWVzT25seTtcbmZ1bmN0aW9uIGFkZElmTmV3KGxpc3QsIHZhbHVlKSB7XG4gIGlmIChsaXN0LmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGxpc3QucHVzaCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkTmV3VmFsdWVzT25seShsaXN0LCB2YWx1ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlcyk7XG4gIH1cbn1cbn0pO1xuXG51bndyYXBFeHBvcnRzKGFkZE5ld1ZhbHVlc09ubHlfMSk7XG5cbnZhciBpc09iamVjdF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNPYmplY3Q7XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxufSk7XG5cbnVud3JhcEV4cG9ydHMoaXNPYmplY3RfMSk7XG5cbnZhciBjcmVhdGVQcmVmaXhlcl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlUHJlZml4ZXI7XG5cblxuXG52YXIgX3ByZWZpeFByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocHJlZml4UHJvcGVydHlfMSk7XG5cblxuXG52YXIgX3ByZWZpeFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocHJlZml4VmFsdWVfMSk7XG5cblxuXG52YXIgX2FkZE5ld1ZhbHVlc09ubHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChhZGROZXdWYWx1ZXNPbmx5XzEpO1xuXG5cblxudmFyIF9pc09iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGlzT2JqZWN0XzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjcmVhdGVQcmVmaXhlcihfcmVmKSB7XG4gIHZhciBwcmVmaXhNYXAgPSBfcmVmLnByZWZpeE1hcCxcbiAgICAgIHBsdWdpbnMgPSBfcmVmLnBsdWdpbnM7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHByZWZpeChzdHlsZSkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHN0eWxlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eV07XG5cbiAgICAgIC8vIGhhbmRsZSBuZXN0ZWQgb2JqZWN0c1xuICAgICAgaWYgKCgwLCBfaXNPYmplY3QyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBwcmVmaXgodmFsdWUpO1xuICAgICAgICAvLyBoYW5kbGUgYXJyYXkgdmFsdWVzXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhciBjb21iaW5lZFZhbHVlID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlW2ldLCBzdHlsZSwgcHJlZml4TWFwKTtcbiAgICAgICAgICAoMCwgX2FkZE5ld1ZhbHVlc09ubHkyLmRlZmF1bHQpKGNvbWJpbmVkVmFsdWUsIHByb2Nlc3NlZFZhbHVlIHx8IHZhbHVlW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG9ubHkgbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCB3YXMgdG91Y2hlZFxuICAgICAgICAvLyBieSBhbnkgcGx1Z2luIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgbXV0YXRpb25zXG4gICAgICAgIGlmIChjb21iaW5lZFZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSBjb21iaW5lZFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3Byb2Nlc3NlZFZhbHVlID0gKDAsIF9wcmVmaXhWYWx1ZTIuZGVmYXVsdCkocGx1Z2lucywgcHJvcGVydHksIHZhbHVlLCBzdHlsZSwgcHJlZml4TWFwKTtcblxuICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICBpZiAoX3Byb2Nlc3NlZFZhbHVlKSB7XG4gICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gX3Byb2Nlc3NlZFZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGUgPSAoMCwgX3ByZWZpeFByb3BlcnR5Mi5kZWZhdWx0KShwcmVmaXhNYXAsIHByb3BlcnR5LCBzdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9O1xufVxufSk7XG5cbnZhciBjcmVhdGVQcmVmaXhlciA9IHVud3JhcEV4cG9ydHMoY3JlYXRlUHJlZml4ZXJfMSk7XG5cbnZhciBiYWNrZ3JvdW5kQ2xpcF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYmFja2dyb3VuZENsaXA7XG5cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9iYWNrZ3JvdW5kLWNsaXAjQnJvd3Nlcl9jb21wYXRpYmlsaXR5XG5mdW5jdGlvbiBiYWNrZ3JvdW5kQ2xpcChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09ICd0ZXh0Jykge1xuICAgIHJldHVybiBbJy13ZWJraXQtdGV4dCcsICd0ZXh0J107XG4gIH1cbn1cbn0pO1xuXG52YXIgYmFja2dyb3VuZENsaXAgPSB1bndyYXBFeHBvcnRzKGJhY2tncm91bmRDbGlwXzEpO1xuXG52YXIgaXNQcmVmaXhlZFZhbHVlXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnVud3JhcEV4cG9ydHMoaXNQcmVmaXhlZFZhbHVlXzEpO1xuXG52YXIgY2FsY18xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FsYztcblxuXG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaXNQcmVmaXhlZFZhbHVlXzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuZnVuY3Rpb24gY2FsYyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignY2FsYygnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvY2FsY1xcKC9nLCBwcmVmaXggKyAnY2FsYygnKTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBjYWxjID0gdW53cmFwRXhwb3J0cyhjYWxjXzEpO1xuXG52YXIgY3Jvc3NGYWRlXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcm9zc0ZhZGU7XG5cblxuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGlzUHJlZml4ZWRWYWx1ZV8xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y3Jvc3MtZmFkZVxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGNyb3NzRmFkZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignY3Jvc3MtZmFkZSgnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvY3Jvc3MtZmFkZVxcKC9nLCBwcmVmaXggKyAnY3Jvc3MtZmFkZSgnKTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBjcm9zc0ZhZGUgPSB1bndyYXBFeHBvcnRzKGNyb3NzRmFkZV8xKTtcblxudmFyIGN1cnNvcl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Vyc29yO1xudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHZhbHVlcyA9IHtcbiAgJ3pvb20taW4nOiB0cnVlLFxuICAnem9vbS1vdXQnOiB0cnVlLFxuICBncmFiOiB0cnVlLFxuICBncmFiYmluZzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gY3Vyc29yKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdjdXJzb3InICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBjdXJzb3IgPSB1bndyYXBFeHBvcnRzKGN1cnNvcl8xKTtcblxudmFyIGZpbHRlcl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmlsdGVyO1xuXG5cblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc1ByZWZpeGVkVmFsdWVfMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtZmlsdGVyLWZ1bmN0aW9uXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJyddO1xuZnVuY3Rpb24gZmlsdGVyKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZS5pbmRleE9mKCdmaWx0ZXIoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2ZpbHRlclxcKC9nLCBwcmVmaXggKyAnZmlsdGVyKCcpO1xuICAgIH0pO1xuICB9XG59XG59KTtcblxudmFyIGZpbHRlciA9IHVud3JhcEV4cG9ydHMoZmlsdGVyXzEpO1xuXG52YXIgZmxleF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleDtcbnZhciB2YWx1ZXMgPSB7XG4gIGZsZXg6IFsnLXdlYmtpdC1ib3gnLCAnLW1vei1ib3gnLCAnLW1zLWZsZXhib3gnLCAnLXdlYmtpdC1mbGV4JywgJ2ZsZXgnXSxcbiAgJ2lubGluZS1mbGV4JzogWyctd2Via2l0LWlubGluZS1ib3gnLCAnLW1vei1pbmxpbmUtYm94JywgJy1tcy1pbmxpbmUtZmxleGJveCcsICctd2Via2l0LWlubGluZS1mbGV4JywgJ2lubGluZS1mbGV4J11cbn07XG5cbmZ1bmN0aW9uIGZsZXgocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVzW3ZhbHVlXTtcbiAgfVxufVxufSk7XG5cbnZhciBmbGV4ID0gdW53cmFwRXhwb3J0cyhmbGV4XzEpO1xuXG52YXIgZmxleGJveElFXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94SUU7XG52YXIgYWx0ZXJuYXRpdmVWYWx1ZXMgPSB7XG4gICdzcGFjZS1hcm91bmQnOiAnZGlzdHJpYnV0ZScsXG4gICdzcGFjZS1iZXR3ZWVuJzogJ2p1c3RpZnknLFxuICAnZmxleC1zdGFydCc6ICdzdGFydCcsXG4gICdmbGV4LWVuZCc6ICdlbmQnXG59O1xudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIGFsaWduQ29udGVudDogJ21zRmxleExpbmVQYWNrJyxcbiAgYWxpZ25TZWxmOiAnbXNGbGV4SXRlbUFsaWduJyxcbiAgYWxpZ25JdGVtczogJ21zRmxleEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdtc0ZsZXhQYWNrJyxcbiAgb3JkZXI6ICdtc0ZsZXhPcmRlcicsXG4gIGZsZXhHcm93OiAnbXNGbGV4UG9zaXRpdmUnLFxuICBmbGV4U2hyaW5rOiAnbXNGbGV4TmVnYXRpdmUnLFxuICBmbGV4QmFzaXM6ICdtc0ZsZXhQcmVmZXJyZWRTaXplJ1xuICAvLyBGdWxsIGV4cGFuZGVkIHN5bnRheCBpcyBmbGV4LWdyb3cgfCBmbGV4LXNocmluayB8IGZsZXgtYmFzaXMuXG59O3ZhciBmbGV4U2hvcnRoYW5kTWFwcGluZ3MgPSB7XG4gIGF1dG86ICcxIDEgYXV0bycsXG4gIGluaGVyaXQ6ICdpbmhlcml0JyxcbiAgaW5pdGlhbDogJzAgMSBhdXRvJyxcbiAgbm9uZTogJzAgMCBhdXRvJyxcbiAgdW5zZXQ6ICd1bnNldCdcbn07XG52YXIgaXNVbml0bGVzc051bWJlciA9IC9eXFxkKyhcXC5cXGQrKT8kLztcblxuZnVuY3Rpb24gZmxleGJveElFKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhbHRlcm5hdGl2ZVByb3BzLCBwcm9wZXJ0eSkpIHtcbiAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XV0gPSBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWU7XG4gIH1cbiAgaWYgKHByb3BlcnR5ID09PSAnZmxleCcpIHtcbiAgICAvLyBGb3IgY2VydGFpbiB2YWx1ZXMgd2UgY2FuIGRvIHN0cmFpZ2h0IG1hcHBpbmdzIGJhc2VkIG9uIHRoZSBzcGVjXG4gICAgLy8gZm9yIHRoZSBleHBhbnNpb25zLlxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZmxleFNob3J0aGFuZE1hcHBpbmdzLCB2YWx1ZSkpIHtcbiAgICAgIHN0eWxlLm1zRmxleCA9IGZsZXhTaG9ydGhhbmRNYXBwaW5nc1t2YWx1ZV07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEhlcmUgd2UgaGF2ZSBubyBkaXJlY3QgbWFwcGluZywgc28gd2UgZmF2b3IgbG9va2luZyBmb3IgYVxuICAgIC8vIHVuaXRsZXNzIHBvc2l0aXZlIG51bWJlciBhcyB0aGF0IHdpbGwgYmUgdGhlIG1vc3QgY29tbW9uIHVzZS1jYXNlLlxuICAgIGlmIChpc1VuaXRsZXNzTnVtYmVyLnRlc3QodmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0ZsZXggPSB2YWx1ZSArICcgMSAwJSc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVGhlIG5leHQgdGhpbmcgd2UgY2FuIGxvb2sgZm9yIGlzIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2YWx1ZXMuXG4gICAgdmFyIGZsZXhWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvXFxzLyk7XG4gICAgLy8gSWYgd2Ugb25seSBoYXZlIGEgc2luZ2xlIHZhbHVlIHRoYXQgd2Fzbid0IGEgcG9zaXRpdmUgdW5pdGxlc3NcbiAgICAvLyBvciBhIHByZS1tYXBwZWQgdmFsdWUsIHRoZW4gd2UgY2FuIGFzc3VtZSBpdCBpcyBhIHVuaXQgdmFsdWUuXG4gICAgc3dpdGNoIChmbGV4VmFsdWVzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBzdHlsZS5tc0ZsZXggPSAnMSAxICcgKyB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAyOlxuICAgICAgICAvLyBJZiB3ZSBoYXZlIDIgdW5pdHMsIHRoZW4gd2UgZXhwZWN0IHRoYXQgdGhlIGZpcnN0IHdpbGxcbiAgICAgICAgLy8gYWx3YXlzIGJlIGEgdW5pdGxlc3MgbnVtYmVyIGFuZCByZXByZXNlbnRzIGZsZXgtZ3Jvdy5cbiAgICAgICAgLy8gVGhlIHNlY29uZCB1bml0IHdpbGwgcmVwcmVzZW50IGZsZXgtc2hyaW5rIGZvciBhIHVuaXRsZXNzXG4gICAgICAgIC8vIHZhbHVlLCBvciBmbGV4LWJhc2lzIG90aGVyd2lzZS5cbiAgICAgICAgaWYgKGlzVW5pdGxlc3NOdW1iZXIudGVzdChmbGV4VmFsdWVzWzFdKSkge1xuICAgICAgICAgIHN0eWxlLm1zRmxleCA9IGZsZXhWYWx1ZXNbMF0gKyAnICcgKyBmbGV4VmFsdWVzWzFdICsgJyAwJSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUubXNGbGV4ID0gZmxleFZhbHVlc1swXSArICcgMSAnICsgZmxleFZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzdHlsZS5tc0ZsZXggPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbn0pO1xuXG52YXIgZmxleGJveElFID0gdW53cmFwRXhwb3J0cyhmbGV4Ym94SUVfMSk7XG5cbnZhciBmbGV4Ym94T2xkXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94T2xkO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZSdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkl0ZW1zOiAnV2Via2l0Qm94QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ1dlYmtpdEJveFBhY2snLFxuICBmbGV4V3JhcDogJ1dlYmtpdEJveExpbmVzJyxcbiAgZmxleEdyb3c6ICdXZWJraXRCb3hGbGV4J1xufTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXhEaXJlY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAodmFsdWUuaW5kZXhPZigncmV2ZXJzZScpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdyZXZlcnNlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ25vcm1hbCc7XG4gICAgfVxuICB9XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxufVxufSk7XG5cbnZhciBmbGV4Ym94T2xkID0gdW53cmFwRXhwb3J0cyhmbGV4Ym94T2xkXzEpO1xuXG52YXIgZ3JhZGllbnRfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGdyYWRpZW50O1xuXG5cblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc1ByZWZpeGVkVmFsdWVfMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciB2YWx1ZXMgPSAvbGluZWFyLWdyYWRpZW50fHJhZGlhbC1ncmFkaWVudHxyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50fHJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQvZ2k7XG5cbmZ1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZXMudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHZhbHVlcywgZnVuY3Rpb24gKGdyYWQpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIGdyYWQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBncmFkaWVudCA9IHVud3JhcEV4cG9ydHMoZ3JhZGllbnRfMSk7XG5cbnZhciBncmlkXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ3JpZDtcbmZ1bmN0aW9uIGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpO1xufVxuXG52YXIgYWxpZ25tZW50VmFsdWVzID0gWydjZW50ZXInLCAnZW5kJywgJ3N0YXJ0JywgJ3N0cmV0Y2gnXTtcblxudmFyIGRpc3BsYXlWYWx1ZXMgPSB7XG4gICdpbmxpbmUtZ3JpZCc6IFsnLW1zLWlubGluZS1ncmlkJywgJ2lubGluZS1ncmlkJ10sXG4gIGdyaWQ6IFsnLW1zLWdyaWQnLCAnZ3JpZCddXG59O1xuXG52YXIgcHJvcGVydHlDb252ZXJ0ZXJzID0ge1xuICBhbGlnblNlbGY6IGZ1bmN0aW9uIGFsaWduU2VsZih2YWx1ZSwgc3R5bGUpIHtcbiAgICBpZiAoYWxpZ25tZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID4gLTEpIHtcbiAgICAgIHN0eWxlLm1zR3JpZFJvd0FsaWduID0gdmFsdWU7XG4gICAgfVxuICB9LFxuXG4gIGdyaWRDb2x1bW46IGZ1bmN0aW9uIGdyaWRDb2x1bW4odmFsdWUsIHN0eWxlKSB7XG4gICAgaWYgKGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHN0eWxlLm1zR3JpZENvbHVtbiA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3ZhbHVlJHNwbGl0JG1hcCA9IHZhbHVlLnNwbGl0KCcvJykubWFwKGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gK3Bvc2l0aW9uO1xuICAgICAgfSksXG4gICAgICAgICAgX3ZhbHVlJHNwbGl0JG1hcDIgPSBfc2xpY2VkVG9BcnJheShfdmFsdWUkc3BsaXQkbWFwLCAyKSxcbiAgICAgICAgICBzdGFydCA9IF92YWx1ZSRzcGxpdCRtYXAyWzBdLFxuICAgICAgICAgIGVuZCA9IF92YWx1ZSRzcGxpdCRtYXAyWzFdO1xuXG4gICAgICBwcm9wZXJ0eUNvbnZlcnRlcnMuZ3JpZENvbHVtblN0YXJ0KHN0YXJ0LCBzdHlsZSk7XG4gICAgICBwcm9wZXJ0eUNvbnZlcnRlcnMuZ3JpZENvbHVtbkVuZChlbmQsIHN0eWxlKTtcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZENvbHVtbkVuZDogZnVuY3Rpb24gZ3JpZENvbHVtbkVuZCh2YWx1ZSwgc3R5bGUpIHtcbiAgICB2YXIgbXNHcmlkQ29sdW1uID0gc3R5bGUubXNHcmlkQ29sdW1uO1xuXG4gICAgaWYgKGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkgJiYgaXNTaW1wbGVQb3NpdGlvblZhbHVlKG1zR3JpZENvbHVtbikpIHtcbiAgICAgIHN0eWxlLm1zR3JpZENvbHVtblNwYW4gPSB2YWx1ZSAtIG1zR3JpZENvbHVtbjtcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZENvbHVtblN0YXJ0OiBmdW5jdGlvbiBncmlkQ29sdW1uU3RhcnQodmFsdWUsIHN0eWxlKSB7XG4gICAgaWYgKGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHN0eWxlLm1zR3JpZENvbHVtbiA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICBncmlkUm93OiBmdW5jdGlvbiBncmlkUm93KHZhbHVlLCBzdHlsZSkge1xuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0dyaWRSb3cgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF92YWx1ZSRzcGxpdCRtYXAzID0gdmFsdWUuc3BsaXQoJy8nKS5tYXAoZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiArcG9zaXRpb247XG4gICAgICB9KSxcbiAgICAgICAgICBfdmFsdWUkc3BsaXQkbWFwNCA9IF9zbGljZWRUb0FycmF5KF92YWx1ZSRzcGxpdCRtYXAzLCAyKSxcbiAgICAgICAgICBzdGFydCA9IF92YWx1ZSRzcGxpdCRtYXA0WzBdLFxuICAgICAgICAgIGVuZCA9IF92YWx1ZSRzcGxpdCRtYXA0WzFdO1xuXG4gICAgICBwcm9wZXJ0eUNvbnZlcnRlcnMuZ3JpZFJvd1N0YXJ0KHN0YXJ0LCBzdHlsZSk7XG4gICAgICBwcm9wZXJ0eUNvbnZlcnRlcnMuZ3JpZFJvd0VuZChlbmQsIHN0eWxlKTtcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZFJvd0VuZDogZnVuY3Rpb24gZ3JpZFJvd0VuZCh2YWx1ZSwgc3R5bGUpIHtcbiAgICB2YXIgbXNHcmlkUm93ID0gc3R5bGUubXNHcmlkUm93O1xuXG4gICAgaWYgKGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkgJiYgaXNTaW1wbGVQb3NpdGlvblZhbHVlKG1zR3JpZFJvdykpIHtcbiAgICAgIHN0eWxlLm1zR3JpZFJvd1NwYW4gPSB2YWx1ZSAtIG1zR3JpZFJvdztcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZFJvd1N0YXJ0OiBmdW5jdGlvbiBncmlkUm93U3RhcnQodmFsdWUsIHN0eWxlKSB7XG4gICAgaWYgKGlzU2ltcGxlUG9zaXRpb25WYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIHN0eWxlLm1zR3JpZFJvdyA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICBncmlkVGVtcGxhdGVDb2x1bW5zOiBmdW5jdGlvbiBncmlkVGVtcGxhdGVDb2x1bW5zKHZhbHVlLCBzdHlsZSkge1xuICAgIHN0eWxlLm1zR3JpZENvbHVtbnMgPSB2YWx1ZTtcbiAgfSxcblxuICBncmlkVGVtcGxhdGVSb3dzOiBmdW5jdGlvbiBncmlkVGVtcGxhdGVSb3dzKHZhbHVlLCBzdHlsZSkge1xuICAgIHN0eWxlLm1zR3JpZFJvd3MgPSB2YWx1ZTtcbiAgfSxcblxuICBqdXN0aWZ5U2VsZjogZnVuY3Rpb24ganVzdGlmeVNlbGYodmFsdWUsIHN0eWxlKSB7XG4gICAgaWYgKGFsaWdubWVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XG4gICAgICBzdHlsZS5tc0dyaWRDb2x1bW5BbGlnbiA9IHZhbHVlO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ3JpZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2Rpc3BsYXknICYmIHZhbHVlIGluIGRpc3BsYXlWYWx1ZXMpIHtcbiAgICByZXR1cm4gZGlzcGxheVZhbHVlc1t2YWx1ZV07XG4gIH1cblxuICBpZiAocHJvcGVydHkgaW4gcHJvcGVydHlDb252ZXJ0ZXJzKSB7XG4gICAgdmFyIHByb3BlcnR5Q29udmVydGVyID0gcHJvcGVydHlDb252ZXJ0ZXJzW3Byb3BlcnR5XTtcbiAgICBwcm9wZXJ0eUNvbnZlcnRlcih2YWx1ZSwgc3R5bGUpO1xuICB9XG59XG59KTtcblxudmFyIGdyaWQgPSB1bndyYXBFeHBvcnRzKGdyaWRfMSk7XG5cbnZhciBpbWFnZVNldF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaW1hZ2VTZXQ7XG5cblxuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGlzUHJlZml4ZWRWYWx1ZV8xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PWNzcy1pbWFnZS1zZXRcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnJ107XG5mdW5jdGlvbiBpbWFnZVNldChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignaW1hZ2Utc2V0KCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9pbWFnZS1zZXRcXCgvZywgcHJlZml4ICsgJ2ltYWdlLXNldCgnKTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBpbWFnZVNldCA9IHVud3JhcEV4cG9ydHMoaW1hZ2VTZXRfMSk7XG5cbnZhciBsb2dpY2FsXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBsb2dpY2FsO1xudmFyIGFsdGVybmF0aXZlUHJvcHMgPSB7XG4gIG1hcmdpbkJsb2NrU3RhcnQ6IFsnV2Via2l0TWFyZ2luQmVmb3JlJ10sXG4gIG1hcmdpbkJsb2NrRW5kOiBbJ1dlYmtpdE1hcmdpbkFmdGVyJ10sXG4gIG1hcmdpbklubGluZVN0YXJ0OiBbJ1dlYmtpdE1hcmdpblN0YXJ0JywgJ01vek1hcmdpblN0YXJ0J10sXG4gIG1hcmdpbklubGluZUVuZDogWydXZWJraXRNYXJnaW5FbmQnLCAnTW96TWFyZ2luRW5kJ10sXG4gIHBhZGRpbmdCbG9ja1N0YXJ0OiBbJ1dlYmtpdFBhZGRpbmdCZWZvcmUnXSxcbiAgcGFkZGluZ0Jsb2NrRW5kOiBbJ1dlYmtpdFBhZGRpbmdBZnRlciddLFxuICBwYWRkaW5nSW5saW5lU3RhcnQ6IFsnV2Via2l0UGFkZGluZ1N0YXJ0JywgJ01velBhZGRpbmdTdGFydCddLFxuICBwYWRkaW5nSW5saW5lRW5kOiBbJ1dlYmtpdFBhZGRpbmdFbmQnLCAnTW96UGFkZGluZ0VuZCddLFxuICBib3JkZXJCbG9ja1N0YXJ0OiBbJ1dlYmtpdEJvcmRlckJlZm9yZSddLFxuICBib3JkZXJCbG9ja1N0YXJ0Q29sb3I6IFsnV2Via2l0Qm9yZGVyQmVmb3JlQ29sb3InXSxcbiAgYm9yZGVyQmxvY2tTdGFydFN0eWxlOiBbJ1dlYmtpdEJvcmRlckJlZm9yZVN0eWxlJ10sXG4gIGJvcmRlckJsb2NrU3RhcnRXaWR0aDogWydXZWJraXRCb3JkZXJCZWZvcmVXaWR0aCddLFxuICBib3JkZXJCbG9ja0VuZDogWydXZWJraXRCb3JkZXJBZnRlciddLFxuICBib3JkZXJCbG9ja0VuZENvbG9yOiBbJ1dlYmtpdEJvcmRlckFmdGVyQ29sb3InXSxcbiAgYm9yZGVyQmxvY2tFbmRTdHlsZTogWydXZWJraXRCb3JkZXJBZnRlclN0eWxlJ10sXG4gIGJvcmRlckJsb2NrRW5kV2lkdGg6IFsnV2Via2l0Qm9yZGVyQWZ0ZXJXaWR0aCddLFxuICBib3JkZXJJbmxpbmVTdGFydDogWydXZWJraXRCb3JkZXJTdGFydCcsICdNb3pCb3JkZXJTdGFydCddLFxuICBib3JkZXJJbmxpbmVTdGFydENvbG9yOiBbJ1dlYmtpdEJvcmRlclN0YXJ0Q29sb3InLCAnTW96Qm9yZGVyU3RhcnRDb2xvciddLFxuICBib3JkZXJJbmxpbmVTdGFydFN0eWxlOiBbJ1dlYmtpdEJvcmRlclN0YXJ0U3R5bGUnLCAnTW96Qm9yZGVyU3RhcnRTdHlsZSddLFxuICBib3JkZXJJbmxpbmVTdGFydFdpZHRoOiBbJ1dlYmtpdEJvcmRlclN0YXJ0V2lkdGgnLCAnTW96Qm9yZGVyU3RhcnRXaWR0aCddLFxuICBib3JkZXJJbmxpbmVFbmQ6IFsnV2Via2l0Qm9yZGVyRW5kJywgJ01vekJvcmRlckVuZCddLFxuICBib3JkZXJJbmxpbmVFbmRDb2xvcjogWydXZWJraXRCb3JkZXJFbmRDb2xvcicsICdNb3pCb3JkZXJFbmRDb2xvciddLFxuICBib3JkZXJJbmxpbmVFbmRTdHlsZTogWydXZWJraXRCb3JkZXJFbmRTdHlsZScsICdNb3pCb3JkZXJFbmRTdHlsZSddLFxuICBib3JkZXJJbmxpbmVFbmRXaWR0aDogWydXZWJraXRCb3JkZXJFbmRXaWR0aCcsICdNb3pCb3JkZXJFbmRXaWR0aCddXG59O1xuXG5mdW5jdGlvbiBsb2dpY2FsKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhbHRlcm5hdGl2ZVByb3BzLCBwcm9wZXJ0eSkpIHtcbiAgICB2YXIgYWx0ZXJuYXRpdmVQcm9wTGlzdCA9IGFsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhbHRlcm5hdGl2ZVByb3BMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BMaXN0W2ldXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxufVxufSk7XG5cbnZhciBsb2dpY2FsID0gdW53cmFwRXhwb3J0cyhsb2dpY2FsXzEpO1xuXG52YXIgcG9zaXRpb25fMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHBvc2l0aW9uO1xuZnVuY3Rpb24gcG9zaXRpb24ocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3Bvc2l0aW9uJyAmJiB2YWx1ZSA9PT0gJ3N0aWNreScpIHtcbiAgICByZXR1cm4gWyctd2Via2l0LXN0aWNreScsICdzdGlja3knXTtcbiAgfVxufVxufSk7XG5cbnZhciBwb3NpdGlvbiA9IHVud3JhcEV4cG9ydHMocG9zaXRpb25fMSk7XG5cbnZhciBzaXppbmdfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtYXhIZWlnaHQ6IHRydWUsXG4gIG1heFdpZHRoOiB0cnVlLFxuICB3aWR0aDogdHJ1ZSxcbiAgaGVpZ2h0OiB0cnVlLFxuICBjb2x1bW5XaWR0aDogdHJ1ZSxcbiAgbWluV2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZVxufTtcbnZhciB2YWx1ZXMgPSB7XG4gICdtaW4tY29udGVudCc6IHRydWUsXG4gICdtYXgtY29udGVudCc6IHRydWUsXG4gICdmaWxsLWF2YWlsYWJsZSc6IHRydWUsXG4gICdmaXQtY29udGVudCc6IHRydWUsXG4gICdjb250YWluLWZsb2F0cyc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBzaXppbmcgPSB1bndyYXBFeHBvcnRzKHNpemluZ18xKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdmFyLCBwcmVmZXItdGVtcGxhdGUgKi9cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gL1tBLVpdL2c7XG52YXIgbXNQYXR0ZXJuID0gL15tcy0vO1xudmFyIGNhY2hlID0ge307XG5cbmZ1bmN0aW9uIHRvSHlwaGVuTG93ZXIobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKG5hbWUpIHtcbiAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgcmV0dXJuIGNhY2hlW25hbWVdXG4gIH1cblxuICB2YXIgaE5hbWUgPSBuYW1lLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgdG9IeXBoZW5Mb3dlcik7XG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lJDEgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGRlZmF1bHQ6IGh5cGhlbmF0ZVN0eWxlTmFtZVxufSk7XG5cbnZhciBfaHlwaGVuYXRlU3R5bGVOYW1lID0gZ2V0Q2pzRXhwb3J0RnJvbU5hbWVzcGFjZShoeXBoZW5hdGVTdHlsZU5hbWUkMSk7XG5cbnZhciBoeXBoZW5hdGVQcm9wZXJ0eV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaHlwaGVuYXRlUHJvcGVydHk7XG5cblxuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyLmRlZmF1bHQpKHByb3BlcnR5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnVud3JhcEV4cG9ydHMoaHlwaGVuYXRlUHJvcGVydHlfMSk7XG5cbnZhciB0cmFuc2l0aW9uXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG5cblxudmFyIF9oeXBoZW5hdGVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGh5cGhlbmF0ZVByb3BlcnR5XzEpO1xuXG5cblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc1ByZWZpeGVkVmFsdWVfMSk7XG5cblxuXG52YXIgX2NhcGl0YWxpemVTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChjYXBpdGFsaXplU3RyaW5nXzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogdHJ1ZSxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uOiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIE1velRyYW5zaXRpb246IHRydWUsXG4gIE1velRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZVxufTtcblxuXG52YXIgcHJlZml4TWFwcGluZyA9IHtcbiAgV2Via2l0OiAnLXdlYmtpdC0nLFxuICBNb3o6ICctbW96LScsXG4gIG1zOiAnLW1zLSdcbn07XG5cbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHZhbHVlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICBpZiAoKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIG9ubHkgc3BsaXQgbXVsdGkgdmFsdWVzLCBub3QgY3ViaWMgYmV6aWVyc1xuICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbXVsdGlwbGVWYWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgc2luZ2xlVmFsdWUgPSBtdWx0aXBsZVZhbHVlc1tpXTtcbiAgICB2YXIgdmFsdWVzID0gW3NpbmdsZVZhbHVlXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAgICAgdmFyIGRhc2hDYXNlUHJvcGVydHkgPSAoMCwgX2h5cGhlbmF0ZVByb3BlcnR5Mi5kZWZhdWx0KShwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChzaW5nbGVWYWx1ZS5pbmRleE9mKGRhc2hDYXNlUHJvcGVydHkpID4gLTEgJiYgZGFzaENhc2VQcm9wZXJ0eSAhPT0gJ29yZGVyJykge1xuICAgICAgICB2YXIgcHJlZml4ZXMgPSBwcm9wZXJ0eVByZWZpeE1hcFtwcm9wZXJ0eV07XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBwTGVuID0gcHJlZml4ZXMubGVuZ3RoOyBqIDwgcExlbjsgKytqKSB7XG4gICAgICAgICAgLy8gam9pbiBhbGwgcHJlZml4ZXMgYW5kIGNyZWF0ZSBhIG5ldyB2YWx1ZVxuICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KHNpbmdsZVZhbHVlLnJlcGxhY2UoZGFzaENhc2VQcm9wZXJ0eSwgcHJlZml4TWFwcGluZ1twcmVmaXhlc1tqXV0gKyBkYXNoQ2FzZVByb3BlcnR5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtdWx0aXBsZVZhbHVlc1tpXSA9IHZhbHVlcy5qb2luKCcsJyk7XG4gIH1cblxuICByZXR1cm4gbXVsdGlwbGVWYWx1ZXMuam9pbignLCcpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByb3BlcnR5UHJlZml4TWFwKSB7XG4gIC8vIGFsc28gY2hlY2sgZm9yIGFscmVhZHkgcHJlZml4ZWQgdHJhbnNpdGlvbnNcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgb3V0cHV0VmFsdWUgPSBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApO1xuICAgIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBhbHJlYWR5IHByZWZpeGVkXG4gICAgdmFyIHdlYmtpdE91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8tbW96LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ1dlYmtpdCcpID4gLTEpIHtcbiAgICAgIHJldHVybiB3ZWJraXRPdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIG1vek91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8td2Via2l0LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ01veicpID4gLTEpIHtcbiAgICAgIHJldHVybiBtb3pPdXRwdXQ7XG4gICAgfVxuXG4gICAgc3R5bGVbJ1dlYmtpdCcgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSB3ZWJraXRPdXRwdXQ7XG4gICAgc3R5bGVbJ01veicgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSBtb3pPdXRwdXQ7XG4gICAgcmV0dXJuIG91dHB1dFZhbHVlO1xuICB9XG59XG59KTtcblxudmFyIHRyYW5zaXRpb24gPSB1bndyYXBFeHBvcnRzKHRyYW5zaXRpb25fMSk7XG5cbnZhciB3ID0gW1wiV2Via2l0XCJdO1xudmFyIG0gPSBbXCJNb3pcIl07XG52YXIgbXMgPSBbXCJtc1wiXTtcbnZhciB3bSA9IFtcIldlYmtpdFwiLCBcIk1velwiXTtcbnZhciB3bXMgPSBbXCJXZWJraXRcIiwgXCJtc1wiXTtcbnZhciB3bW1zID0gW1wiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIl07XG52YXIgc3RhdGljRGF0YSA9IHtcbiAgcGx1Z2luczogW2JhY2tncm91bmRDbGlwLCBjYWxjLCBjcm9zc0ZhZGUsIGN1cnNvciwgZmlsdGVyLCBmbGV4LCBmbGV4Ym94SUUsIGZsZXhib3hPbGQsIGdyYWRpZW50LCBncmlkLCBpbWFnZVNldCwgbG9naWNhbCwgcG9zaXRpb24sIHNpemluZywgdHJhbnNpdGlvbl0sXG4gIHByZWZpeE1hcDoge1xuICAgIFwidHJhbnNmb3JtXCI6IHdtcyxcbiAgICBcInRyYW5zZm9ybU9yaWdpblwiOiB3bXMsXG4gICAgXCJ0cmFuc2Zvcm1PcmlnaW5YXCI6IHdtcyxcbiAgICBcInRyYW5zZm9ybU9yaWdpbllcIjogd21zLFxuICAgIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IHcsXG4gICAgXCJwZXJzcGVjdGl2ZVwiOiB3LFxuICAgIFwicGVyc3BlY3RpdmVPcmlnaW5cIjogdyxcbiAgICBcInRyYW5zZm9ybVN0eWxlXCI6IHcsXG4gICAgXCJ0cmFuc2Zvcm1PcmlnaW5aXCI6IHcsXG4gICAgXCJhbmltYXRpb25cIjogdyxcbiAgICBcImFuaW1hdGlvbkRlbGF5XCI6IHcsXG4gICAgXCJhbmltYXRpb25EaXJlY3Rpb25cIjogdyxcbiAgICBcImFuaW1hdGlvbkZpbGxNb2RlXCI6IHcsXG4gICAgXCJhbmltYXRpb25EdXJhdGlvblwiOiB3LFxuICAgIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdyxcbiAgICBcImFuaW1hdGlvbk5hbWVcIjogdyxcbiAgICBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiB3LFxuICAgIFwiYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25cIjogdyxcbiAgICBcImFwcGVhcmFuY2VcIjogd20sXG4gICAgXCJ1c2VyU2VsZWN0XCI6IHdtbXMsXG4gICAgXCJmb250S2VybmluZ1wiOiB3LFxuICAgIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogdyxcbiAgICBcInRleHRFbXBoYXNpc1wiOiB3LFxuICAgIFwidGV4dEVtcGhhc2lzU3R5bGVcIjogdyxcbiAgICBcInRleHRFbXBoYXNpc0NvbG9yXCI6IHcsXG4gICAgXCJib3hEZWNvcmF0aW9uQnJlYWtcIjogdyxcbiAgICBcImNsaXBQYXRoXCI6IHcsXG4gICAgXCJtYXNrSW1hZ2VcIjogdyxcbiAgICBcIm1hc2tNb2RlXCI6IHcsXG4gICAgXCJtYXNrUmVwZWF0XCI6IHcsXG4gICAgXCJtYXNrUG9zaXRpb25cIjogdyxcbiAgICBcIm1hc2tDbGlwXCI6IHcsXG4gICAgXCJtYXNrT3JpZ2luXCI6IHcsXG4gICAgXCJtYXNrU2l6ZVwiOiB3LFxuICAgIFwibWFza0NvbXBvc2l0ZVwiOiB3LFxuICAgIFwibWFza1wiOiB3LFxuICAgIFwibWFza0JvcmRlclNvdXJjZVwiOiB3LFxuICAgIFwibWFza0JvcmRlck1vZGVcIjogdyxcbiAgICBcIm1hc2tCb3JkZXJTbGljZVwiOiB3LFxuICAgIFwibWFza0JvcmRlcldpZHRoXCI6IHcsXG4gICAgXCJtYXNrQm9yZGVyT3V0c2V0XCI6IHcsXG4gICAgXCJtYXNrQm9yZGVyUmVwZWF0XCI6IHcsXG4gICAgXCJtYXNrQm9yZGVyXCI6IHcsXG4gICAgXCJtYXNrVHlwZVwiOiB3LFxuICAgIFwidGV4dERlY29yYXRpb25TdHlsZVwiOiB3bSxcbiAgICBcInRleHREZWNvcmF0aW9uU2tpcFwiOiB3bSxcbiAgICBcInRleHREZWNvcmF0aW9uTGluZVwiOiB3bSxcbiAgICBcInRleHREZWNvcmF0aW9uQ29sb3JcIjogd20sXG4gICAgXCJmaWx0ZXJcIjogdyxcbiAgICBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogd20sXG4gICAgXCJicmVha0FmdGVyXCI6IHdtbXMsXG4gICAgXCJicmVha0JlZm9yZVwiOiB3bW1zLFxuICAgIFwiYnJlYWtJbnNpZGVcIjogd21tcyxcbiAgICBcImNvbHVtbkNvdW50XCI6IHdtLFxuICAgIFwiY29sdW1uRmlsbFwiOiB3bSxcbiAgICBcImNvbHVtbkdhcFwiOiB3bSxcbiAgICBcImNvbHVtblJ1bGVcIjogd20sXG4gICAgXCJjb2x1bW5SdWxlQ29sb3JcIjogd20sXG4gICAgXCJjb2x1bW5SdWxlU3R5bGVcIjogd20sXG4gICAgXCJjb2x1bW5SdWxlV2lkdGhcIjogd20sXG4gICAgXCJjb2x1bW5zXCI6IHdtLFxuICAgIFwiY29sdW1uU3BhblwiOiB3bSxcbiAgICBcImNvbHVtbldpZHRoXCI6IHdtLFxuICAgIFwid3JpdGluZ01vZGVcIjogd21zLFxuICAgIFwiZmxleFwiOiB3bXMsXG4gICAgXCJmbGV4QmFzaXNcIjogdyxcbiAgICBcImZsZXhEaXJlY3Rpb25cIjogd21zLFxuICAgIFwiZmxleEdyb3dcIjogdyxcbiAgICBcImZsZXhGbG93XCI6IHdtcyxcbiAgICBcImZsZXhTaHJpbmtcIjogdyxcbiAgICBcImZsZXhXcmFwXCI6IHdtcyxcbiAgICBcImFsaWduQ29udGVudFwiOiB3LFxuICAgIFwiYWxpZ25JdGVtc1wiOiB3LFxuICAgIFwiYWxpZ25TZWxmXCI6IHcsXG4gICAgXCJqdXN0aWZ5Q29udGVudFwiOiB3LFxuICAgIFwib3JkZXJcIjogdyxcbiAgICBcInRyYW5zaXRpb25EZWxheVwiOiB3LFxuICAgIFwidHJhbnNpdGlvbkR1cmF0aW9uXCI6IHcsXG4gICAgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogdyxcbiAgICBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiOiB3LFxuICAgIFwiYmFja2Ryb3BGaWx0ZXJcIjogdyxcbiAgICBcInNjcm9sbFNuYXBUeXBlXCI6IHdtcyxcbiAgICBcInNjcm9sbFNuYXBQb2ludHNYXCI6IHdtcyxcbiAgICBcInNjcm9sbFNuYXBQb2ludHNZXCI6IHdtcyxcbiAgICBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiB3bXMsXG4gICAgXCJzY3JvbGxTbmFwQ29vcmRpbmF0ZVwiOiB3bXMsXG4gICAgXCJzaGFwZUltYWdlVGhyZXNob2xkXCI6IHcsXG4gICAgXCJzaGFwZUltYWdlTWFyZ2luXCI6IHcsXG4gICAgXCJzaGFwZUltYWdlT3V0c2lkZVwiOiB3LFxuICAgIFwiaHlwaGVuc1wiOiB3bW1zLFxuICAgIFwiZmxvd0ludG9cIjogd21zLFxuICAgIFwiZmxvd0Zyb21cIjogd21zLFxuICAgIFwicmVnaW9uRnJhZ21lbnRcIjogd21zLFxuICAgIFwidGV4dE9yaWVudGF0aW9uXCI6IHcsXG4gICAgXCJib3hTaXppbmdcIjogbSxcbiAgICBcInRleHRBbGlnbkxhc3RcIjogbSxcbiAgICBcInRhYlNpemVcIjogbSxcbiAgICBcIndyYXBGbG93XCI6IG1zLFxuICAgIFwid3JhcFRocm91Z2hcIjogbXMsXG4gICAgXCJ3cmFwTWFyZ2luXCI6IG1zLFxuICAgIFwidG91Y2hBY3Rpb25cIjogbXMsXG4gICAgXCJ0ZXh0U2l6ZUFkanVzdFwiOiB3bXMsXG4gICAgXCJib3JkZXJJbWFnZVwiOiB3LFxuICAgIFwiYm9yZGVySW1hZ2VPdXRzZXRcIjogdyxcbiAgICBcImJvcmRlckltYWdlUmVwZWF0XCI6IHcsXG4gICAgXCJib3JkZXJJbWFnZVNsaWNlXCI6IHcsXG4gICAgXCJib3JkZXJJbWFnZVNvdXJjZVwiOiB3LFxuICAgIFwiYm9yZGVySW1hZ2VXaWR0aFwiOiB3XG4gIH1cbn07XG5cbnZhciBwcmVmaXhBbGwgPSBjcmVhdGVQcmVmaXhlcihzdGF0aWNEYXRhKTtcbi8qIDo6XG5pbXBvcnQgdHlwZSB7IFNoZWV0RGVmaW5pdGlvbiB9IGZyb20gJy4vaW5kZXguanMnO1xudHlwZSBTdHJpbmdIYW5kbGVycyA9IHsgW2lkOnN0cmluZ106IEZ1bmN0aW9uIH07XG50eXBlIFNlbGVjdG9yQ2FsbGJhY2sgPSAoc2VsZWN0b3I6IHN0cmluZykgPT4gc3RyaW5nW107XG5leHBvcnQgdHlwZSBTZWxlY3RvckhhbmRsZXIgPSAoXG4gICAgc2VsZWN0b3I6IHN0cmluZyxcbiAgICBiYXNlU2VsZWN0b3I6IHN0cmluZyxcbiAgICBjYWxsYmFjazogU2VsZWN0b3JDYWxsYmFja1xuKSA9PiBzdHJpbmdbXSB8IHN0cmluZyB8IG51bGw7XG4qL1xuXG4vKipcbiAqIGBzZWxlY3RvckhhbmRsZXJzYCBhcmUgZnVuY3Rpb25zIHdoaWNoIGhhbmRsZSBzcGVjaWFsIHNlbGVjdG9ycyB3aGljaCBhY3RcbiAqIGRpZmZlcmVudGx5IHRoYW4gbm9ybWFsIHN0eWxlIGRlZmluaXRpb25zLiBUaGVzZSBmdW5jdGlvbnMgbG9vayBhdCB0aGVcbiAqIGN1cnJlbnQgc2VsZWN0b3IgYW5kIGNhbiBnZW5lcmF0ZSBDU1MgZm9yIHRoZSBzdHlsZXMgaW4gdGhlaXIgc3VidHJlZSBieVxuICogY2FsbGluZyB0aGUgY2FsbGJhY2sgd2l0aCBhIG5ldyBzZWxlY3Rvci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBnZW5lcmF0aW5nIHN0eWxlcyB3aXRoIGEgYmFzZSBzZWxlY3RvciBvZiAnLmZvbycgYW5kIHRoZVxuICogZm9sbG93aW5nIHN0eWxlcyBvYmplY3Q6XG4gKlxuICogICB7XG4gKiAgICAgJzpudGgtY2hpbGQoMm4pJzoge1xuICogICAgICAgJzpob3Zlcic6IHtcbiAqICAgICAgICAgY29sb3I6ICdyZWQnXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKlxuICogd2hlbiB3ZSByZWFjaCB0aGUgJzpob3Zlcicgc3R5bGUsIHdlIHdvdWxkIGNhbGwgb3VyIHNlbGVjdG9yIGhhbmRsZXJzIGxpa2VcbiAqXG4gKiAgIGhhbmRsZXIoJzpob3ZlcicsICcuZm9vOm50aC1jaGlsZCgybiknLCBjYWxsYmFjaylcbiAqXG4gKiBTaW5jZSBvdXIgYHBzZXVkb1NlbGVjdG9yc2AgaGFuZGxlcyAnOmhvdmVyJyBzdHlsZXMsIHRoYXQgaGFuZGxlciB3b3VsZCBjYWxsXG4gKiB0aGUgY2FsbGJhY2sgbGlrZVxuICpcbiAqICAgY2FsbGJhY2soJy5mb286bnRoLWNoaWxkKDJuKTpob3ZlcicpXG4gKlxuICogdG8gZ2VuZXJhdGUgaXRzIHN1YnRyZWUgYHsgY29sb3I6ICdyZWQnIH1gIHN0eWxlcyB3aXRoIGFcbiAqICcuZm9vOm50aC1jaGlsZCgybik6aG92ZXInIHNlbGVjdG9yLiBUaGUgY2FsbGJhY2sgd291bGQgcmV0dXJuIGFuIGFycmF5IG9mIENTU1xuICogcnVsZXMgbGlrZVxuICpcbiAqICAgWycuZm9vOm50aC1jaGlsZCgybik6aG92ZXJ7Y29sb3I6cmVkICFpbXBvcnRhbnQ7fSddXG4gKlxuICogYW5kIHRoZSBoYW5kbGVyIHdvdWxkIHRoZW4gcmV0dXJuIHRoYXQgcmVzdWx0aW5nIENTUy5cbiAqXG4gKiBgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnNgIGlzIHRoZSBsaXN0IG9mIGRlZmF1bHQgaGFuZGxlcnMgdXNlZCBpbiBhIGNhbGwgdG9cbiAqIGBnZW5lcmF0ZUNTU2AuXG4gKlxuICogQG5hbWUgU2VsZWN0b3JIYW5kbGVyXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvcjogVGhlIGN1cnJlbnRseSBpbnNwZWN0ZWQgc2VsZWN0b3IuICc6aG92ZXInIGluIHRoZVxuICogICAgIGV4YW1wbGUgYWJvdmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVNlbGVjdG9yOiBUaGUgc2VsZWN0b3Igb2YgdGhlIHBhcmVudCBzdHlsZXMuXG4gKiAgICAgJy5mb286bnRoLWNoaWxkKDJuKScgaW4gdGhlIGV4YW1wbGUgYWJvdmUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBnZW5lcmF0ZVN1YnRyZWVTdHlsZXM6IEEgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIGNhbGxlZCB0b1xuICogICAgIGdlbmVyYXRlIENTUyBmb3IgdGhlIHN1YnRyZWUgb2Ygc3R5bGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNlbGVjdG9yLlxuICogICAgIEFjY2VwdHMgYSBuZXcgYmFzZVNlbGVjdG9yIHRvIHVzZSBmb3IgZ2VuZXJhdGluZyB0aG9zZSBzdHlsZXMuXG4gKiBAcmV0dXJucyB7c3RyaW5nW10gfCBzdHJpbmcgfCBudWxsfSBUaGUgZ2VuZXJhdGVkIENTUyBmb3IgdGhpcyBzZWxlY3Rvciwgb3JcbiAqICAgICBudWxsIGlmIHdlIGRvbid0IGhhbmRsZSB0aGlzIHNlbGVjdG9yLlxuICovXG5cbnZhciBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyc1xuLyogOiBTZWxlY3RvckhhbmRsZXJbXSAqL1xuPSBbLy8gSGFuZGxlIHBzZXVkby1zZWxlY3RvcnMsIGxpa2UgOmhvdmVyIGFuZCA6bnRoLWNoaWxkKDNuKVxuZnVuY3Rpb24gcHNldWRvU2VsZWN0b3JzKHNlbGVjdG9yLCBiYXNlU2VsZWN0b3IsIGdlbmVyYXRlU3VidHJlZVN0eWxlcykge1xuICBpZiAoc2VsZWN0b3JbMF0gIT09IFwiOlwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdGVTdWJ0cmVlU3R5bGVzKGJhc2VTZWxlY3RvciArIHNlbGVjdG9yKTtcbn0sIC8vIEhhbmRsZSBtZWRpYSBxdWVyaWVzIChvciBmb250LWZhY2VzKVxuZnVuY3Rpb24gbWVkaWFRdWVyaWVzKHNlbGVjdG9yLCBiYXNlU2VsZWN0b3IsIGdlbmVyYXRlU3VidHJlZVN0eWxlcykge1xuICBpZiAoc2VsZWN0b3JbMF0gIT09IFwiQFwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gR2VuZXJhdGUgdGhlIHN0eWxlcyBub3JtYWxseSwgYW5kIHRoZW4gd3JhcCB0aGVtIGluIHRoZSBtZWRpYSBxdWVyeS5cblxuXG4gIHZhciBnZW5lcmF0ZWQgPSBnZW5lcmF0ZVN1YnRyZWVTdHlsZXMoYmFzZVNlbGVjdG9yKTtcbiAgcmV0dXJuIFtcIlwiLmNvbmNhdChzZWxlY3RvciwgXCJ7XCIpLmNvbmNhdChnZW5lcmF0ZWQuam9pbignJyksIFwifVwiKV07XG59XTtcbi8qKlxuICogR2VuZXJhdGUgQ1NTIGZvciBhIHNlbGVjdG9yIGFuZCBzb21lIHN0eWxlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIG1lZGlhIHF1ZXJpZXMgYW5kIHBzZXVkbyBzZWxlY3RvcnMgdGhhdCBjYW4gYmUgdXNlZFxuICogaW4gYXBocm9kaXRlIHN0eWxlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3I6IEEgYmFzZSBDU1Mgc2VsZWN0b3IgZm9yIHRoZSBzdHlsZXMgdG8gYmUgZ2VuZXJhdGVkXG4gKiAgICAgd2l0aC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVR5cGVzOiBBIGxpc3Qgb2YgcHJvcGVydGllcyBvZiB0aGUgcmV0dXJuIHR5cGUgb2ZcbiAqICAgICBTdHlsZVNoZWV0LmNyZWF0ZSwgZS5nLiBbc3R5bGVzLnJlZCwgc3R5bGVzLmJsdWVdLlxuICogQHBhcmFtIHtBcnJheS48U2VsZWN0b3JIYW5kbGVyPn0gc2VsZWN0b3JIYW5kbGVyczogQSBsaXN0IG9mIHNlbGVjdG9yXG4gKiAgICAgaGFuZGxlcnMgdG8gdXNlIGZvciBoYW5kbGluZyBzcGVjaWFsIHNlbGVjdG9ycy4gU2VlXG4gKiAgICAgYGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzYC5cbiAqIEBwYXJhbSBzdHJpbmdIYW5kbGVyczogU2VlIGBnZW5lcmF0ZUNTU1J1bGVzZXRgXG4gKiBAcGFyYW0gdXNlSW1wb3J0YW50OiBTZWUgYGdlbmVyYXRlQ1NTUnVsZXNldGBcbiAqXG4gKiBUbyBhY3R1YWxseSBnZW5lcmF0ZSB0aGUgQ1NTIHNwZWNpYWwtY29uc3RydWN0LWxlc3Mgc3R5bGVzIGFyZSBwYXNzZWQgdG9cbiAqIGBnZW5lcmF0ZUNTU1J1bGVzZXRgLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYSBjYWxsIHRvXG4gKlxuICogICAgIGdlbmVyYXRlQ1NTKFwiLmZvb1wiLCBbe1xuICogICAgICAgY29sb3I6IFwicmVkXCIsXG4gKiAgICAgICBcIkBtZWRpYSBzY3JlZW5cIjoge1xuICogICAgICAgICBoZWlnaHQ6IDIwLFxuICogICAgICAgICBcIjpob3ZlclwiOiB7XG4gKiAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCJcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIFwiOmFjdGl2ZVwiOiB7XG4gKiAgICAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXG4gKiAgICAgICB9XG4gKiAgICAgfV0sIGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzKTtcbiAqXG4gKiB3aXRoIHRoZSBkZWZhdWx0IGBzZWxlY3RvckhhbmRsZXJzYCB3aWxsIG1ha2UgNSBjYWxscyB0b1xuICogYGdlbmVyYXRlQ1NTUnVsZXNldGA6XG4gKlxuICogICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5mb29cIiwgeyBjb2xvcjogXCJyZWRcIiB9LCAuLi4pXG4gKiAgICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmZvbzphY3RpdmVcIiwgeyBmb250V2VpZ2h0OiBcImJvbGRcIiB9LCAuLi4pXG4gKiAgICAgLy8gVGhlc2UgMiB3aWxsIGJlIHdyYXBwZWQgaW4gQG1lZGlhIHNjcmVlbiB7fVxuICogICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5mb29cIiwgeyBoZWlnaHQ6IDIwIH0sIC4uLilcbiAqICAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuZm9vOmhvdmVyXCIsIHsgYmFja2dyb3VuZENvbG9yOiBcImJsYWNrXCIgfSwgLi4uKVxuICovXG5cbnZhciBnZW5lcmF0ZUNTUyA9IGZ1bmN0aW9uIGdlbmVyYXRlQ1NTKHNlbGVjdG9yXG4vKiA6IHN0cmluZyAqL1xuLCBzdHlsZVR5cGVzXG4vKiA6IFNoZWV0RGVmaW5pdGlvbltdICovXG4sIHNlbGVjdG9ySGFuZGxlcnNcbi8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbiwgc3RyaW5nSGFuZGxlcnNcbi8qIDogU3RyaW5nSGFuZGxlcnMgKi9cbiwgdXNlSW1wb3J0YW50XG4vKiA6IGJvb2xlYW4gKi9cbilcbi8qIDogc3RyaW5nW10gKi9cbntcbiAgdmFyIG1lcmdlZCA9IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICBtZXJnZWQuYWRkU3R5bGVUeXBlKHN0eWxlVHlwZXNbaV0pO1xuICB9XG5cbiAgdmFyIHBsYWluRGVjbGFyYXRpb25zID0gbmV3IE9yZGVyZWRFbGVtZW50cygpO1xuICB2YXIgZ2VuZXJhdGVkU3R5bGVzID0gW107IC8vIFRPRE8oZW1pbHkpOiBiZW5jaG1hcmsgdGhpcyB0byBzZWUgaWYgYSBwbGFpbiBmb3IgbG9vcCB3b3VsZCBiZSBmYXN0ZXIuXG5cbiAgbWVyZ2VkLmZvckVhY2goZnVuY3Rpb24gKHZhbCwga2V5KSB7XG4gICAgLy8gRm9yIGVhY2gga2V5LCBzZWUgaWYgb25lIG9mIHRoZSBzZWxlY3RvciBoYW5kbGVycyB3aWxsIGhhbmRsZSB0aGVzZVxuICAgIC8vIHN0eWxlcy5cbiAgICB2YXIgZm91bmRIYW5kbGVyID0gc2VsZWN0b3JIYW5kbGVycy5zb21lKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaGFuZGxlcihrZXksIHNlbGVjdG9yLCBmdW5jdGlvbiAobmV3U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlQ1NTKG5ld1NlbGVjdG9yLCBbdmFsXSwgc2VsZWN0b3JIYW5kbGVycywgc3RyaW5nSGFuZGxlcnMsIHVzZUltcG9ydGFudCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHJldHVybmVkIHNvbWV0aGluZywgYWRkIGl0IHRvIHRoZSBnZW5lcmF0ZWRcbiAgICAgICAgLy8gQ1NTIGFuZCBzdG9wIGxvb2tpbmcgZm9yIGFub3RoZXIgaGFuZGxlci5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgIGdlbmVyYXRlZFN0eWxlcy5wdXNoLmFwcGx5KGdlbmVyYXRlZFN0eWxlcywgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3VsdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogU2VsZWN0b3IgaGFuZGxlcnMgc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBydWxlcy4nICsgJ1JldHVybmluZyBhIHN0cmluZyBjb250YWluaW5nIG11bHRpcGxlIHJ1bGVzIGlzIGRlcHJlY2F0ZWQuJywgaGFuZGxlcik7XG4gICAgICAgICAgZ2VuZXJhdGVkU3R5bGVzLnB1c2goXCJAbWVkaWEgYWxsIHtcIi5jb25jYXQocmVzdWx0LCBcIn1cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7IC8vIElmIG5vbmUgb2YgdGhlIGhhbmRsZXJzIGhhbmRsZWQgaXQsIGFkZCBpdCB0byB0aGUgbGlzdCBvZiBwbGFpblxuICAgIC8vIHN0eWxlIGRlY2xhcmF0aW9ucy5cblxuICAgIGlmICghZm91bmRIYW5kbGVyKSB7XG4gICAgICBwbGFpbkRlY2xhcmF0aW9ucy5zZXQoa2V5LCB2YWwsIHRydWUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBnZW5lcmF0ZWRSdWxlc2V0ID0gZ2VuZXJhdGVDU1NSdWxlc2V0KHNlbGVjdG9yLCBwbGFpbkRlY2xhcmF0aW9ucywgc3RyaW5nSGFuZGxlcnMsIHVzZUltcG9ydGFudCwgc2VsZWN0b3JIYW5kbGVycyk7XG5cbiAgaWYgKGdlbmVyYXRlZFJ1bGVzZXQpIHtcbiAgICBnZW5lcmF0ZWRTdHlsZXMudW5zaGlmdChnZW5lcmF0ZWRSdWxlc2V0KTtcbiAgfVxuXG4gIHJldHVybiBnZW5lcmF0ZWRTdHlsZXM7XG59O1xuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIG9mIGdlbmVyYXRlQ1NTUnVsZXNldCB0byBmYWNpbGl0YXRlIGN1c3RvbSBoYW5kbGluZyBvZiBjZXJ0YWluXG4gKiBDU1MgcHJvcGVydGllcy4gVXNlZCBmb3IgZS5nLiBmb250IGZhbWlsaWVzLlxuICpcbiAqIFNlZSBnZW5lcmF0ZUNTU1J1bGVzZXQgZm9yIHVzYWdlIGFuZCBkb2N1bWVudGF0aW9uIG9mIHBhcmFtYXRlciB0eXBlcy5cbiAqL1xuXG52YXIgcnVuU3RyaW5nSGFuZGxlcnMgPSBmdW5jdGlvbiBydW5TdHJpbmdIYW5kbGVycyhkZWNsYXJhdGlvbnNcbi8qIDogT3JkZXJlZEVsZW1lbnRzICovXG4sIHN0cmluZ0hhbmRsZXJzXG4vKiA6IFN0cmluZ0hhbmRsZXJzICovXG4sIHNlbGVjdG9ySGFuZGxlcnNcbi8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbilcbi8qIDogdm9pZCAqL1xue1xuICBpZiAoIXN0cmluZ0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHN0cmluZ0hhbmRsZXJLZXlzID0gT2JqZWN0LmtleXMoc3RyaW5nSGFuZGxlcnMpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nSGFuZGxlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gc3RyaW5nSGFuZGxlcktleXNbaV07XG5cbiAgICBpZiAoZGVjbGFyYXRpb25zLmhhcyhrZXkpKSB7XG4gICAgICAvLyBBIGRlY2xhcmF0aW9uIGV4aXN0cyBmb3IgdGhpcyBwYXJ0aWN1bGFyIHN0cmluZyBoYW5kbGVyLCBzbyB3ZVxuICAgICAgLy8gbmVlZCB0byBsZXQgdGhlIHN0cmluZyBoYW5kbGVyIGludGVycHJldCB0aGUgZGVjbGFyYXRpb24gZmlyc3RcbiAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAgICAgLy9cbiAgICAgIC8vIFRPRE8oZW1pbHkpOiBQYXNzIGluIGEgY2FsbGJhY2sgd2hpY2ggZ2VuZXJhdGVzIENTUywgc2ltaWxhciB0b1xuICAgICAgLy8gaG93IG91ciBzZWxlY3RvciBoYW5kbGVycyB3b3JrLCBpbnN0ZWFkIG9mIHBhc3NpbmcgaW5cbiAgICAgIC8vIGBzZWxlY3RvckhhbmRsZXJzYCBhbmQgaGF2ZSB0aGVtIG1ha2UgY2FsbHMgdG8gYGdlbmVyYXRlQ1NTYFxuICAgICAgLy8gdGhlbXNlbHZlcy4gUmlnaHQgbm93LCB0aGlzIGlzIGltcHJhY3RpY2FsIGJlY2F1c2Ugb3VyIHN0cmluZ1xuICAgICAgLy8gaGFuZGxlcnMgYXJlIHZlcnkgc3BlY2lhbGl6ZWQgYW5kIGRvIGNvbXBsZXggdGhpbmdzLlxuICAgICAgZGVjbGFyYXRpb25zLnNldChrZXksIHN0cmluZ0hhbmRsZXJzW2tleV0oZGVjbGFyYXRpb25zLmdldChrZXkpLCBzZWxlY3RvckhhbmRsZXJzKSwgLy8gUHJlc2VydmUgb3JkZXIgaGVyZSwgc2luY2Ugd2UgYXJlIHJlYWxseSByZXBsYWNpbmcgYW5cbiAgICAgIC8vIHVucHJvY2Vzc2VkIHN0eWxlIHdpdGggYSBwcm9jZXNzZWQgc3R5bGUsIG5vdCBvdmVycmlkaW5nIGFuXG4gICAgICAvLyBlYXJsaWVyIHN0eWxlXG4gICAgICBmYWxzZSk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdHJhbnNmb3JtUnVsZSA9IGZ1bmN0aW9uIHRyYW5zZm9ybVJ1bGUoa2V5XG4vKiA6IHN0cmluZyAqL1xuLCB2YWx1ZVxuLyogOiBzdHJpbmcgKi9cbiwgdHJhbnNmb3JtVmFsdWVcbi8qIDogZnVuY3Rpb24gKi9cbikge1xuICByZXR1cm4gKFxuICAgIC8qIDogc3RyaW5nICovXG4gICAgXCJcIi5jb25jYXQoa2ViYWJpZnlTdHlsZU5hbWUoa2V5KSwgXCI6XCIpLmNvbmNhdCh0cmFuc2Zvcm1WYWx1ZShrZXksIHZhbHVlKSwgXCI7XCIpXG4gICk7XG59O1xuXG52YXIgYXJyYXlUb09iamVjdEtleXNSZWR1Y2VyID0gZnVuY3Rpb24gYXJyYXlUb09iamVjdEtleXNSZWR1Y2VyKGFjYywgdmFsKSB7XG4gIGFjY1t2YWxdID0gdHJ1ZTtcbiAgcmV0dXJuIGFjYztcbn07XG4vKipcbiAqIEdlbmVyYXRlIGEgQ1NTIHJ1bGVzZXQgd2l0aCB0aGUgc2VsZWN0b3IgYW5kIGNvbnRhaW5pbmcgdGhlIGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCB0aGUgZ2l2ZW4gZGVjbGFyYXRpb25zIGRvbid0IGNvbnRhaW4gYW55IHNwZWNpYWxcbiAqIGNoaWxkcmVuIChzdWNoIGFzIG1lZGlhIHF1ZXJpZXMsIHBzZXVkby1zZWxlY3RvcnMsIG9yIGRlc2NlbmRhbnQgc3R5bGVzKS5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtZXRob2QgZG9lcyBub3QgZGVhbCB3aXRoIG5lc3RpbmcgdXNlZCBmb3IgZS5nLlxuICogcHN1ZWRvLXNlbGVjdG9ycyBvciBtZWRpYSBxdWVyaWVzLiBUaGF0IHJlc3BvbnNpYmlsaXR5IGlzIGxlZnQgdG8gIHRoZVxuICogYGdlbmVyYXRlQ1NTYCBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3I6IHRoZSBzZWxlY3RvciBhc3NvY2lhdGVkIHdpdGggdGhlIHJ1bGVzZXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWNsYXJhdGlvbnM6IGEgbWFwIGZyb20gY2FtZWxDYXNlZCBDU1MgcHJvcGVydHkgbmFtZSB0byBDU1NcbiAqICAgICBwcm9wZXJ0eSB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gc3RyaW5nSGFuZGxlcnM6IGEgbWFwIGZyb20gY2FtZWxDYXNlZCBDU1NcbiAqICAgICBwcm9wZXJ0eSBuYW1lIHRvIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCBtYXAgdGhlIGdpdmVuIHZhbHVlIHRvIHRoZSB2YWx1ZVxuICogICAgIHRoYXQgaXMgb3V0cHV0LlxuICogQHBhcmFtIHtib29sfSB1c2VJbXBvcnRhbnQ6IEEgYm9vbGVhbiBzYXlpbmcgd2hldGhlciB0byBhcHBlbmQgXCIhaW1wb3J0YW50XCJcbiAqICAgICB0byBlYWNoIG9mIHRoZSBDU1MgZGVjbGFyYXRpb25zLlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgb2YgcmF3IENTUy5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuYmxhaFwiLCB7IGNvbG9yOiBcInJlZFwiIH0pXG4gKiAgICAtPiBcIi5ibGFoe2NvbG9yOiByZWQgIWltcG9ydGFudDt9XCJcbiAqICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5ibGFoXCIsIHsgY29sb3I6IFwicmVkXCIgfSwge30sIGZhbHNlKVxuICogICAgLT4gXCIuYmxhaHtjb2xvcjogcmVkfVwiXG4gKiAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuYmxhaFwiLCB7IGNvbG9yOiBcInJlZFwiIH0sIHtjb2xvcjogYyA9PiBjLnRvVXBwZXJDYXNlfSlcbiAqICAgIC0+IFwiLmJsYWh7Y29sb3I6IFJFRH1cIlxuICogICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmJsYWg6aG92ZXJcIiwgeyBjb2xvcjogXCJyZWRcIiB9KVxuICogICAgLT4gXCIuYmxhaDpob3Zlcntjb2xvcjogcmVkfVwiXG4gKi9cblxuXG52YXIgZ2VuZXJhdGVDU1NSdWxlc2V0ID0gZnVuY3Rpb24gZ2VuZXJhdGVDU1NSdWxlc2V0KHNlbGVjdG9yXG4vKiA6IHN0cmluZyAqL1xuLCBkZWNsYXJhdGlvbnNcbi8qIDogT3JkZXJlZEVsZW1lbnRzICovXG4sIHN0cmluZ0hhbmRsZXJzXG4vKiA6IFN0cmluZ0hhbmRsZXJzICovXG4sIHVzZUltcG9ydGFudFxuLyogOiBib29sZWFuICovXG4sIHNlbGVjdG9ySGFuZGxlcnNcbi8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbilcbi8qIDogc3RyaW5nICovXG57XG4gIC8vIE11dGF0ZXMgZGVjbGFyYXRpb25zXG4gIHJ1blN0cmluZ0hhbmRsZXJzKGRlY2xhcmF0aW9ucywgc3RyaW5nSGFuZGxlcnMsIHNlbGVjdG9ySGFuZGxlcnMpO1xuICB2YXIgb3JpZ2luYWxFbGVtZW50cyA9IE9iamVjdC5rZXlzKGRlY2xhcmF0aW9ucy5lbGVtZW50cykucmVkdWNlKGFycmF5VG9PYmplY3RLZXlzUmVkdWNlciwgT2JqZWN0LmNyZWF0ZShudWxsKSk7IC8vIE5PVEUoZW1pbHkpOiBUaGlzIG11dGF0ZXMgaGFuZGxlZERlY2xhcmF0aW9ucy5lbGVtZW50cy5cblxuICB2YXIgcHJlZml4ZWRFbGVtZW50cyA9IHByZWZpeEFsbChkZWNsYXJhdGlvbnMuZWxlbWVudHMpO1xuICB2YXIgZWxlbWVudE5hbWVzID0gT2JqZWN0LmtleXMocHJlZml4ZWRFbGVtZW50cyk7XG5cbiAgaWYgKGVsZW1lbnROYW1lcy5sZW5ndGggIT09IGRlY2xhcmF0aW9ucy5rZXlPcmRlci5sZW5ndGgpIHtcbiAgICAvLyBUaGVyZSBhcmUgc29tZSBwcmVmaXhlZCB2YWx1ZXMsIHNvIHdlIG5lZWQgdG8gZmlndXJlIG91dCBob3cgdG8gc29ydFxuICAgIC8vIHRoZW0uXG4gICAgLy9cbiAgICAvLyBMb29wIHRocm91Z2ggcHJlZml4ZWRFbGVtZW50cywgbG9va2luZyBmb3IgYW55dGhpbmcgdGhhdCBpcyBub3QgaW5cbiAgICAvLyBzb3J0T3JkZXIsIHdoaWNoIG1lYW5zIGl0IHdhcyBhZGRlZCBieSBwcmVmaXhBbGwuIFRoaXMgbWVhbnMgdGhhdCB3ZVxuICAgIC8vIG5lZWQgdG8gZmlndXJlIG91dCB3aGVyZSBpdCBzaG91bGQgYXBwZWFyIGluIHRoZSBzb3J0T3JkZXIuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50TmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghb3JpZ2luYWxFbGVtZW50c1tlbGVtZW50TmFtZXNbaV1dKSB7XG4gICAgICAgIC8vIFRoaXMgZWxlbWVudCBpcyBub3QgaW4gdGhlIHNvcnRPcmRlciwgd2hpY2ggbWVhbnMgaXQgaXMgYSBwcmVmaXhlZFxuICAgICAgICAvLyB2YWx1ZSB0aGF0IHdhcyBhZGRlZCBieSBwcmVmaXhBbGwuIExldCdzIHRyeSB0byBmaWd1cmUgb3V0IHdoZXJlIGl0XG4gICAgICAgIC8vIGdvZXMuXG4gICAgICAgIHZhciBvcmlnaW5hbFN0eWxlID0gdm9pZCAwO1xuXG4gICAgICAgIGlmIChlbGVtZW50TmFtZXNbaV1bMF0gPT09ICdXJykge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBXZWJraXQtcHJlZml4ZWQgc3R5bGUsIGxpa2UgXCJXZWJraXRUcmFuc2l0aW9uXCIuIExldCdzXG4gICAgICAgICAgLy8gZmluZCBpdHMgb3JpZ2luYWwgc3R5bGUncyBzb3J0IG9yZGVyLlxuICAgICAgICAgIG9yaWdpbmFsU3R5bGUgPSBlbGVtZW50TmFtZXNbaV1bNl0udG9Mb3dlckNhc2UoKSArIGVsZW1lbnROYW1lc1tpXS5zbGljZSg3KTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50TmFtZXNbaV1bMV0gPT09ICdvJykge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBNb3otcHJlZml4ZWQgc3R5bGUsIGxpa2UgXCJNb3pUcmFuc2l0aW9uXCIuIFdlIGNoZWNrXG4gICAgICAgICAgLy8gdGhlIHNlY29uZCBjaGFyYWN0ZXIgdG8gYXZvaWQgY29sbGlkaW5nIHdpdGggTXMtcHJlZml4ZWRcbiAgICAgICAgICAvLyBzdHlsZXMuIExldCdzIGZpbmQgaXRzIG9yaWdpbmFsIHN0eWxlJ3Mgc29ydCBvcmRlci5cbiAgICAgICAgICBvcmlnaW5hbFN0eWxlID0gZWxlbWVudE5hbWVzW2ldWzNdLnRvTG93ZXJDYXNlKCkgKyBlbGVtZW50TmFtZXNbaV0uc2xpY2UoNCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaWYgKGVsZW1lbnROYW1lc1tpXVsxXSA9PT0gJ3MnKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBhIE1zLXByZWZpeGVkIHN0eWxlLCBsaWtlIFwiTXNUcmFuc2l0aW9uXCIuXG4gICAgICAgICAgb3JpZ2luYWxTdHlsZSA9IGVsZW1lbnROYW1lc1tpXVsyXS50b0xvd2VyQ2FzZSgpICsgZWxlbWVudE5hbWVzW2ldLnNsaWNlKDMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9yaWdpbmFsU3R5bGUgJiYgb3JpZ2luYWxFbGVtZW50c1tvcmlnaW5hbFN0eWxlXSkge1xuICAgICAgICAgIHZhciBvcmlnaW5hbEluZGV4ID0gZGVjbGFyYXRpb25zLmtleU9yZGVyLmluZGV4T2Yob3JpZ2luYWxTdHlsZSk7XG4gICAgICAgICAgZGVjbGFyYXRpb25zLmtleU9yZGVyLnNwbGljZShvcmlnaW5hbEluZGV4LCAwLCBlbGVtZW50TmFtZXNbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdlIGRvbid0IGtub3cgd2hhdCB0aGUgb3JpZ2luYWwgc3R5bGUgd2FzLCBzbyBzb3J0IGl0IHRvXG4gICAgICAgICAgLy8gdG9wLiBUaGlzIGNhbiBoYXBwZW4gZm9yIHN0eWxlcyB0aGF0IGFyZSBhZGRlZCB0aGF0IGRvbid0XG4gICAgICAgICAgLy8gaGF2ZSB0aGUgc2FtZSBiYXNlIG5hbWUgYXMgdGhlIG9yaWdpbmFsIHN0eWxlLlxuICAgICAgICAgIGRlY2xhcmF0aW9ucy5rZXlPcmRlci51bnNoaWZ0KGVsZW1lbnROYW1lc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdHJhbnNmb3JtVmFsdWUgPSB1c2VJbXBvcnRhbnQgPT09IGZhbHNlID8gc3RyaW5naWZ5VmFsdWUgOiBzdHJpbmdpZnlBbmRJbXBvcnRhbnRpZnlWYWx1ZTtcbiAgdmFyIHJ1bGVzID0gW107XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGRlY2xhcmF0aW9ucy5rZXlPcmRlci5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIga2V5ID0gZGVjbGFyYXRpb25zLmtleU9yZGVyW19pXTtcbiAgICB2YXIgdmFsdWUgPSBwcmVmaXhlZEVsZW1lbnRzW2tleV07XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIC8vIGlubGluZS1zdHlsZS1wcmVmaXhlciByZXR1cm5zIGFuIGFycmF5IHdoZW4gdGhlcmUgc2hvdWxkIGJlXG4gICAgICAvLyBtdWx0aXBsZSBydWxlcyBmb3IgdGhlIHNhbWUga2V5LiBIZXJlIHdlIGZsYXR0ZW4gdG8gbXVsdGlwbGVcbiAgICAgIC8vIHBhaXJzIHdpdGggdGhlIHNhbWUga2V5LlxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICBydWxlcy5wdXNoKHRyYW5zZm9ybVJ1bGUoa2V5LCB2YWx1ZVtqXSwgdHJhbnNmb3JtVmFsdWUpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcnVsZXMucHVzaCh0cmFuc2Zvcm1SdWxlKGtleSwgdmFsdWUsIHRyYW5zZm9ybVZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHJ1bGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWxlY3RvciwgXCJ7XCIpLmNvbmNhdChydWxlcy5qb2luKFwiXCIpLCBcIn1cIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG5cbi8qIDo6XG5pbXBvcnQgdHlwZSB7IFNoZWV0RGVmaW5pdGlvbiwgU2hlZXREZWZpbml0aW9ucyB9IGZyb20gJy4vaW5kZXguanMnO1xuaW1wb3J0IHR5cGUgeyBNYXliZVNoZWV0RGVmaW5pdGlvbiB9IGZyb20gJy4vZXhwb3J0cy5qcyc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdG9ySGFuZGxlciB9IGZyb20gJy4vZ2VuZXJhdGUuanMnO1xuKi9cbi8vIFRoZSBjdXJyZW50IDxzdHlsZT4gdGFnIHdlIGFyZSBpbnNlcnRpbmcgaW50bywgb3IgbnVsbCBpZiB3ZSBoYXZlbid0XG4vLyBpbnNlcnRlZCBhbnl0aGluZyB5ZXQuIFdlIGNvdWxkIGZpbmQgdGhpcyBlYWNoIHRpbWUgdXNpbmdcbi8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1hcGhyb2RpdGVcIl0pYCwgYnV0IGhvbGRpbmcgb250byBpdCBpc1xuLy8gZmFzdGVyLlxuXG52YXIgc3R5bGVUYWdcbi8qIDogP0hUTUxTdHlsZUVsZW1lbnQgKi9cbj0gbnVsbDsgLy8gSW5qZWN0IGEgc2V0IG9mIHJ1bGVzIGludG8gYSA8c3R5bGU+IHRhZyBpbiB0aGUgaGVhZCBvZiB0aGUgZG9jdW1lbnQuIFRoaXNcbi8vIHdpbGwgYXV0b21hdGljYWxseSBjcmVhdGUgYSBzdHlsZSB0YWcgYW5kIHRoZW4gY29udGludWUgdG8gdXNlIGl0IGZvclxuLy8gbXVsdGlwbGUgaW5qZWN0aW9ucy4gSXQgd2lsbCBhbHNvIHVzZSBhIHN0eWxlIHRhZyB3aXRoIHRoZSBgZGF0YS1hcGhyb2RpdGVgXG4vLyB0YWcgb24gaXQgaWYgdGhhdCBleGlzdHMgaW4gdGhlIERPTS4gVGhpcyBjb3VsZCBiZSB1c2VkIGZvciBlLmcuIHJldXNpbmcgdGhlXG4vLyBzYW1lIHN0eWxlIHRhZyB0aGF0IHNlcnZlci1zaWRlIHJlbmRlcmluZyBpbnNlcnRzLlxuXG52YXIgaW5qZWN0U3R5bGVUYWcgPSBmdW5jdGlvbiBpbmplY3RTdHlsZVRhZyhjc3NSdWxlc1xuLyogOiBzdHJpbmdbXSAqL1xuKSB7XG4gIGlmIChzdHlsZVRhZyA9PSBudWxsKSB7XG4gICAgLy8gVHJ5IHRvIGZpbmQgYSBzdHlsZSB0YWcgd2l0aCB0aGUgYGRhdGEtYXBocm9kaXRlYCBhdHRyaWJ1dGUgZmlyc3QuXG4gICAgc3R5bGVUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3R5bGVbZGF0YS1hcGhyb2RpdGVdXCIpXG4gICAgLyogOiBhbnkgKi9cbiAgICA7IC8vIElmIHRoYXQgZG9lc24ndCB3b3JrLCBnZW5lcmF0ZSBhIG5ldyBzdHlsZSB0YWcuXG5cbiAgICBpZiAoc3R5bGVUYWcgPT0gbnVsbCkge1xuICAgICAgLy8gVGFrZW4gZnJvbVxuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81MjQ2OTYvaG93LXRvLWNyZWF0ZS1hLXN0eWxlLXRhZy13aXRoLWphdmFzY3JpcHRcbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgICAgc3R5bGVUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgc3R5bGVUYWcudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICBzdHlsZVRhZy5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFwaHJvZGl0ZVwiLCBcIlwiKTtcbiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVUYWcpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICB2YXIgc2hlZXQgPSBzdHlsZVRhZy5zdHlsZVNoZWV0IHx8IHN0eWxlVGFnLnNoZWV0XG4gIC8qIDogYW55ICovXG4gIDtcblxuICBpZiAoc2hlZXQuaW5zZXJ0UnVsZSkge1xuICAgIHZhciBudW1SdWxlcyA9IHNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICBjc3NSdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIG51bVJ1bGVzKTtcbiAgICAgICAgbnVtUnVsZXMgKz0gMTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsvLyBUaGUgc2VsZWN0b3IgZm9yIHRoaXMgcnVsZSB3YXNuJ3QgY29tcGF0aWJsZSB3aXRoIHRoZSBicm93c2VyXG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGVUYWcuaW5uZXJUZXh0ID0gKHN0eWxlVGFnLmlubmVyVGV4dCB8fCAnJykgKyBjc3NSdWxlcy5qb2luKCcnKTtcbiAgfVxufTsgLy8gQ3VzdG9tIGhhbmRsZXJzIGZvciBzdHJpbmdpZnlpbmcgQ1NTIHZhbHVlcyB0aGF0IGhhdmUgc2lkZSBlZmZlY3RzXG4vLyAoc3VjaCBhcyBmb250RmFtaWx5LCB3aGljaCBjYW4gY2F1c2UgQGZvbnQtZmFjZSBydWxlcyB0byBiZSBpbmplY3RlZClcblxuXG52YXIgc3RyaW5nSGFuZGxlcnMgPSB7XG4gIC8vIFdpdGggZm9udEZhbWlseSB3ZSBsb29rIGZvciBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCBpbiBhbmQgaW50ZXJwcmV0XG4gIC8vIHRoZW0gYXMgQGZvbnQtZmFjZSBydWxlcyB0aGF0IHdlIG5lZWQgdG8gaW5qZWN0LiBUaGUgdmFsdWUgb2YgZm9udEZhbWlseVxuICAvLyBjYW4gZWl0aGVyIGJlIGEgc3RyaW5nIChhcyBub3JtYWwpLCBhbiBvYmplY3QgKGEgc2luZ2xlIGZvbnQgZmFjZSksIG9yXG4gIC8vIGFuIGFycmF5IG9mIG9iamVjdHMgYW5kIHN0cmluZ3MuXG4gIGZvbnRGYW1pbHk6IGZ1bmN0aW9uIGZvbnRGYW1pbHkodmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFyIG5hbWVNYXAgPSB7fTtcbiAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIG5hbWVNYXBbZm9udEZhbWlseSh2KV0gPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMobmFtZU1hcCkuam9pbihcIixcIik7XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHZhbCkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIGluamVjdFN0eWxlT25jZSh2YWwuc3JjLCBcIkBmb250LWZhY2VcIiwgW3ZhbF0sIGZhbHNlKTtcbiAgICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodmFsLmZvbnRGYW1pbHksIFwiXFxcIlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH0sXG4gIC8vIFdpdGggYW5pbWF0aW9uTmFtZSB3ZSBsb29rIGZvciBhbiBvYmplY3QgdGhhdCBjb250YWlucyBrZXlmcmFtZXMgYW5kXG4gIC8vIGluamVjdCB0aGVtIGFzIGFuIGBAa2V5ZnJhbWVzYCBibG9jaywgcmV0dXJuaW5nIGEgdW5pcXVlbHkgZ2VuZXJhdGVkXG4gIC8vIG5hbWUuIFRoZSBrZXlmcmFtZXMgb2JqZWN0IHNob3VsZCBsb29rIGxpa2VcbiAgLy8gIGFuaW1hdGlvbk5hbWU6IHtcbiAgLy8gICAgZnJvbToge1xuICAvLyAgICAgIGxlZnQ6IDAsXG4gIC8vICAgICAgdG9wOiAwLFxuICAvLyAgICB9LFxuICAvLyAgICAnNTAlJzoge1xuICAvLyAgICAgIGxlZnQ6IDE1LFxuICAvLyAgICAgIHRvcDogNSxcbiAgLy8gICAgfSxcbiAgLy8gICAgdG86IHtcbiAgLy8gICAgICBsZWZ0OiAyMCxcbiAgLy8gICAgICB0b3A6IDIwLFxuICAvLyAgICB9XG4gIC8vICB9XG4gIC8vIFRPRE8oZW1pbHkpOiBgc3RyaW5nSGFuZGxlcnNgIGRvZXNuJ3QgbGV0IHVzIHJlbmFtZSB0aGUga2V5LCBzbyBJIGhhdmVcbiAgLy8gdG8gdXNlIGBhbmltYXRpb25OYW1lYCBoZXJlLiBJbXByb3ZlIHRoYXQgc28gd2UgY2FuIGNhbGwgdGhpc1xuICAvLyBgYW5pbWF0aW9uYCBpbnN0ZWFkIG9mIGBhbmltYXRpb25OYW1lYC5cbiAgYW5pbWF0aW9uTmFtZTogZnVuY3Rpb24gYW5pbWF0aW9uTmFtZSh2YWwsIHNlbGVjdG9ySGFuZGxlcnMpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gdmFsLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uTmFtZSh2LCBzZWxlY3RvckhhbmRsZXJzKTtcbiAgICAgIH0pLmpvaW4oXCIsXCIpO1xuICAgIH0gZWxzZSBpZiAoX3R5cGVvZih2YWwpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBuYW1lIGJhc2VkIG9uIHRoZSBoYXNoIG9mIHRoZSBvYmplY3QuIFdlIGNhbid0XG4gICAgICAvLyBqdXN0IHVzZSB0aGUgaGFzaCBiZWNhdXNlIHRoZSBuYW1lIGNhbid0IHN0YXJ0IHdpdGggYSBudW1iZXIuXG4gICAgICAvLyBUT0RPKGVtaWx5KTogdGhpcyBwcm9iYWJseSBtYWtlcyBkZWJ1Z2dpbmcgaGFyZCwgYWxsb3cgYSBjdXN0b21cbiAgICAgIC8vIG5hbWU/XG4gICAgICB2YXIgbmFtZSA9IFwia2V5ZnJhbWVfXCIuY29uY2F0KGhhc2hPYmplY3QodmFsKSk7IC8vIFNpbmNlIGtleWZyYW1lcyBuZWVkIDMgbGF5ZXJzIG9mIG5lc3RpbmcsIHdlIHVzZSBgZ2VuZXJhdGVDU1NgIHRvXG4gICAgICAvLyBidWlsZCB0aGUgaW5uZXIgbGF5ZXJzIGFuZCB3cmFwIGl0IGluIGBAa2V5ZnJhbWVzYCBvdXJzZWx2ZXMuXG5cbiAgICAgIHZhciBmaW5hbFZhbCA9IFwiQGtleWZyYW1lcyBcIi5jb25jYXQobmFtZSwgXCJ7XCIpOyAvLyBUT0RPIHNlZSBpZiB3ZSBjYW4gZmluZCBhIHdheSB3aGVyZSBjaGVja2luZyBmb3IgT3JkZXJlZEVsZW1lbnRzXG4gICAgICAvLyBoZXJlIGlzIG5vdCBuZWNlc3NhcnkuIEFsdGVybmF0aXZlbHksIHBlcmhhcHMgd2Ugc2hvdWxkIGhhdmUgYVxuICAgICAgLy8gdXRpbGl0eSBtZXRob2QgdGhhdCBjYW4gaXRlcmF0ZSBvdmVyIGVpdGhlciBhIHBsYWluIG9iamVjdCwgYW5cbiAgICAgIC8vIGluc3RhbmNlIG9mIE9yZGVyZWRFbGVtZW50cywgb3IgYSBNYXAsIGFuZCB0aGVuIHVzZSB0aGF0IGhlcmUgYW5kXG4gICAgICAvLyBlbHNld2hlcmUuXG5cbiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBPcmRlcmVkRWxlbWVudHMpIHtcbiAgICAgICAgdmFsLmZvckVhY2goZnVuY3Rpb24gKHZhbFZhbCwgdmFsS2V5KSB7XG4gICAgICAgICAgZmluYWxWYWwgKz0gZ2VuZXJhdGVDU1ModmFsS2V5LCBbdmFsVmFsXSwgc2VsZWN0b3JIYW5kbGVycywgc3RyaW5nSGFuZGxlcnMsIGZhbHNlKS5qb2luKCcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYmplY3Qua2V5cyh2YWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGZpbmFsVmFsICs9IGdlbmVyYXRlQ1NTKGtleSwgW3ZhbFtrZXldXSwgc2VsZWN0b3JIYW5kbGVycywgc3RyaW5nSGFuZGxlcnMsIGZhbHNlKS5qb2luKCcnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZpbmFsVmFsICs9ICd9JztcbiAgICAgIGluamVjdEdlbmVyYXRlZENTU09uY2UobmFtZSwgW2ZpbmFsVmFsXSk7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbn07IC8vIFRoaXMgaXMgYSBtYXAgZnJvbSBBcGhyb2RpdGUncyBnZW5lcmF0ZWQgY2xhc3MgbmFtZXMgdG8gYHRydWVgIChhY3RpbmcgYXMgYVxuLy8gc2V0IG9mIGNsYXNzIG5hbWVzKVxuXG52YXIgYWxyZWFkeUluamVjdGVkID0ge307IC8vIFRoaXMgaXMgdGhlIGJ1ZmZlciBvZiBzdHlsZXMgd2hpY2ggaGF2ZSBub3QgeWV0IGJlZW4gZmx1c2hlZC5cblxudmFyIGluamVjdGlvbkJ1ZmZlclxuLyogOiBzdHJpbmdbXSAqL1xuPSBbXTsgLy8gQSBmbGFnIHRvIHRlbGwgaWYgd2UgYXJlIGFscmVhZHkgYnVmZmVyaW5nIHN0eWxlcy4gVGhpcyBjb3VsZCBoYXBwZW4gZWl0aGVyXG4vLyBiZWNhdXNlIHdlIHNjaGVkdWxlZCBhIGZsdXNoIGNhbGwgYWxyZWFkeSwgc28gbmV3bHkgYWRkZWQgc3R5bGVzIHdpbGxcbi8vIGFscmVhZHkgYmUgZmx1c2hlZCwgb3IgYmVjYXVzZSB3ZSBhcmUgc3RhdGljYWxseSBidWZmZXJpbmcgb24gdGhlIHNlcnZlci5cblxudmFyIGlzQnVmZmVyaW5nID0gZmFsc2U7XG5cbnZhciBpbmplY3RHZW5lcmF0ZWRDU1NPbmNlID0gZnVuY3Rpb24gaW5qZWN0R2VuZXJhdGVkQ1NTT25jZShrZXksIGdlbmVyYXRlZENTUykge1xuICB2YXIgX2luamVjdGlvbkJ1ZmZlcjtcblxuICBpZiAoYWxyZWFkeUluamVjdGVkW2tleV0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWlzQnVmZmVyaW5nKSB7XG4gICAgLy8gV2Ugc2hvdWxkIG5ldmVyIGJlIGF1dG9tYXRpY2FsbHkgYnVmZmVyaW5nIG9uIHRoZSBzZXJ2ZXIgKG9yIGFueVxuICAgIC8vIHBsYWNlIHdpdGhvdXQgYSBkb2N1bWVudCksIHNvIGd1YXJkIGFnYWluc3QgdGhhdC5cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYXV0b21hdGljYWxseSBidWZmZXIgd2l0aG91dCBhIGRvY3VtZW50XCIpO1xuICAgIH0gLy8gSWYgd2UncmUgbm90IGFscmVhZHkgYnVmZmVyaW5nLCBzY2hlZHVsZSBhIGNhbGwgdG8gZmx1c2ggdGhlXG4gICAgLy8gY3VycmVudCBzdHlsZXMuXG5cblxuICAgIGlzQnVmZmVyaW5nID0gdHJ1ZTtcbiAgICBhc2FwKGZsdXNoVG9TdHlsZVRhZyk7XG4gIH1cblxuICAoX2luamVjdGlvbkJ1ZmZlciA9IGluamVjdGlvbkJ1ZmZlcikucHVzaC5hcHBseShfaW5qZWN0aW9uQnVmZmVyLCBfdG9Db25zdW1hYmxlQXJyYXkoZ2VuZXJhdGVkQ1NTKSk7XG5cbiAgYWxyZWFkeUluamVjdGVkW2tleV0gPSB0cnVlO1xufTtcblxudmFyIGluamVjdFN0eWxlT25jZSA9IGZ1bmN0aW9uIGluamVjdFN0eWxlT25jZShrZXlcbi8qIDogc3RyaW5nICovXG4sIHNlbGVjdG9yXG4vKiA6IHN0cmluZyAqL1xuLCBkZWZpbml0aW9uc1xuLyogOiBTaGVldERlZmluaXRpb25bXSAqL1xuLCB1c2VJbXBvcnRhbnRcbi8qIDogYm9vbGVhbiAqL1xuKSB7XG4gIHZhciBzZWxlY3RvckhhbmRsZXJzXG4gIC8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbiAgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IFtdO1xuXG4gIGlmIChhbHJlYWR5SW5qZWN0ZWRba2V5XSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBnZW5lcmF0ZWQgPSBnZW5lcmF0ZUNTUyhzZWxlY3RvciwgZGVmaW5pdGlvbnMsIHNlbGVjdG9ySGFuZGxlcnMsIHN0cmluZ0hhbmRsZXJzLCB1c2VJbXBvcnRhbnQpO1xuICBpbmplY3RHZW5lcmF0ZWRDU1NPbmNlKGtleSwgZ2VuZXJhdGVkKTtcbn07XG52YXIgcmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgaW5qZWN0aW9uQnVmZmVyID0gW107XG4gIGFscmVhZHlJbmplY3RlZCA9IHt9O1xuICBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuICBzdHlsZVRhZyA9IG51bGw7XG59O1xudmFyIHJlc2V0SW5qZWN0ZWRTdHlsZSA9IGZ1bmN0aW9uIHJlc2V0SW5qZWN0ZWRTdHlsZShrZXlcbi8qIDogc3RyaW5nICovXG4pIHtcbiAgZGVsZXRlIGFscmVhZHlJbmplY3RlZFtrZXldO1xufTtcbnZhciBnZXRCdWZmZXJlZFN0eWxlcyA9IGZ1bmN0aW9uIGdldEJ1ZmZlcmVkU3R5bGVzKCkge1xuICByZXR1cm4gaW5qZWN0aW9uQnVmZmVyO1xufTtcbnZhciBzdGFydEJ1ZmZlcmluZyA9IGZ1bmN0aW9uIHN0YXJ0QnVmZmVyaW5nKCkge1xuICBpZiAoaXNCdWZmZXJpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYnVmZmVyIHdoaWxlIGFscmVhZHkgYnVmZmVyaW5nXCIpO1xuICB9XG5cbiAgaXNCdWZmZXJpbmcgPSB0cnVlO1xufTtcblxudmFyIGZsdXNoVG9BcnJheSA9IGZ1bmN0aW9uIGZsdXNoVG9BcnJheSgpIHtcbiAgaXNCdWZmZXJpbmcgPSBmYWxzZTtcbiAgdmFyIHJldCA9IGluamVjdGlvbkJ1ZmZlcjtcbiAgaW5qZWN0aW9uQnVmZmVyID0gW107XG4gIHJldHVybiByZXQ7XG59O1xuXG52YXIgZmx1c2hUb1N0cmluZyA9IGZ1bmN0aW9uIGZsdXNoVG9TdHJpbmcoKSB7XG4gIHJldHVybiBmbHVzaFRvQXJyYXkoKS5qb2luKCcnKTtcbn07XG52YXIgZmx1c2hUb1N0eWxlVGFnID0gZnVuY3Rpb24gZmx1c2hUb1N0eWxlVGFnKCkge1xuICB2YXIgY3NzUnVsZXMgPSBmbHVzaFRvQXJyYXkoKTtcblxuICBpZiAoY3NzUnVsZXMubGVuZ3RoID4gMCkge1xuICAgIGluamVjdFN0eWxlVGFnKGNzc1J1bGVzKTtcbiAgfVxufTtcbnZhciBnZXRSZW5kZXJlZENsYXNzTmFtZXMgPSBmdW5jdGlvbiBnZXRSZW5kZXJlZENsYXNzTmFtZXMoKVxuLyogOiBzdHJpbmdbXSAqL1xue1xuICByZXR1cm4gT2JqZWN0LmtleXMoYWxyZWFkeUluamVjdGVkKTtcbn07XG52YXIgYWRkUmVuZGVyZWRDbGFzc05hbWVzID0gZnVuY3Rpb24gYWRkUmVuZGVyZWRDbGFzc05hbWVzKGNsYXNzTmFtZXNcbi8qIDogc3RyaW5nW10gKi9cbikge1xuICBjbGFzc05hbWVzLmZvckVhY2goZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgIGFscmVhZHlJbmplY3RlZFtjbGFzc05hbWVdID0gdHJ1ZTtcbiAgfSk7XG59O1xuXG52YXIgaXNWYWxpZFN0eWxlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIGlzVmFsaWRTdHlsZURlZmluaXRpb24oZGVmXG4vKiA6IE9iamVjdCAqL1xuKSB7XG4gIHJldHVybiBcIl9kZWZpbml0aW9uXCIgaW4gZGVmICYmIFwiX25hbWVcIiBpbiBkZWYgJiYgXCJfbGVuXCIgaW4gZGVmO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZURlZmluaXRpb25zID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMoc3R5bGVEZWZpbml0aW9uc1xuLyogOiBhbnlbXSAqL1xuLCBjbGFzc05hbWVCaXRzXG4vKiA6IHN0cmluZ1tdICovXG4sIGRlZmluaXRpb25CaXRzXG4vKiA6IE9iamVjdFtdICovXG4sIGxlbmd0aFxuLyogOiBudW1iZXIgKi9cbilcbi8qIDogbnVtYmVyICovXG57XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVEZWZpbml0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIC8vIEZpbHRlciBvdXQgZmFsc3kgdmFsdWVzIGZyb20gdGhlIGlucHV0LCB0byBhbGxvdyBmb3JcbiAgICAvLyBgY3NzKGEsIHRlc3QgJiYgYylgXG4gICAgaWYgKHN0eWxlRGVmaW5pdGlvbnNbaV0pIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlRGVmaW5pdGlvbnNbaV0pKSB7XG4gICAgICAgIC8vIFdlJ3ZlIGVuY291bnRlcmVkIGFuIGFycmF5LCBzbyBsZXQncyByZWN1cnNlXG4gICAgICAgIGxlbmd0aCArPSBwcm9jZXNzU3R5bGVEZWZpbml0aW9ucyhzdHlsZURlZmluaXRpb25zW2ldLCBjbGFzc05hbWVCaXRzLCBkZWZpbml0aW9uQml0cywgbGVuZ3RoKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNWYWxpZFN0eWxlRGVmaW5pdGlvbihzdHlsZURlZmluaXRpb25zW2ldKSkge1xuICAgICAgICBjbGFzc05hbWVCaXRzLnB1c2goc3R5bGVEZWZpbml0aW9uc1tpXS5fbmFtZSk7XG4gICAgICAgIGRlZmluaXRpb25CaXRzLnB1c2goc3R5bGVEZWZpbml0aW9uc1tpXS5fZGVmaW5pdGlvbik7XG4gICAgICAgIGxlbmd0aCArPSBzdHlsZURlZmluaXRpb25zW2ldLl9sZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFN0eWxlIERlZmluaXRpb246IFN0eWxlcyBzaG91bGQgYmUgZGVmaW5lZCB1c2luZyB0aGUgU3R5bGVTaGVldC5jcmVhdGUgbWV0aG9kLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGVuZ3RoO1xufTtcbi8qKlxuICogSW5qZWN0IHN0eWxlcyBhc3NvY2lhdGVkIHdpdGggdGhlIHBhc3NlZCBzdHlsZSBkZWZpbml0aW9uIG9iamVjdHMsIGFuZCByZXR1cm5cbiAqIGFuIGFzc29jaWF0ZWQgQ1NTIGNsYXNzIG5hbWUuXG4gKlxuICogQHBhcmFtIHtib29sZWFufSB1c2VJbXBvcnRhbnQgSWYgdHJ1ZSwgd2lsbCBhcHBlbmQgIWltcG9ydGFudCB0byBnZW5lcmF0ZWRcbiAqICAgICBDU1Mgb3V0cHV0LiBlLmcuIHtjb2xvcjogcmVkfSAtPiBcImNvbG9yOiByZWQgIWltcG9ydGFudFwiLlxuICogQHBhcmFtIHsoT2JqZWN0fE9iamVjdFtdKVtdfSBzdHlsZURlZmluaXRpb25zIHN0eWxlIGRlZmluaXRpb24gb2JqZWN0cywgb3JcbiAqICAgICBhcmJpdHJhcmlseSBuZXN0ZWQgYXJyYXlzIG9mIHRoZW0sIGFzIHJldHVybmVkIGFzIHByb3BlcnRpZXMgb2YgdGhlXG4gKiAgICAgcmV0dXJuIHZhbHVlIG9mIFN0eWxlU2hlZXQuY3JlYXRlKCkuXG4gKi9cblxuXG52YXIgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lID0gZnVuY3Rpb24gaW5qZWN0QW5kR2V0Q2xhc3NOYW1lKHVzZUltcG9ydGFudFxuLyogOiBib29sZWFuICovXG4sIHN0eWxlRGVmaW5pdGlvbnNcbi8qIDogTWF5YmVTaGVldERlZmluaXRpb25bXSAqL1xuLCBzZWxlY3RvckhhbmRsZXJzXG4vKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4pXG4vKiA6IHN0cmluZyAqL1xue1xuICB2YXIgY2xhc3NOYW1lQml0cyA9IFtdO1xuICB2YXIgZGVmaW5pdGlvbkJpdHMgPSBbXTsgLy8gTXV0YXRlcyBjbGFzc05hbWVCaXRzIGFuZCBkZWZpbml0aW9uQml0cyBhbmQgcmV0dXJucyBhIGxlbmd0aCB3aGljaCB3ZVxuICAvLyB3aWxsIGFwcGVuZCB0byB0aGUgaGFzaCB0byBkZWNyZWFzZSB0aGUgY2hhbmNlIG9mIGhhc2ggY29sbGlzaW9ucy5cblxuICB2YXIgbGVuZ3RoID0gcHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMoc3R5bGVEZWZpbml0aW9ucywgY2xhc3NOYW1lQml0cywgZGVmaW5pdGlvbkJpdHMsIDApOyAvLyBCcmVhayBpZiB0aGVyZSBhcmVuJ3QgYW55IHZhbGlkIHN0eWxlcy5cblxuICBpZiAoY2xhc3NOYW1lQml0cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHZhciBjbGFzc05hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVCaXRzLmxlbmd0aCA9PT0gMSA/IFwiX1wiLmNvbmNhdChjbGFzc05hbWVCaXRzWzBdKSA6IFwiX1wiLmNvbmNhdChoYXNoU3RyaW5nKGNsYXNzTmFtZUJpdHMuam9pbigpKSkuY29uY2F0KChsZW5ndGggJSAzNikudG9TdHJpbmcoMzYpKTtcbiAgfSBlbHNlIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVCaXRzLmpvaW4oXCItb19PLVwiKTtcbiAgfVxuXG4gIGluamVjdFN0eWxlT25jZShjbGFzc05hbWUsIFwiLlwiLmNvbmNhdChjbGFzc05hbWUpLCBkZWZpbml0aW9uQml0cywgdXNlSW1wb3J0YW50LCBzZWxlY3RvckhhbmRsZXJzKTtcbiAgcmV0dXJuIGNsYXNzTmFtZTtcbn07XG5cbi8qIDo6XG5pbXBvcnQgdHlwZSB7IFNlbGVjdG9ySGFuZGxlciB9IGZyb20gJy4vZ2VuZXJhdGUuanMnO1xuZXhwb3J0IHR5cGUgU2hlZXREZWZpbml0aW9uID0geyBbaWQ6c3RyaW5nXTogYW55IH07XG5leHBvcnQgdHlwZSBTaGVldERlZmluaXRpb25zID0gU2hlZXREZWZpbml0aW9uIHwgU2hlZXREZWZpbml0aW9uW107XG50eXBlIFJlbmRlckZ1bmN0aW9uID0gKCkgPT4gc3RyaW5nO1xudHlwZSBFeHRlbnNpb24gPSB7XG4gICAgc2VsZWN0b3JIYW5kbGVyOiBTZWxlY3RvckhhbmRsZXJcbn07XG5leHBvcnQgdHlwZSBNYXliZVNoZWV0RGVmaW5pdGlvbiA9IFNoZWV0RGVmaW5pdGlvbiB8IGZhbHNlIHwgbnVsbCB8IHZvaWRcbiovXG5cbnZhciB1bm1pbmlmaWVkSGFzaEZuID0gZnVuY3Rpb24gdW5taW5pZmllZEhhc2hGbihzdHJcbi8qIDogc3RyaW5nICovXG4sIGtleVxuLyogOiBzdHJpbmcgKi9cbikge1xuICByZXR1cm4gXCJcIi5jb25jYXQoa2V5LCBcIl9cIikuY29uY2F0KGhhc2hTdHJpbmcoc3RyKSk7XG59OyAvLyBTdHlsZVNoZWV0LmNyZWF0ZSBpcyBpbiBhIGhvdCBwYXRoIHNvIHdlIHdhbnQgdG8ga2VlcCBhcyBtdWNoIGxvZ2ljIG91dCBvZiBpdFxuLy8gYXMgcG9zc2libGUuIFNvLCB3ZSBmaWd1cmUgb3V0IHdoaWNoIGhhc2ggZnVuY3Rpb24gdG8gdXNlIG9uY2UsIGFuZCBvbmx5XG4vLyBzd2l0Y2ggaXQgb3V0IHZpYSBtaW5pZnkoKSBhcyBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyBpcyBpbiBhbiBleHBvcnRlZCBmdW5jdGlvbiB0byBtYWtlIGl0IGVhc2llciB0byB0ZXN0LlxuXG5cbnZhciBpbml0aWFsSGFzaEZuID0gZnVuY3Rpb24gaW5pdGlhbEhhc2hGbigpIHtcbiAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyBoYXNoU3RyaW5nIDogdW5taW5pZmllZEhhc2hGbjtcbn07XG52YXIgaGFzaEZuID0gaW5pdGlhbEhhc2hGbigpO1xudmFyIFN0eWxlU2hlZXQgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKHNoZWV0RGVmaW5pdGlvblxuICAvKiA6IFNoZWV0RGVmaW5pdGlvbiAqL1xuICApXG4gIC8qIDogT2JqZWN0ICovXG4gIHtcbiAgICB2YXIgbWFwcGVkU2hlZXREZWZpbml0aW9uID0ge307XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzaGVldERlZmluaXRpb24pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWwgPSBzaGVldERlZmluaXRpb25ba2V5XTtcbiAgICAgIHZhciBzdHJpbmdWYWwgPSBKU09OLnN0cmluZ2lmeSh2YWwpO1xuICAgICAgbWFwcGVkU2hlZXREZWZpbml0aW9uW2tleV0gPSB7XG4gICAgICAgIF9sZW46IHN0cmluZ1ZhbC5sZW5ndGgsXG4gICAgICAgIF9uYW1lOiBoYXNoRm4oc3RyaW5nVmFsLCBrZXkpLFxuICAgICAgICBfZGVmaW5pdGlvbjogdmFsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBtYXBwZWRTaGVldERlZmluaXRpb247XG4gIH0sXG4gIHJlaHlkcmF0ZTogZnVuY3Rpb24gcmVoeWRyYXRlKCkge1xuICAgIHZhciByZW5kZXJlZENsYXNzTmFtZXNcbiAgICAvKiA6IHN0cmluZ1tdICovXG4gICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAgIGFkZFJlbmRlcmVkQ2xhc3NOYW1lcyhyZW5kZXJlZENsYXNzTmFtZXMpO1xuICB9XG59O1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHVzaW5nIEFwaHJvZGl0ZSBzZXJ2ZXItc2lkZS5cbiAqXG4gKiBUaGlzIGNhbiBiZSBtaW5pZmllZCBvdXQgaW4gY2xpZW50LW9ubHkgYnVuZGxlcyBieSByZXBsYWNpbmcgYHR5cGVvZiB3aW5kb3dgXG4gKiB3aXRoIGBcIm9iamVjdFwiYCwgZS5nLiB2aWEgV2VicGFjaydzIERlZmluZVBsdWdpbjpcbiAqXG4gKiAgIG5ldyB3ZWJwYWNrLkRlZmluZVBsdWdpbih7XG4gKiAgICAgXCJ0eXBlb2Ygd2luZG93XCI6IEpTT04uc3RyaW5naWZ5KFwib2JqZWN0XCIpXG4gKiAgIH0pXG4gKi9cblxudmFyIFN0eWxlU2hlZXRTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IG51bGwgOiB7XG4gIHJlbmRlclN0YXRpYzogZnVuY3Rpb24gcmVuZGVyU3RhdGljKHJlbmRlckZ1bmNcbiAgLyogOiBSZW5kZXJGdW5jdGlvbiAqL1xuICApIHtcbiAgICByZXNldCgpO1xuICAgIHN0YXJ0QnVmZmVyaW5nKCk7XG4gICAgdmFyIGh0bWwgPSByZW5kZXJGdW5jKCk7XG4gICAgdmFyIGNzc0NvbnRlbnQgPSBmbHVzaFRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGh0bWw6IGh0bWwsXG4gICAgICBjc3M6IHtcbiAgICAgICAgY29udGVudDogY3NzQ29udGVudCxcbiAgICAgICAgcmVuZGVyZWRDbGFzc05hbWVzOiBnZXRSZW5kZXJlZENsYXNzTmFtZXMoKVxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG4vKipcbiAqIFV0aWxpdGllcyBmb3IgdXNpbmcgQXBocm9kaXRlIGluIHRlc3RzLlxuICpcbiAqIE5vdCBtZWFudCB0byBiZSB1c2VkIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIFN0eWxlU2hlZXRUZXN0VXRpbHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gbnVsbCA6IHtcbiAgLyoqXG4gICogUHJldmVudCBzdHlsZXMgZnJvbSBiZWluZyBpbmplY3RlZCBpbnRvIHRoZSBET00uXG4gICpcbiAgKiBUaGlzIGlzIHVzZWZ1bCBpbiBzaXR1YXRpb25zIHdoZXJlIHlvdSdkIGxpa2UgdG8gdGVzdCByZW5kZXJpbmcgVUlcbiAgKiBjb21wb25lbnRzIHdoaWNoIHVzZSBBcGhyb2RpdGUgd2l0aG91dCBhbnkgb2YgdGhlIHNpZGUtZWZmZWN0cyBvZlxuICAqIEFwaHJvZGl0ZSBoYXBwZW5pbmcuIFBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHRlc3RpbmcgdGhlIG91dHB1dCBvZlxuICAqIGNvbXBvbmVudHMgd2hlbiB5b3UgaGF2ZSBubyBET00sIGUuZy4gdGVzdGluZyBpbiBOb2RlIHdpdGhvdXQgYSBmYWtlIERPTS5cbiAgKlxuICAqIFNob3VsZCBiZSBwYWlyZWQgd2l0aCBhIHN1YnNlcXVlbnQgY2FsbCB0b1xuICAqIGNsZWFyQnVmZmVyQW5kUmVzdW1lU3R5bGVJbmplY3Rpb24uXG4gICovXG4gIHN1cHByZXNzU3R5bGVJbmplY3Rpb246IGZ1bmN0aW9uIHN1cHByZXNzU3R5bGVJbmplY3Rpb24oKSB7XG4gICAgcmVzZXQoKTtcbiAgICBzdGFydEJ1ZmZlcmluZygpO1xuICB9LFxuXG4gIC8qKlxuICAqIE9wcG9zaXRlIG1ldGhvZCBvZiBwcmV2ZW50U3R5bGVJbmplY3QuXG4gICovXG4gIGNsZWFyQnVmZmVyQW5kUmVzdW1lU3R5bGVJbmplY3Rpb246IGZ1bmN0aW9uIGNsZWFyQnVmZmVyQW5kUmVzdW1lU3R5bGVJbmplY3Rpb24oKSB7XG4gICAgcmVzZXQoKTtcbiAgfSxcblxuICAvKipcbiAgKiBSZXR1cm5zIGEgc3RyaW5nIG9mIGJ1ZmZlcmVkIHN0eWxlcyB3aGljaCBoYXZlIG5vdCBiZWVuIGZsdXNoZWRcbiAgKlxuICAqIEByZXR1cm5zIHtzdHJpbmd9ICBCdWZmZXIgb2Ygc3R5bGVzIHdoaWNoIGhhdmUgbm90IHlldCBiZWVuIGZsdXNoZWQuXG4gICovXG4gIGdldEJ1ZmZlcmVkU3R5bGVzOiBmdW5jdGlvbiBnZXRCdWZmZXJlZFN0eWxlcyQxKCkge1xuICAgIHJldHVybiBnZXRCdWZmZXJlZFN0eWxlcygpO1xuICB9XG59O1xuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgQXBocm9kaXRlIEFQSSBleHBvcnRzLCB3aXRoIGdpdmVuIGBzZWxlY3RvckhhbmRsZXJzYCBhbmRcbiAqIGB1c2VJbXBvcnRhbnRgIHN0YXRlLlxuICovXG5cbmZ1bmN0aW9uIG1ha2VFeHBvcnRzKHVzZUltcG9ydGFudFxuLyogOiBib29sZWFuICovXG4pIHtcbiAgdmFyIHNlbGVjdG9ySGFuZGxlcnNcbiAgLyogOiBTZWxlY3RvckhhbmRsZXJbXSAqL1xuICA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnM7XG4gIHJldHVybiB7XG4gICAgU3R5bGVTaGVldDogX29iamVjdFNwcmVhZCh7fSwgU3R5bGVTaGVldCwge1xuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGEgdmVyc2lvbiBvZiB0aGUgZXhwb3J0cyBvZiBBcGhyb2RpdGUgKGkuZS4gYW4gb2JqZWN0XG4gICAgICAgKiB3aXRoIGBjc3NgIGFuZCBgU3R5bGVTaGVldGAgcHJvcGVydGllcykgd2hpY2ggaGF2ZSBzb21lXG4gICAgICAgKiBleHRlbnNpb25zIGluY2x1ZGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPE9iamVjdD59IGV4dGVuc2lvbnM6IEFuIGFycmF5IG9mIGV4dGVuc2lvbnMgdG9cbiAgICAgICAqICAgICBhZGQgdG8gdGhpcyBpbnN0YW5jZSBvZiBBcGhyb2RpdGUuIEVhY2ggb2JqZWN0IHNob3VsZCBoYXZlIGFcbiAgICAgICAqICAgICBzaW5nbGUgcHJvcGVydHkgb24gaXQsIGRlZmluaW5nIHdoaWNoIGtpbmQgb2YgZXh0ZW5zaW9uIHRvXG4gICAgICAgKiAgICAgYWRkLlxuICAgICAgICogQHBhcmFtIHtTZWxlY3RvckhhbmRsZXJ9IFtleHRlbnNpb25zW10uc2VsZWN0b3JIYW5kbGVyXTogQVxuICAgICAgICogICAgIHNlbGVjdG9yIGhhbmRsZXIgZXh0ZW5zaW9uLiBTZWUgYGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzYCBpblxuICAgICAgICogICAgIGdlbmVyYXRlLmpzLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBleHBvcnRzIG9mIHRoZSBuZXdcbiAgICAgICAqICAgICBpbnN0YW5jZSBvZiBBcGhyb2RpdGUuXG4gICAgICAgKi9cbiAgICAgIGV4dGVuZDogZnVuY3Rpb24gZXh0ZW5kKGV4dGVuc2lvbnNcbiAgICAgIC8qIDogRXh0ZW5zaW9uW10gKi9cbiAgICAgICkge1xuICAgICAgICB2YXIgZXh0ZW5zaW9uU2VsZWN0b3JIYW5kbGVycyA9IGV4dGVuc2lvbnMgLy8gUHVsbCBvdXQgZXh0ZW5zaW9ucyB3aXRoIGEgc2VsZWN0b3JIYW5kbGVyIHByb3BlcnR5XG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGV4dGVuc2lvbikge1xuICAgICAgICAgIHJldHVybiBleHRlbnNpb24uc2VsZWN0b3JIYW5kbGVyO1xuICAgICAgICB9KSAvLyBSZW1vdmUgbnVsbHMgKGkuZS4gZXh0ZW5zaW9ucyB3aXRob3V0IGEgc2VsZWN0b3JIYW5kbGVyIHByb3BlcnR5KS5cbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1ha2VFeHBvcnRzKHVzZUltcG9ydGFudCwgc2VsZWN0b3JIYW5kbGVycy5jb25jYXQoZXh0ZW5zaW9uU2VsZWN0b3JIYW5kbGVycykpO1xuICAgICAgfVxuICAgIH0pLFxuICAgIFN0eWxlU2hlZXRTZXJ2ZXI6IFN0eWxlU2hlZXRTZXJ2ZXIsXG4gICAgU3R5bGVTaGVldFRlc3RVdGlsczogU3R5bGVTaGVldFRlc3RVdGlscyxcbiAgICBtaW5pZnk6IGZ1bmN0aW9uIG1pbmlmeShzaG91bGRNaW5pZnlcbiAgICAvKiA6IGJvb2xlYW4gKi9cbiAgICApIHtcbiAgICAgIGhhc2hGbiA9IHNob3VsZE1pbmlmeSA/IGhhc2hTdHJpbmcgOiB1bm1pbmlmaWVkSGFzaEZuO1xuICAgIH0sXG4gICAgY3NzOiBmdW5jdGlvbiBjc3MoKVxuICAgIC8qIDogTWF5YmVTaGVldERlZmluaXRpb25bXSAqL1xuICAgIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZURlZmluaXRpb25zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBzdHlsZURlZmluaXRpb25zW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5qZWN0QW5kR2V0Q2xhc3NOYW1lKHVzZUltcG9ydGFudCwgc3R5bGVEZWZpbml0aW9ucywgc2VsZWN0b3JIYW5kbGVycyk7XG4gICAgfSxcbiAgICBmbHVzaFRvU3R5bGVUYWc6IGZsdXNoVG9TdHlsZVRhZyxcbiAgICBpbmplY3RBbmRHZXRDbGFzc05hbWU6IGluamVjdEFuZEdldENsYXNzTmFtZSxcbiAgICBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyczogZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnMsXG4gICAgcmVzZXQ6IHJlc2V0LFxuICAgIHJlc2V0SW5qZWN0ZWRTdHlsZTogcmVzZXRJbmplY3RlZFN0eWxlXG4gIH07XG59XG5cbmV4cG9ydCB7IG1ha2VFeHBvcnRzIGFzIGEgfTtcbiIsImltcG9ydCB7IGEgYXMgbWFrZUV4cG9ydHMgfSBmcm9tICcuL2NodW5rLWZlYmNlNDZiLmpzJztcbmltcG9ydCAnc3RyaW5nLWhhc2gnO1xuaW1wb3J0ICdhc2FwJztcblxudmFyIHVzZUltcG9ydGFudCA9IHRydWU7IC8vIEFkZCAhaW1wb3J0YW50IHRvIGFsbCBzdHlsZSBkZWZpbml0aW9uc1xuXG52YXIgQXBocm9kaXRlID0gbWFrZUV4cG9ydHModXNlSW1wb3J0YW50KTtcbnZhciBTdHlsZVNoZWV0ID0gQXBocm9kaXRlLlN0eWxlU2hlZXQsXG4gICAgU3R5bGVTaGVldFNlcnZlciA9IEFwaHJvZGl0ZS5TdHlsZVNoZWV0U2VydmVyLFxuICAgIFN0eWxlU2hlZXRUZXN0VXRpbHMgPSBBcGhyb2RpdGUuU3R5bGVTaGVldFRlc3RVdGlscyxcbiAgICBjc3MgPSBBcGhyb2RpdGUuY3NzLFxuICAgIG1pbmlmeSA9IEFwaHJvZGl0ZS5taW5pZnksXG4gICAgZmx1c2hUb1N0eWxlVGFnID0gQXBocm9kaXRlLmZsdXNoVG9TdHlsZVRhZyxcbiAgICBpbmplY3RBbmRHZXRDbGFzc05hbWUgPSBBcGhyb2RpdGUuaW5qZWN0QW5kR2V0Q2xhc3NOYW1lLFxuICAgIGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzID0gQXBocm9kaXRlLmRlZmF1bHRTZWxlY3RvckhhbmRsZXJzLFxuICAgIHJlc2V0ID0gQXBocm9kaXRlLnJlc2V0LFxuICAgIHJlc2V0SW5qZWN0ZWRTdHlsZSA9IEFwaHJvZGl0ZS5yZXNldEluamVjdGVkU3R5bGU7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQsIFN0eWxlU2hlZXRTZXJ2ZXIsIFN0eWxlU2hlZXRUZXN0VXRpbHMsIGNzcywgbWluaWZ5LCBmbHVzaFRvU3R5bGVUYWcsIGluamVjdEFuZEdldENsYXNzTmFtZSwgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnMsIHJlc2V0LCByZXNldEluamVjdGVkU3R5bGUgfTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gXCJhcGhyb2RpdGVcIjtcblxuY29uc3QgTm90aWZpY2F0aW9uSXRlbSA9IFJlYWN0Lm1lbW8oZnVuY3Rpb24gTm90aWZpY2F0aW9uSXRlbSh7XG4gIHR5cGUsXG4gIHZhbHVlLFxuICBodG1sLFxuICBtYXJrQXNSZWFkLFxuICBpZCxcbn0pIHtcbiAgbGV0IGxpc3RJdGVtO1xuXG4gIGxldCB0eXBlU3R5bGUgPSBjc3ModHlwZSA9PT0gXCJ1cmdlbnRcIiA/IHN0eWxlcy51cmdlbnQgOiBzdHlsZXMuZGVmYXVsdCk7XG5cbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKHR5cGUgPT09IFwibm9Ob3RpZmljYXRpb25zXCIpIHtcbiAgICAgIGxpc3RJdGVtID0gKFxuICAgICAgICA8bGlcbiAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubm9Ob3RpZmljYXRpb25zKX1cbiAgICAgICAgICBkYXRhLW5vdGlmaWNhdGlvbi10eXBlPXt0eXBlfVxuICAgICAgICA+XG4gICAgICAgICAge3ZhbHVlfVxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdEl0ZW0gPSAoXG4gICAgICAgIDxsaVxuICAgICAgICAgIGNsYXNzTmFtZT17dHlwZVN0eWxlfVxuICAgICAgICAgIGRhdGEtbm90aWZpY2F0aW9uLXR5cGU9e3R5cGV9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4gbWFya0FzUmVhZChpZCl9XG4gICAgICAgID5cbiAgICAgICAgICB7dmFsdWV9XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsaXN0SXRlbSA9IChcbiAgICAgIDxsaVxuICAgICAgICBjbGFzc05hbWU9e3R5cGVTdHlsZX1cbiAgICAgICAgZGF0YS1ub3RpZmljYXRpb24tdHlwZT17dHlwZX1cbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e2h0bWx9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IG1hcmtBc1JlYWQoaWQpfVxuICAgICAgPjwvbGk+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBsaXN0SXRlbTtcbn0pO1xuXG5Ob3RpZmljYXRpb25JdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogXCJkZWZhdWx0XCIsXG4gIHZhbHVlOiBcIlwiLFxuICBodG1sOiB7fSxcbiAgbWFya0FzUmVhZDogKCkgPT4ge30sXG4gIGlkOiBOYU4sXG59O1xuXG5Ob3RpZmljYXRpb25JdGVtLnByb3BUeXBlcyA9IHtcbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGh0bWw6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19odG1sOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB9KSxcbiAgbWFya0FzUmVhZDogUHJvcFR5cGVzLmZ1bmMsXG4gIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG59O1xuXG5jb25zdCBzY3JlZW5TaXplID0ge1xuICBzbWFsbDogXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweClcIixcbn07XG5cbmNvbnN0IGxpc3RJdGVtU21hbGwgPSB7XG4gIGxpc3RTdHlsZTogXCJub25lXCIsXG4gIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgYmxhY2tcIixcbiAgcGFkZGluZzogXCIxMHB4IDhweFwiLFxuICBmb250U2l6ZTogXCIyMHB4XCIsXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGRlZmF1bHQ6IHtcbiAgICBjb2xvcjogXCJibHVlXCIsXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICB9LFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXTogbGlzdEl0ZW1TbWFsbCxcbiAgfSxcblxuICB1cmdlbnQ6IHtcbiAgICBjb2xvcjogXCJyZWRcIixcbiAgICBcIjpob3ZlclwiOiB7XG4gICAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICAgIH0sXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiBsaXN0SXRlbVNtYWxsLFxuICB9LFxuXG4gIG5vTm90aWZpY2F0aW9uczoge1xuICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiBsaXN0SXRlbVNtYWxsLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbkl0ZW07XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZDM1OGJiMzVkYzAxMTY5NWI4NGNlNjdmOTIxNGMyYmYucG5nXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbkl0ZW0gZnJvbSBcIi4vTm90aWZpY2F0aW9uSXRlbVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGNsb3NlSWNvbiBmcm9tIFwiLi4vYXNzZXRzL2Nsb3NlLWljb24ucG5nXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmZ1bmN0aW9uIE5vdGlmaWNhdGlvbnMocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGRpc3BsYXlEcmF3ZXIsXG4gICAgbGlzdE5vdGlmaWNhdGlvbnMsXG4gICAgaGFuZGxlRGlzcGxheURyYXdlcixcbiAgICBoYW5kbGVIaWRlRHJhd2VyLFxuICAgIG1hcmtOb3RpZmljYXRpb25Bc1JlYWQsXG4gICAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyLFxuICB9ID0gcHJvcHM7XG5cbiAgY29uc3QgbWVudVBTdHlsZSA9IGNzcyhcbiAgICBkaXNwbGF5RHJhd2VyID8gc3R5bGVzLm1lbnVJdGVtUE5vU2hvdyA6IHN0eWxlcy5tZW51SXRlbVBTaG93XG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubWVudUl0ZW0pfVxuICAgICAgICBpZD1cIm1lbnVJdGVtXCJcbiAgICAgICAgb25DbGljaz17aGFuZGxlRGlzcGxheURyYXdlcn1cbiAgICAgID5cbiAgICAgICAgPHAgY2xhc3NOYW1lPXttZW51UFN0eWxlfT5Zb3VyIG5vdGlmaWNhdGlvbnM8L3A+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtkaXNwbGF5RHJhd2VyICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMubm90aWZpY2F0aW9ucyl9IGlkPVwiTm90aWZpY2F0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwidHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICAgICAgcmlnaHQ6IDIwLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjbG9zZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVIaWRlRHJhd2VyfVxuICAgICAgICAgICAgaWQ9XCJjbG9zZU5vdGlmaWNhdGlvbnNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgc3JjPXtjbG9zZUljb259XG4gICAgICAgICAgICAgIGFsdD1cImNsb3NlLWljb25cIlxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubm90aWZpY2F0aW9uc0J1dHRvbkltYWdlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLm5vdGlmaWNhdGlvbnNQKX0+XG4gICAgICAgICAgICBIZXJlIGlzIHRoZSBsaXN0IG9mIG5vdGlmaWNhdGlvbnNcbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuZmlsdGVyQnV0dG9uKX1cbiAgICAgICAgICAgIGlkPVwiYnV0dG9uRmlsdGVyVXJnZW50XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyKFwiVVJHRU5UXCIpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICDinZfinZdcbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5maWx0ZXJCdXR0b24pfVxuICAgICAgICAgICAgaWQ9XCJidXR0b25GaWx0ZXJEZWZhdWx0XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyKFwiREVGQVVMVFwiKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAg8J+SoFxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDx1bCBjbGFzc05hbWU9e2NzcyhzdHlsZXMubm90aWZpY2F0aW9uc1VMKX0+XG4gICAgICAgICAgICB7KCFsaXN0Tm90aWZpY2F0aW9ucyB8fCBsaXN0Tm90aWZpY2F0aW9ucy5jb3VudCgpID09PSAwKSAmJiAoXG4gICAgICAgICAgICAgIDxOb3RpZmljYXRpb25JdGVtXG4gICAgICAgICAgICAgICAgdHlwZT1cIm5vTm90aWZpY2F0aW9uc1wiXG4gICAgICAgICAgICAgICAgdmFsdWU9XCJObyBuZXcgbm90aWZpY2F0aW9ucyBmb3Igbm93XCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHtsaXN0Tm90aWZpY2F0aW9ucyAmJlxuICAgICAgICAgICAgICBsaXN0Tm90aWZpY2F0aW9ucy52YWx1ZVNlcSgpLm1hcCgobm90aWZpY2F0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGh0bWwgPSBub3RpZmljYXRpb24uZ2V0KFwiaHRtbFwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChodG1sKSBodG1sID0gaHRtbC50b0pTKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbkl0ZW1cbiAgICAgICAgICAgICAgICAgICAga2V5PXtub3RpZmljYXRpb24uZ2V0KFwiZ3VpZFwiKX1cbiAgICAgICAgICAgICAgICAgICAgaWQ9e25vdGlmaWNhdGlvbi5nZXQoXCJndWlkXCIpfVxuICAgICAgICAgICAgICAgICAgICB0eXBlPXtub3RpZmljYXRpb24uZ2V0KFwidHlwZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e25vdGlmaWNhdGlvbi5nZXQoXCJ2YWx1ZVwiKX1cbiAgICAgICAgICAgICAgICAgICAgaHRtbD17aHRtbH1cbiAgICAgICAgICAgICAgICAgICAgbWFya0FzUmVhZD17bWFya05vdGlmaWNhdGlvbkFzUmVhZH1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufVxuXG5Ob3RpZmljYXRpb25zLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzcGxheURyYXdlcjogZmFsc2UsXG4gIGxpc3ROb3RpZmljYXRpb25zOiBudWxsLFxuICBoYW5kbGVEaXNwbGF5RHJhd2VyOiAoKSA9PiB7fSxcbiAgaGFuZGxlSGlkZURyYXdlcjogKCkgPT4ge30sXG4gIG1hcmtOb3RpZmljYXRpb25Bc1JlYWQ6ICgpID0+IHt9LFxuICBmZXRjaE5vdGlmaWNhdGlvbnM6ICgpID0+IHt9LFxuICBzZXROb3RpZmljYXRpb25GaWx0ZXI6ICgpID0+IHt9LFxufTtcblxuTm90aWZpY2F0aW9ucy5wcm9wVHlwZXMgPSB7XG4gIGRpc3BsYXlEcmF3ZXI6IFByb3BUeXBlcy5ib29sLFxuICBsaXN0Tm90aWZpY2F0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgaGFuZGxlRGlzcGxheURyYXdlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhbmRsZUhpZGVEcmF3ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmNvbnN0IGNzc1ZhcnMgPSB7XG4gIG1haW5Db2xvcjogXCIjZTAxZDNmXCIsXG59O1xuXG5jb25zdCBzY3JlZW5TaXplID0ge1xuICBzbWFsbDogXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweClcIixcbn07XG5cbmNvbnN0IG9wYWNpdHlLZXlmcmFtZXMgPSB7XG4gIGZyb206IHtcbiAgICBvcGFjaXR5OiAwLjUsXG4gIH0sXG5cbiAgdG86IHtcbiAgICBvcGFjaXR5OiAxLFxuICB9LFxufTtcblxuY29uc3QgdHJhbnNsYXRlWUtleWZyYW1lcyA9IHtcbiAgXCIwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoMClcIixcbiAgfSxcblxuICBcIjUwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoLTVweClcIixcbiAgfSxcblxuICBcIjc1JVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoNXB4KVwiLFxuICB9LFxuXG4gIFwiMTAwJVwiOiB7XG4gICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVkoMClcIixcbiAgfSxcbn07XG5cbmNvbnN0IGJvcmRlcktleWZyYW1lcyA9IHtcbiAgXCIwJVwiOiB7XG4gICAgYm9yZGVyOiBgM3B4IGRhc2hlZCBkZWVwU2t5Qmx1ZWAsXG4gIH0sXG5cbiAgXCIxMDAlXCI6IHtcbiAgICBib3JkZXI6IGAzcHggZGFzaGVkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgfSxcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgbWVudUl0ZW06IHtcbiAgICBmbG9hdDogXCJyaWdodFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogXCIjZmZmOGY4XCIsXG4gICAgXCI6aG92ZXJcIjoge1xuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgIGFuaW1hdGlvbk5hbWU6IFtvcGFjaXR5S2V5ZnJhbWVzLCB0cmFuc2xhdGVZS2V5ZnJhbWVzXSxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIjFzLCAwLjVzXCIsXG4gICAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMyxcbiAgICB9LFxuICB9LFxuXG4gIG1lbnVJdGVtUE5vU2hvdzoge1xuICAgIG1hcmdpblJpZ2h0OiBcIjhweFwiLFxuICAgIGRpc3BsYXk6IFwibm9uZVwiLFxuICB9LFxuXG4gIG1lbnVJdGVtUFNob3c6IHtcbiAgICBtYXJnaW5SaWdodDogXCI4cHhcIixcbiAgfSxcblxuICBub3RpZmljYXRpb25zOiB7XG4gICAgLy8gZmxvYXQ6IFwicmlnaHRcIixcbiAgICAvLyBib3JkZXI6IGAzcHggZGFzaGVkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgICBwYWRkaW5nOiBcIjEwcHhcIixcbiAgICBtYXJnaW5Cb3R0b206IFwiMjBweFwiLFxuICAgIGFuaW1hdGlvbk5hbWU6IFtib3JkZXJLZXlmcmFtZXNdLFxuICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIjAuOHNcIixcbiAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgICBhbmltYXRpb25GaWxsTW9kZTogXCJmb3J3YXJkc1wiLFxuICAgIFwiOmhvdmVyXCI6IHtcbiAgICAgIGJvcmRlcjogYDNweCBkYXNoZWQgZGVlcFNreUJsdWVgLFxuICAgICAgLy8gYW5pbWF0aW9uRmlsbE1vZGU6IFwiZm9yd2FyZHNcIixcbiAgICB9LFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXToge1xuICAgICAgZmxvYXQ6IFwibm9uZVwiLFxuICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgIGxpc3RTdHlsZTogXCJub25lXCIsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgZm9udFNpemU6IFwiMjBweFwiLFxuICAgICAgXCI6aG92ZXJcIjoge1xuICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICAvLyBhbmltYXRpb25GaWxsTW9kZTogXCJmb3J3YXJkc1wiLFxuICAgICAgfSxcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBiYWNrZ3JvdW5kOiBcIndoaXRlXCIsXG4gICAgICBoZWlnaHQ6IFwiMTEwdmhcIixcbiAgICAgIHdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICB6SW5kZXg6IDEwLFxuICAgIH0sXG4gIH0sXG5cbiAgbm90aWZpY2F0aW9uc0J1dHRvbkltYWdlOiB7XG4gICAgd2lkdGg6IFwiMTBweFwiLFxuICB9LFxuXG4gIG5vdGlmaWNhdGlvbnNQOiB7XG4gICAgbWFyZ2luOiAwLFxuICAgIG1hcmdpblRvcDogXCIxNXB4XCIsXG4gIH0sXG5cbiAgbm90aWZpY2F0aW9uc1VMOiB7XG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgIH0sXG4gIH0sXG5cbiAgZmlsdGVyQnV0dG9uOiB7XG4gICAgaGVpZ2h0OiBcIjMwcHhcIixcbiAgICB3aWR0aDogXCI1MHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBcIkFsaWNlQmx1ZVwiLFxuICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICBib3JkZXI6IFwiMXB4IHNvbGlkIENvcm5mbG93ZXJCbHVlXCIsXG4gICAgYm94U2hhZG93OiBcIjFweCAxcHggQ29ybmZsb3dlckJsdWVcIixcbiAgICBtYXJnaW46IFwiNXB4IDVweCAwcHggNXB4XCIsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTm90aWZpY2F0aW9ucztcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7XG4gIGZldGNoTm90aWZpY2F0aW9ucyxcbiAgbWFya0FzQXJlYWQsXG4gIHNldE5vdGlmaWNhdGlvbkZpbHRlcixcbn0gZnJvbSBcIi4uL2FjdGlvbnMvbm90aWZpY2F0aW9uQWN0aW9uQ3JlYXRvcnNcIjtcbmltcG9ydCB7IGdldFVucmVhZE5vdGlmaWNhdGlvbnNCeVR5cGUgfSBmcm9tIFwiLi4vc2VsZWN0b3JzL25vdGlmaWNhdGlvblNlbGVjdG9yXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9ucyBmcm9tIFwiLi9Ob3RpZmljYXRpb25zXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25zQ29udGFpbmVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmZldGNoTm90aWZpY2F0aW9ucygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8Tm90aWZpY2F0aW9ucyB7Li4udGhpcy5wcm9wc30+PC9Ob3RpZmljYXRpb25zPjtcbiAgfVxufVxuXG5Ob3RpZmljYXRpb25zQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzcGxheURyYXdlcjogZmFsc2UsXG4gIGxpc3ROb3RpZmljYXRpb25zOiBudWxsLFxuICBoYW5kbGVEaXNwbGF5RHJhd2VyOiAoKSA9PiB7fSxcbiAgaGFuZGxlSGlkZURyYXdlcjogKCkgPT4ge30sXG4gIG1hcmtOb3RpZmljYXRpb25Bc1JlYWQ6ICgpID0+IHt9LFxuICBmZXRjaE5vdGlmaWNhdGlvbnM6ICgpID0+IHt9LFxuICBzZXROb3RpZmljYXRpb25GaWx0ZXI6ICgpID0+IHt9LFxufTtcblxuTm90aWZpY2F0aW9uc0NvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG4gIGRpc3BsYXlEcmF3ZXI6IFByb3BUeXBlcy5ib29sLFxuICBsaXN0Tm90aWZpY2F0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbiAgaGFuZGxlRGlzcGxheURyYXdlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhbmRsZUhpZGVEcmF3ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkOiBQcm9wVHlwZXMuZnVuYyxcbiAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCB1bnJlYWROb3RpZmljYXRpb25zQnlUeXBlID0gZ2V0VW5yZWFkTm90aWZpY2F0aW9uc0J5VHlwZShzdGF0ZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBsaXN0Tm90aWZpY2F0aW9uczogdW5yZWFkTm90aWZpY2F0aW9uc0J5VHlwZSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgZmV0Y2hOb3RpZmljYXRpb25zLFxuICBtYXJrTm90aWZpY2F0aW9uQXNSZWFkOiBtYXJrQXNBcmVhZCxcbiAgc2V0Tm90aWZpY2F0aW9uRmlsdGVyLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHNcbikoTm90aWZpY2F0aW9uc0NvbnRhaW5lcik7XG4iLCJleHBvcnQgY29uc3QgTE9HSU4gPSBcIkxPR0lOXCI7XG5cbmV4cG9ydCBjb25zdCBMT0dPVVQgPSBcIkxPR09VVFwiO1xuXG5leHBvcnQgY29uc3QgRElTUExBWV9OT1RJRklDQVRJT05fRFJBV0VSID0gXCJESVNQTEFZX05PVElGSUNBVElPTl9EUkFXRVJcIjtcblxuZXhwb3J0IGNvbnN0IEhJREVfTk9USUZJQ0FUSU9OX0RSQVdFUiA9IFwiSElERV9OT1RJRklDQVRJT05fRFJBV0VSXCI7XG5cbmV4cG9ydCBjb25zdCBMT0dJTl9TVUNDRVNTID0gXCJMT0dJTl9TVUNDRVNTXCI7XG5cbmV4cG9ydCBjb25zdCBMT0dJTl9GQUlMVVJFID0gXCJMT0dJTl9GQUlMVVJFXCI7XG4iLCJpbXBvcnQge1xuICBMT0dJTixcbiAgTE9HT1VULFxuICBESVNQTEFZX05PVElGSUNBVElPTl9EUkFXRVIsXG4gIEhJREVfTk9USUZJQ0FUSU9OX0RSQVdFUixcbiAgTE9HSU5fU1VDQ0VTUyxcbiAgTE9HSU5fRkFJTFVSRSxcbn0gZnJvbSBcIi4vdWlBY3Rpb25UeXBlc1wiO1xuXG5pbXBvcnQgXCJub2RlLWZldGNoXCI7XG5cbmV4cG9ydCBjb25zdCBsb2dpbiA9IChlbWFpbCwgcGFzc3dvcmQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dJTixcbiAgICB1c2VyOiB7IGVtYWlsLCBwYXNzd29yZCB9LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJvdW5kTG9naW4gPSAoZW1haWwsIHBhc3N3b3JkKSA9PiBkaXNwYXRjaChsb2dpbihlbWFpbCwgcGFzc3dvcmQpKTtcblxuZXhwb3J0IGNvbnN0IGxvZ291dCA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dPVVQsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYm91bmRMb2dvdXQgPSAoKSA9PiBkaXNwYXRjaChsb2dvdXQoKSk7XG5cbmV4cG9ydCBjb25zdCBkaXNwbGF5Tm90aWZpY2F0aW9uRHJhd2VyID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IERJU1BMQVlfTk9USUZJQ0FUSU9OX0RSQVdFUixcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBib3VuZERpc3BsYXlOb3RpZmljYXRpb25EcmF3ZXIgPSAoKSA9PlxuICBkaXNwYXRjaChkaXNwbGF5Tm90aWZpY2F0aW9uRHJhd2VyKCkpO1xuXG5leHBvcnQgY29uc3QgaGlkZU5vdGlmaWNhdGlvbkRyYXdlciA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBISURFX05PVElGSUNBVElPTl9EUkFXRVIsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYm91bmRIaWRlTm90aWZpY2F0aW9uRHJhd2VyID0gKCkgPT5cbiAgZGlzcGF0Y2goaGlkZU5vdGlmaWNhdGlvbkRyYXdlcigpKTtcblxuZXhwb3J0IGNvbnN0IGxvZ2luU3VjY2VzcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dJTl9TVUNDRVNTLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ2luRmFpbHVyZSA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dJTl9GQUlMVVJFLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ2luUmVxdWVzdCA9IChlbWFpbCwgcGFzc3dvcmQpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIGRpc3BhdGNoKGxvZ2luKGVtYWlsLCBwYXNzd29yZCkpO1xuICAgIHJldHVybiBmZXRjaChcIi4vbG9naW4tc3VjY2Vzcy5qc29uXCIpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGpzb24pID0+IGRpc3BhdGNoKGxvZ2luU3VjY2VzcygpKSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IGRpc3BhdGNoKGxvZ2luRmFpbHVyZSgpKSk7XG4gIH07XG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5leHBvcnQgY29uc3QgdXNlciA9IHtcbiAgZW1haWw6IFwiXCIsXG4gIHBhc3N3b3JkOiBcIlwiLFxuICBpc0xvZ2dlZEluOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dPdXQgPSAoKSA9PiB7fTtcblxuY29uc3QgQXBwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoeyB1c2VyLCBsb2dPdXQgfSk7XG5cbmV4cG9ydCBkZWZhdWx0IEFwcENvbnRleHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjRiYWI1ZDYzM2UzNmNhOGQxN2VkYzYzMTY0Y2Y5MzQuanBnXCI7IiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHsgbG9nb3V0IH0gZnJvbSBcIi4uL2FjdGlvbnMvdWlBY3Rpb25DcmVhdG9yc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuaW1wb3J0IEFwcENvbnRleHQgZnJvbSBcIi4uL0FwcC9BcHBDb250ZXh0XCI7XG5pbXBvcnQgaG9sYmVydG9uX2xvZ28gZnJvbSBcIi4uL2Fzc2V0cy9ob2xiZXJ0b25fbG9nby5qcGdcIjtcblxuZXhwb3J0IGNsYXNzIEhlYWRlciBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdXNlciwgbG9nb3V0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmhlYWRlcil9PlxuICAgICAgICA8aW1nIHNyYz17aG9sYmVydG9uX2xvZ299IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5oZWFkZXJJbWcpfSAvPlxuICAgICAgICA8aDE+U2Nob29sIGRhc2hib2FyZDwvaDE+XG5cbiAgICAgICAge3VzZXIgJiYgKFxuICAgICAgICAgIDxwIGlkPVwibG9nb3V0U2VjdGlvblwiIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sb2dvdXRTZWN0aW9uKX0+XG4gICAgICAgICAgICBXZWxjb21lIDxiPntgJHt1c2VyLmVtYWlsfSBgfTwvYj5cbiAgICAgICAgICAgIDxzcGFuIG9uQ2xpY2s9e2xvZ291dH0gY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxvZ291dFNlY3Rpb25TcGFuKX0+XG4gICAgICAgICAgICAgIChsb2dvdXQpXG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9wPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBjc3NWYXJzID0ge1xuICBtYWluQ29sb3I6IFwiI2UwMWQzZlwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBoZWFkZXI6IHtcbiAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgIGNvbG9yOiBjc3NWYXJzLm1haW5Db2xvcixcbiAgICBmb250U2l6ZTogXCIyMHB4XCIsXG4gIH0sXG5cbiAgaGVhZGVySW1nOiB7XG4gICAgd2lkdGg6IFwiMjAwcHhcIixcbiAgfSxcbiAgbG9nb3V0U2VjdGlvbjoge1xuICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICByaWdodDogMCxcbiAgICBwYWRkaW5nUmlnaHQ6IFwiMjBweFwiLFxuICAgIGFsaWduU2VsZjogXCJmbGV4LWVuZFwiLFxuICB9LFxuICBsb2dvdXRTZWN0aW9uU3Bhbjoge1xuICAgIGZvbnRTdHlsZTogXCJpdGFsaWNcIixcbiAgICBjdXJzb3I6IFwicG9pbnRlclwiLFxuICB9LFxufSk7XG5cbkhlYWRlci5jb250ZXh0VHlwZSA9IEFwcENvbnRleHQ7XG5cbkhlYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHVzZXI6IG51bGwsXG4gIGxvZ291dDogKCkgPT4ge30sXG59O1xuXG5IZWFkZXIucHJvcFR5cGVzID0ge1xuICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuICBsb2dvdXQ6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdXNlcjogc3RhdGUudWkuZ2V0KFwidXNlclwiKSxcbiAgfTtcbn07XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IHtcbiAgbG9nb3V0LFxufTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShIZWFkZXIpO1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuXG5jbGFzcyBCb2R5U2VjdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hpbGRyZW4sIHRpdGxlIH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ib2R5U2VjdGlvbil9PlxuICAgICAgICA8aDIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmJvZHlTZWN0aW9uSDIpfT57dGl0bGV9PC9oMj5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5Cb2R5U2VjdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHRpdGxlOiBcIlwiLFxufTtcblxuQm9keVNlY3Rpb24ucHJvcFR5cGVzID0ge1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmNvbnN0IHNjcmVlblNpemUgPSB7XG4gIHNtYWxsOiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KVwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBib2R5U2VjdGlvbjoge1xuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgIGZsZXhXcmFwOiBcIndyYXBcIixcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgcGFkZGluZ0xlZnQ6IFwiNTBweFwiLFxuICAgICAgcGFkZGluZ1JpZ2h0OiBcIjUwcHhcIixcbiAgICAgIHBhZGRpbmdCb3R0b206IFwiMjBweFwiLFxuICAgIH0sXG4gIH0sXG5cbiAgYm9keVNlY3Rpb25IMjoge1xuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBCb2R5U2VjdGlvbjtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBCb2R5U2VjdGlvbiBmcm9tIFwiLi9Cb2R5U2VjdGlvblwiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuXG5jbGFzcyBCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20gZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuYm9keVNlY3Rpb25XaXRoTWFyZ2luKX0+XG4gICAgICAgIDxCb2R5U2VjdGlvbiB7Li4udGhpcy5wcm9wc30gLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmRlZmF1bHRQcm9wcyA9IHtcbiAgdGl0bGU6IFwiXCIsXG59O1xuXG5Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20ucHJvcFR5cGVzID0ge1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmNvbnN0IHNjcmVlblNpemUgPSB7XG4gIHNtYWxsOiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KVwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBib2R5U2VjdGlvbldpdGhNYXJnaW46IHtcbiAgICBtYXJnaW5Cb3R0b206IFwiNDBweFwiLFxuICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICBbc2NyZWVuU2l6ZS5zbWFsbF06IHtcbiAgICAgIG1hcmdpbkJvdHRvbTogXCIxMHB4XCIsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b207XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmNsYXNzIExvZ2luIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICBlbmFibGVTdWJtaXQ6IGZhbHNlLFxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVMb2dpblN1Ym1pdCA9IHRoaXMuaGFuZGxlTG9naW5TdWJtaXQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZUVtYWlsID0gdGhpcy5oYW5kbGVDaGFuZ2VFbWFpbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlUGFzc3dvcmQgPSB0aGlzLmhhbmRsZUNoYW5nZVBhc3N3b3JkLmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVMb2dpblN1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMucHJvcHMubG9nSW4oZW1haWwsIHBhc3N3b3JkKTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZUVtYWlsKGV2ZW50KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IHsgcGFzc3dvcmQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBpZiAodmFsdWUgIT09IFwiXCIgJiYgcGFzc3dvcmQgIT09IFwiXCIpIHRoaXMuc2V0U3RhdGUoeyBlbmFibGVTdWJtaXQ6IHRydWUgfSk7XG4gICAgZWxzZSB0aGlzLnNldFN0YXRlKHsgZW5hYmxlU3VibWl0OiBmYWxzZSB9KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBlbWFpbDogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlUGFzc3dvcmQoZXZlbnQpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBldmVudC50YXJnZXQ7XG4gICAgY29uc3QgeyBlbWFpbCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChlbWFpbCAhPT0gXCJcIiAmJiB2YWx1ZSAhPT0gXCJcIikgdGhpcy5zZXRTdGF0ZSh7IGVuYWJsZVN1Ym1pdDogdHJ1ZSB9KTtcbiAgICBlbHNlIHRoaXMuc2V0U3RhdGUoeyBlbmFibGVTdWJtaXQ6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHBhc3N3b3JkOiBldmVudC50YXJnZXQudmFsdWUgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxvZ2luKX0+XG4gICAgICAgIDxwPkxvZ2luIHRvIGFjY2VzcyB0aGUgZnVsbCBkYXNoYm9hcmQ8L3A+XG4gICAgICAgIDxmb3JtIGFjdGlvbj1cIlwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZUxvZ2luU3VibWl0fT5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cImVtYWlsXCI+RW1haWw6PC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICAgICAgICBpZD1cImVtYWlsXCJcbiAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW5JbnB1dCl9XG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5lbWFpbH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZUVtYWlsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJwYXNzd29yZFwiPlBhc3N3b3JkOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgaWQ9XCJwYXNzd29yZFwiXG4gICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxvZ2luSW5wdXQpfVxuICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFzc3dvcmR9XG4gICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2VQYXNzd29yZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmVuYWJsZVN1Ym1pdH0gLz5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBzY3JlZW5TaXplID0ge1xuICBzbWFsbDogXCJAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MDBweClcIixcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgbG9naW46IHtcbiAgICBtYXJnaW46IFwiNTBweFwiLFxuICAgIGZsZXhHcm93OiAxLFxuICAgIFtzY3JlZW5TaXplLnNtYWxsXToge1xuICAgICAgbWFyZ2luVG9wOiBcIjEwcHhcIixcbiAgICAgIG1hcmdpbkxlZnQ6IDAsXG4gICAgICBtYXJnaW5SaWdodDogMCxcbiAgICAgIG1hcmdpbkJvdHRvbTogMCxcbiAgICB9LFxuICB9LFxuXG4gIGxvZ2luSW5wdXQ6IHtcbiAgICBtYXJnaW5MZWZ0OiBcIjEwcHhcIixcbiAgICBtYXJnaW5SaWdodDogXCIyMHB4XCIsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICBtYXJnaW5MZWZ0OiAwLFxuICAgICAgbWFyZ2luVG9wOiBcIjEwcHhcIixcbiAgICAgIG1hcmdpbkJvdHRvbTogXCIxMHB4XCIsXG4gICAgfSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcbiIsImV4cG9ydCBjb25zdCBTRUxFQ1RfQ09VUlNFID0gXCJTRUxFQ1RfQ09VUlNFXCI7XG5cbmV4cG9ydCBjb25zdCBVTlNFTEVDVF9DT1VSU0UgPSBcIlVOU0VMRUNUX0NPVVJTRVwiO1xuXG5leHBvcnQgY29uc3QgRkVUQ0hfQ09VUlNFX1NVQ0NFU1MgPSBcIkZFVENIX0NPVVJTRV9TVUNDRVNTXCI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gXCJhcGhyb2RpdGVcIjtcblxuY29uc3Qgcm93U3R5bGVzID0geyBiYWNrZ3JvdW5kQ29sb3I6IFwiI2Y1ZjVmNWFiXCIgfTtcbmNvbnN0IGhlYWRlclJvd1N0eWxlcyA9IHsgYmFja2dyb3VuZENvbG9yOiBcIiNkZWI1YjU0NVwiIH07XG5cbmZ1bmN0aW9uIENvdXJzZUxpc3RSb3coe1xuICBpZCxcbiAgaXNIZWFkZXIsXG4gIHRleHRGaXJzdENlbGwsXG4gIHRleHRTZWNvbmRDZWxsLFxuICBpc0NoZWNrZWQsXG4gIG9uQ2hhbmdlUm93LFxufSkge1xuICBjb25zdCBoYW5kbGVDaGVja2JveCA9ICgpID0+IHtcbiAgICBvbkNoYW5nZVJvdyhpZCwgIWlzQ2hlY2tlZCk7XG4gIH07XG5cbiAgbGV0IGVsZW1lbnQ7XG5cbiAgY29uc3QgdGFibGVJdGVtU3R5bGUgPSBjc3MoXG4gICAgaXNIZWFkZXIgPyBzdHlsZXMuQ291cnNlTGlzdFRoIDogc3R5bGVzLkNvdXJzZUxpc3RUZCxcbiAgICBpc0NoZWNrZWQgJiYgc3R5bGVzLnJvd0NoZWNrZWRcbiAgKTtcblxuICBpZiAoaXNIZWFkZXIgPT09IHRydWUpIHtcbiAgICAvL1xuICAgIGlmICh0ZXh0U2Vjb25kQ2VsbCA9PT0gbnVsbCkge1xuICAgICAgZWxlbWVudCA9IChcbiAgICAgICAgPHRoIGNvbFNwYW49XCIyXCIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLkNvdXJzZUxpc3RUaFNwYW4yKX0+XG4gICAgICAgICAge3RleHRGaXJzdENlbGx9XG4gICAgICAgIDwvdGg+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50ID0gKFxuICAgICAgICA8PlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9e3RhYmxlSXRlbVN0eWxlfT57dGV4dEZpcnN0Q2VsbH08L3RoPlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9e3RhYmxlSXRlbVN0eWxlfT57dGV4dFNlY29uZENlbGx9PC90aD5cbiAgICAgICAgPC8+XG4gICAgICApO1xuICAgIH1cbiAgICAvL1xuICB9IGVsc2UgaWYgKGlzSGVhZGVyID09PSBmYWxzZSkge1xuICAgIGVsZW1lbnQgPSAoXG4gICAgICA8PlxuICAgICAgICA8dGQgY2xhc3NOYW1lPXt0YWJsZUl0ZW1TdHlsZX0+XG4gICAgICAgICAge3RleHRGaXJzdENlbGwgIT09IFwiTm8gY291cnNlIGF2YWlsYWJsZSB5ZXRcIiAmJiAoXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgb25DbGljaz17aGFuZGxlQ2hlY2tib3h9PjwvaW5wdXQ+XG4gICAgICAgICAgKX1cblxuICAgICAgICAgIHt0ZXh0Rmlyc3RDZWxsfVxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPXt0YWJsZUl0ZW1TdHlsZX0+e3RleHRTZWNvbmRDZWxsfTwvdGQ+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG5cbiAgbGV0IGlzSGVhZGVyU3R5bGU7XG5cbiAgaWYgKGlzSGVhZGVyKSBpc0hlYWRlclN0eWxlID0gaGVhZGVyUm93U3R5bGVzO1xuICBlbHNlIGlzSGVhZGVyU3R5bGUgPSByb3dTdHlsZXM7XG5cbiAgcmV0dXJuIDx0ciBzdHlsZT17aXNIZWFkZXJTdHlsZX0+e2VsZW1lbnR9PC90cj47XG59XG5cbkNvdXJzZUxpc3RSb3cuZGVmYXVsdFByb3BzID0ge1xuICBpZDogbnVsbCxcbiAgaXNIZWFkZXI6IGZhbHNlLFxuICB0ZXh0U2Vjb25kQ2VsbDogbnVsbCxcbiAgaXNDaGVja2VkOiBmYWxzZSxcbiAgb25DaGFuZ2VSb3c6ICgpID0+IHt9LFxufTtcblxuQ291cnNlTGlzdFJvdy5wcm9wVHlwZXMgPSB7XG4gIGlkOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIGlzSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dEZpcnN0Q2VsbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0ZXh0U2Vjb25kQ2VsbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICBpc0NoZWNrZWQ6IFByb3BUeXBlcy5ib29sLFxuICBvbkNoYW5nZVJvdzogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5jb25zdCBjc3NWYXJzID0ge1xuICBib3JkZXJUYWJsZUNvbG9yOiBcInJnYigxNzAsIDE3MCwgMTcwKTtcIixcbn07XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgQ291cnNlTGlzdFRoOiB7XG4gICAgYm9yZGVyVG9wOiBgMXB4IHNvbGlkICR7Y3NzVmFycy5ib3JkZXJUYWJsZUNvbG9yfWAsXG4gICAgYm9yZGVyQm90dG9tOiBgMXB4IHNvbGlkICR7Y3NzVmFycy5ib3JkZXJUYWJsZUNvbG9yfWAsXG4gICAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgICBmb250U2l6ZTogXCIxOHB4XCIsXG4gIH0sXG5cbiAgQ291cnNlTGlzdFRoU3BhbjI6IHtcbiAgICB0ZXh0QWxpZ246IFwiY2VudGVyXCIsXG4gIH0sXG5cbiAgQ291cnNlTGlzdFRkOiB7XG4gICAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgfSxcblxuICByb3dDaGVja2VkOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiNlNmU0ZTRcIixcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDb3Vyc2VMaXN0Um93O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgZmV0Y2hDb3Vyc2VzLFxuICBzZWxlY3RDb3Vyc2UsXG4gIHVuU2VsZWN0Q291cnNlLFxufSBmcm9tIFwiLi4vYWN0aW9ucy9jb3Vyc2VBY3Rpb25DcmVhdG9yc1wiO1xuaW1wb3J0IHsgZ2V0TGlzdENvdXJzZXMgfSBmcm9tIFwiLi4vc2VsZWN0b3JzL2NvdXJzZVNlbGVjdG9yXCI7XG5pbXBvcnQgQ291cnNlTGlzdFJvdyBmcm9tIFwiLi9Db3Vyc2VMaXN0Um93XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tIFwiYXBocm9kaXRlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3Vyc2VMaXN0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZVJvdyA9IHRoaXMub25DaGFuZ2VSb3cuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZmV0Y2hDb3Vyc2VzKCk7XG4gIH1cblxuICBvbkNoYW5nZVJvdyhpZCwgY2hlY2tlZCkge1xuICAgIGlmIChjaGVja2VkKSB7XG4gICAgICB0aGlzLnByb3BzLnNlbGVjdENvdXJzZShpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMudW5TZWxlY3RDb3Vyc2UoaWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGxpc3RDb3Vyc2VzIH0gPSB0aGlzLnByb3BzO1xuICAgIC8vIGNvbnN0IGxpc3RDb3Vyc2VzID0gbnVsbDtcblxuICAgIHJldHVybiAoXG4gICAgICA8dGFibGUgaWQ9XCJDb3Vyc2VMaXN0XCIgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxpc3QpfT5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDxDb3Vyc2VMaXN0Um93IHRleHRGaXJzdENlbGw9XCJBdmFpbGFibGUgY291cnNlc1wiIGlzSGVhZGVyPXt0cnVlfSAvPlxuICAgICAgICAgIDxDb3Vyc2VMaXN0Um93XG4gICAgICAgICAgICB0ZXh0Rmlyc3RDZWxsPVwiQ291cnNlIG5hbWVcIlxuICAgICAgICAgICAgdGV4dFNlY29uZENlbGw9XCJDcmVkaXRcIlxuICAgICAgICAgICAgaXNIZWFkZXI9e3RydWV9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHsoIWxpc3RDb3Vyc2VzIHx8IGxpc3RDb3Vyc2VzLmxlbmd0aCA9PT0gMCkgJiYgKFxuICAgICAgICAgICAgPENvdXJzZUxpc3RSb3dcbiAgICAgICAgICAgICAgdGV4dEZpcnN0Q2VsbD1cIk5vIGNvdXJzZSBhdmFpbGFibGUgeWV0XCJcbiAgICAgICAgICAgICAgaXNIZWFkZXI9e2ZhbHNlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuXG4gICAgICAgICAge2xpc3RDb3Vyc2VzICYmXG4gICAgICAgICAgICBsaXN0Q291cnNlcy5tYXAoKGNvdXJzZSkgPT4gKFxuICAgICAgICAgICAgICA8Q291cnNlTGlzdFJvd1xuICAgICAgICAgICAgICAgIGtleT17Y291cnNlLmlkfVxuICAgICAgICAgICAgICAgIGlkPXtjb3Vyc2UuaWR9XG4gICAgICAgICAgICAgICAgdGV4dEZpcnN0Q2VsbD17Y291cnNlLm5hbWV9XG4gICAgICAgICAgICAgICAgdGV4dFNlY29uZENlbGw9e2NvdXJzZS5jcmVkaXR9XG4gICAgICAgICAgICAgICAgaXNIZWFkZXI9e2ZhbHNlfVxuICAgICAgICAgICAgICAgIGlzQ2hlY2tlZD17Y291cnNlLmlzU2VsZWN0ZWR9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2VSb3c9e3RoaXMub25DaGFuZ2VSb3d9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+XG4gICAgKTtcbiAgfVxufVxuXG5Db3Vyc2VMaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgbGlzdENvdXJzZXM6IG51bGwsXG4gIGZldGNoQ291cnNlczogKCkgPT4ge30sXG4gIHNlbGVjdENvdXJzZTogKCkgPT4ge30sXG4gIHVuU2VsZWN0Q291cnNlOiAoKSA9PiB7fSxcbn07XG5cbkNvdXJzZUxpc3QucHJvcFR5cGVzID0ge1xuICBsaXN0Q291cnNlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5LCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIGZldGNoQ291cnNlczogUHJvcFR5cGVzLmZ1bmMsXG4gIHNlbGVjdENvdXJzZTogUHJvcFR5cGVzLmZ1bmMsXG4gIHVuU2VsZWN0Q291cnNlOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmNvbnN0IGNzc1ZhcnMgPSB7XG4gIGJvcmRlclRhYmxlQ29sb3I6IFwicmdiKDE3MCwgMTcwLCAxNzApO1wiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBsaXN0OiB7XG4gICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7Y3NzVmFycy5ib3JkZXJUYWJsZUNvbG9yfWAsXG4gICAgYm9yZGVyQ29sbGFwc2U6IFwiY29sbGFwc2VcIixcbiAgICB3aWR0aDogXCI5NSVcIixcbiAgICBtYXJnaW46IFwiNDBweCBhdXRvIDAgYXV0b1wiLFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgY29uc3QgY291cnNlc0xpc3QgPSBnZXRMaXN0Q291cnNlcyhzdGF0ZSk7XG4gIHJldHVybiB7XG4gICAgbGlzdENvdXJzZXM6IGNvdXJzZXNMaXN0LFxuICB9O1xufTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBmZXRjaENvdXJzZXMsXG4gIHNlbGVjdENvdXJzZSxcbiAgdW5TZWxlY3RDb3Vyc2UsXG59O1xuXG4vLyBleHBvcnQgZGVmYXVsdCBDb3Vyc2VMaXN0O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzKShDb3Vyc2VMaXN0KTtcbiIsImV4cG9ydCBjb25zdCBnZXRMaXN0Q291cnNlcyA9IChzdGF0ZSkgPT4ge1xuICBjb25zdCBjb3Vyc2VzID0gc3RhdGUuY291cnNlcztcblxuICBpZiAoY291cnNlcykge1xuICAgIHJldHVybiBjb3Vyc2VzLnZhbHVlU2VxKCk7XG4gIH1cblxuICByZXR1cm4gY291cnNlcztcbn07XG4iLCJpbXBvcnQge1xuICBTRUxFQ1RfQ09VUlNFLFxuICBVTlNFTEVDVF9DT1VSU0UsXG4gIEZFVENIX0NPVVJTRV9TVUNDRVNTLFxufSBmcm9tIFwiLi9jb3Vyc2VBY3Rpb25UeXBlc1wiO1xuXG5pbXBvcnQgXCJub2RlLWZldGNoXCI7XG5cbmV4cG9ydCBjb25zdCBzZWxlY3RDb3Vyc2UgPSAoaW5kZXgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRUxFQ1RfQ09VUlNFLFxuICAgIGluZGV4LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJvdW5kU2VsZWN0Q291cnNlID0gKGluZGV4KSA9PiBkaXNwYXRjaChzZWxlY3RDb3Vyc2UoaW5kZXgpKTtcblxuZXhwb3J0IGNvbnN0IHVuU2VsZWN0Q291cnNlID0gKGluZGV4KSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogVU5TRUxFQ1RfQ09VUlNFLFxuICAgIGluZGV4LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGJvdW5kVW5TZWxlY3RDb3Vyc2UgPSAoaW5kZXgpID0+IGRpc3BhdGNoKHVuU2VsZWN0Q291cnNlKGluZGV4KSk7XG5cbmV4cG9ydCBjb25zdCBzZXRDb3Vyc2VzID0gKGRhdGEpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBGRVRDSF9DT1VSU0VfU1VDQ0VTUyxcbiAgICBkYXRhLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGZldGNoQ291cnNlcyA9ICgpID0+IHtcbiAgcmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuICAgIHJldHVybiBmZXRjaChcIi4vY291cnNlcy5qc29uXCIpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGRpc3BhdGNoKHNldENvdXJzZXMoZGF0YSkpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge30pO1xuICB9O1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCB7IGdldEZ1bGxZZWFyLCBnZXRGb290ZXJDb3B5IH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBGb290ZXIoeyB1c2VyIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZvb3RlclwiPlxuICAgICAgPHA+XG4gICAgICAgIENvcHlyaWdodCB7Z2V0RnVsbFllYXIoKX0gLSB7Z2V0Rm9vdGVyQ29weSh0cnVlKX1cbiAgICAgIDwvcD5cbiAgICAgIHt1c2VyICYmIDxhIGhyZWY9XCIjXCI+Q29udGFjdCB1czwvYT59XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbkZvb3Rlci5kZWZhdWx0UHJvcHMgPSB7XG4gIHVzZXI6IG51bGwsXG59O1xuXG5Gb290ZXIucHJvcFR5cGVzID0ge1xuICB1c2VyOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdXNlcjogc3RhdGUudWkuZ2V0KFwidXNlclwiKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBudWxsKShGb290ZXIpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bGxZZWFyKCkge1xuICByZXR1cm4gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rm9vdGVyQ29weShpc0luZGV4KSB7XG4gIGxldCBtc2c7XG5cbiAgaWYgKGlzSW5kZXgpIHtcbiAgICBtc2cgPSBcIkhvbGJlcnRvbiBTY2hvb2xcIjtcbiAgfSBlbHNlIHtcbiAgICBtc2cgPSBcIkhvbGJlcnRvbiBTY2hvb2wgbWFpbiBkYXNoYm9hcmRcIjtcbiAgfVxuXG4gIHJldHVybiBtc2c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYXRlc3ROb3RpZmljYXRpb24oKSB7XG4gIHJldHVybiBcIjxzdHJvbmc+VXJnZW50IHJlcXVpcmVtZW50PC9zdHJvbmc+IC0gY29tcGxldGUgYnkgRU9EXCI7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uc0NvbnRhaW5lciBmcm9tIFwiLi4vTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zQ29udGFpbmVyXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9IZWFkZXIvSGVhZGVyXCI7XG5pbXBvcnQgQm9keVNlY3Rpb24gZnJvbSBcIi4uL0JvZHlTZWN0aW9uL0JvZHlTZWN0aW9uXCI7XG5pbXBvcnQgQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tIGZyb20gXCIuLi9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b21cIjtcbmltcG9ydCBMb2dpbiBmcm9tIFwiLi4vTG9naW4vTG9naW5cIjtcbmltcG9ydCBDb3Vyc2VMaXN0IGZyb20gXCIuLi9Db3Vyc2VMaXN0L0NvdXJzZUxpc3RcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4uL0Zvb3Rlci9Gb290ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGdldExhdGVzdE5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSBcImFwaHJvZGl0ZVwiO1xuaW1wb3J0IHsgdXNlciwgbG9nT3V0IH0gZnJvbSBcIi4vQXBwQ29udGV4dFwiO1xuaW1wb3J0IEFwcENvbnRleHQgZnJvbSBcIi4vQXBwQ29udGV4dFwiO1xuaW1wb3J0IHtcbiAgZGlzcGxheU5vdGlmaWNhdGlvbkRyYXdlcixcbiAgaGlkZU5vdGlmaWNhdGlvbkRyYXdlcixcbiAgbG9naW5SZXF1ZXN0LFxuICBsb2dvdXQsXG59IGZyb20gXCIuLi9hY3Rpb25zL3VpQWN0aW9uQ3JlYXRvcnNcIjtcblxuY29uc3QgbGlzdENvdXJzZXMgPSBbXG4gIHsgaWQ6IDEsIG5hbWU6IFwiRVM2XCIsIGNyZWRpdDogNjAgfSxcbiAgeyBpZDogMiwgbmFtZTogXCJXZWJwYWNrXCIsIGNyZWRpdDogMjAgfSxcbiAgeyBpZDogMywgbmFtZTogXCJSZWFjdFwiLCBjcmVkaXQ6IDQwIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgbGlzdE5vdGlmaWNhdGlvbnNJbml0aWFsU3RhdGUgPSBbXG4gIHsgaWQ6IDEsIHR5cGU6IFwiZGVmYXVsdFwiLCB2YWx1ZTogXCJOZXcgY291cnNlIGF2YWlsYWJsZVwiIH0sXG4gIHsgaWQ6IDIsIHR5cGU6IFwidXJnZW50XCIsIHZhbHVlOiBcIk5ldyByZXN1bWUgYXZhaWxhYmxlXCIgfSxcbiAgeyBpZDogMywgdHlwZTogXCJ1cmdlbnRcIiwgaHRtbDogeyBfX2h0bWw6IGdldExhdGVzdE5vdGlmaWNhdGlvbigpIH0gfSxcbl07XG5cbmRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gMDtcblxuZXhwb3J0IGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGFuZGxlS2V5Q29tYmluYXRpb24gPSB0aGlzLmhhbmRsZUtleUNvbWJpbmF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXIsXG4gICAgfTtcbiAgfVxuXG4gIGhhbmRsZUtleUNvbWJpbmF0aW9uKGUpIHtcbiAgICBpZiAoZS5rZXkgPT09IFwiaFwiICYmIGUuY3RybEtleSkge1xuICAgICAgYWxlcnQoXCJMb2dnaW5nIHlvdSBvdXRcIik7XG4gICAgICB0aGlzLnByb3BzLmxvZ291dCgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlS2V5Q29tYmluYXRpb24pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5oYW5kbGVLZXlDb21iaW5hdGlvbik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB1c2VyIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3Qge1xuICAgICAgaXNMb2dnZWRJbixcbiAgICAgIGRpc3BsYXlEcmF3ZXIsXG4gICAgICBkaXNwbGF5Tm90aWZpY2F0aW9uRHJhd2VyLFxuICAgICAgaGlkZU5vdGlmaWNhdGlvbkRyYXdlcixcbiAgICAgIGxvZ2luLFxuICAgICAgbG9nb3V0LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxOb3RpZmljYXRpb25zQ29udGFpbmVyXG4gICAgICAgICAgZGlzcGxheURyYXdlcj17ZGlzcGxheURyYXdlcn1cbiAgICAgICAgICBoYW5kbGVEaXNwbGF5RHJhd2VyPXtkaXNwbGF5Tm90aWZpY2F0aW9uRHJhd2VyfVxuICAgICAgICAgIGhhbmRsZUhpZGVEcmF3ZXI9e2hpZGVOb3RpZmljYXRpb25EcmF3ZXJ9XG4gICAgICAgIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmNvbnRhaW5lcil9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmFwcCl9PlxuICAgICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmFwcEJvZHkpfT5cbiAgICAgICAgICAgIHshaXNMb2dnZWRJbiA/IChcbiAgICAgICAgICAgICAgPEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSB0aXRsZT1cIkxvZyBpbiB0byBjb250aW51ZVwiPlxuICAgICAgICAgICAgICAgIDxMb2dpbiBsb2dJbj17bG9naW59IC8+XG4gICAgICAgICAgICAgIDwvQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSB0aXRsZT1cIkNvdXJzZSBsaXN0XCI+XG4gICAgICAgICAgICAgICAgPENvdXJzZUxpc3QgLz5cbiAgICAgICAgICAgICAgPC9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxCb2R5U2VjdGlvbiB0aXRsZT1cIk5ld3MgZnJvbSB0aGUgU2Nob29sXCI+XG4gICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgTG9yZW0gSXBzdW0gaXMgc2ltcGx5IGR1bW15IHRleHQgb2YgdGhlIHByaW50aW5nIGFuZCB0eXBlc2V0dGluZ1xuICAgICAgICAgICAgICBpbmR1c3RyeS4gTG9yZW0gSXBzdW0gaGFzIGJlZW4gdGhlIGluZHVzdHJ5J3Mgc3RhbmRhcmQgZHVtbXkgdGV4dFxuICAgICAgICAgICAgICBldmVyIHNpbmNlIHRoZSAxNTAwcywgd2hlbiBhbiB1bmtub3duIHByaW50ZXIgdG9vayBhIGdhbGxleSBvZlxuICAgICAgICAgICAgICB0eXBlIGFuZCBzY3JhbWJsZWQgaXQgdG8gbWFrZSBhIHR5cGUgc3BlY2ltZW4gYm9vay4gSXQgaGFzXG4gICAgICAgICAgICAgIHN1cnZpdmVkIG5vdCBvbmx5IGZpdmUgY2VudHVyaWVzLCBidXQgYWxzbyB0aGUgbGVhcCBpbnRvXG4gICAgICAgICAgICAgIGVsZWN0cm9uaWMgdHlwZXNldHRpbmcsIHJlbWFpbmluZyBlc3NlbnRpYWxseSB1bmNoYW5nZWQuIEl0IHdhc1xuICAgICAgICAgICAgICBwb3B1bGFyaXNlZCBpbiB0aGUgMTk2MHMgd2l0aCB0aGUgcmVsZWFzZSBvZiBMZXRyYXNldCBzaGVldHNcbiAgICAgICAgICAgICAgY29udGFpbmluZyBMb3JlbSBJcHN1bSBwYXNzYWdlcywgYW5kIG1vcmUgcmVjZW50bHkgd2l0aCBkZXNrdG9wXG4gICAgICAgICAgICAgIHB1Ymxpc2hpbmcgc29mdHdhcmUgbGlrZSBBbGR1cyBQYWdlTWFrZXIgaW5jbHVkaW5nIHZlcnNpb25zIG9mXG4gICAgICAgICAgICAgIExvcmVtIElwc3VtLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvQm9keVNlY3Rpb24+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5mb290ZXIpfT5cbiAgICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59XG5cbkFwcC5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzTG9nZ2VkSW46IGZhbHNlLFxuICBkaXNwbGF5RHJhd2VyOiBmYWxzZSxcbiAgZGlzcGxheU5vdGlmaWNhdGlvbkRyYXdlcjogKCkgPT4ge30sXG4gIGhpZGVOb3RpZmljYXRpb25EcmF3ZXI6ICgpID0+IHt9LFxuICBsb2dpbjogKCkgPT4ge30sXG59O1xuXG5BcHAucHJvcFR5cGVzID0ge1xuICBpc0xvZ2dlZEluOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheURyYXdlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGRpc3BsYXlOb3RpZmljYXRpb25EcmF3ZXI6IFByb3BUeXBlcy5mdW5jLFxuICBoaWRlTm90aWZpY2F0aW9uRHJhd2VyOiBQcm9wVHlwZXMuZnVuYyxcbiAgbG9naW46IFByb3BUeXBlcy5mdW5jLFxufTtcblxuY29uc3QgY3NzVmFycyA9IHtcbiAgbWFpbkNvbG9yOiBcIiNlMDFkM2ZcIixcbn07XG5cbmNvbnN0IHNjcmVlblNpemUgPSB7XG4gIHNtYWxsOiBcIkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDkwMHB4KVwiLFxufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICB3aWR0aDogXCJjYWxjKDEwMCUgLSAxNnB4KVwiLFxuICAgIG1hcmdpbkxlZnQ6IFwiOHB4XCIsXG4gICAgbWFyZ2luUmlnaHQ6IFwiOHB4XCIsXG4gIH0sXG5cbiAgYXBwOiB7XG4gICAgYm9yZGVyQm90dG9tOiBgM3B4IHNvbGlkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgfSxcblxuICBhcHBCb2R5OiB7XG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gIH0sXG5cbiAgZm9vdGVyOiB7XG4gICAgYm9yZGVyVG9wOiBgM3B4IHNvbGlkICR7Y3NzVmFycy5tYWluQ29sb3J9YCxcbiAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgIHBvc2l0aW9uOiBcInN0YXRpY1wiLFxuICAgIHBhZGRpbmdCb3R0b206IFwiMTBweFwiLFxuICAgIGJvdHRvbTogMCxcbiAgICBmb250U3R5bGU6IFwiaXRhbGljXCIsXG4gICAgW3NjcmVlblNpemUuc21hbGxdOiB7XG4gICAgICBwb3NpdGlvbjogXCJzdGF0aWNcIixcbiAgICB9LFxuICB9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBpc0xvZ2dlZEluOiBzdGF0ZS51aS5nZXQoXCJpc1VzZXJMb2dnZWRJblwiKSxcbiAgICBkaXNwbGF5RHJhd2VyOiBzdGF0ZS51aS5nZXQoXCJpc05vdGlmaWNhdGlvbkRyYXdlclZpc2libGVcIiksXG4gIH07XG59O1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIGRpc3BsYXlOb3RpZmljYXRpb25EcmF3ZXIsXG4gIGhpZGVOb3RpZmljYXRpb25EcmF3ZXIsXG4gIGxvZ2luOiBsb2dpblJlcXVlc3QsXG4gIGxvZ291dCxcbn07XG5cbi8vIGV4cG9ydCBkZWZhdWx0IEFwcDtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoQXBwKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVXNlZCBmb3Igc2V0dGluZyBwcm90b3R5cGUgbWV0aG9kcyB0aGF0IElFOCBjaG9rZXMgb24uXG52YXIgREVMRVRFID0gJ2RlbGV0ZSc7XG5cbi8vIENvbnN0YW50cyBkZXNjcmliaW5nIHRoZSBzaXplIG9mIHRyaWUgbm9kZXMuXG52YXIgU0hJRlQgPSA1OyAvLyBSZXN1bHRlZCBpbiBiZXN0IHBlcmZvcm1hbmNlIGFmdGVyIF9fX19fXz9cbnZhciBTSVpFID0gMSA8PCBTSElGVDtcbnZhciBNQVNLID0gU0laRSAtIDE7XG5cbi8vIEEgY29uc2lzdGVudCBzaGFyZWQgdmFsdWUgcmVwcmVzZW50aW5nIFwibm90IHNldFwiIHdoaWNoIGVxdWFscyBub3RoaW5nIG90aGVyXG4vLyB0aGFuIGl0c2VsZiwgYW5kIG5vdGhpbmcgdGhhdCBjb3VsZCBiZSBwcm92aWRlZCBleHRlcm5hbGx5LlxudmFyIE5PVF9TRVQgPSB7fTtcblxuLy8gQm9vbGVhbiByZWZlcmVuY2VzLCBSb3VnaCBlcXVpdmFsZW50IG9mIGBib29sICZgLlxuZnVuY3Rpb24gTWFrZVJlZigpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IGZhbHNlIH07XG59XG5cbmZ1bmN0aW9uIFNldFJlZihyZWYpIHtcbiAgaWYgKHJlZikge1xuICAgIHJlZi52YWx1ZSA9IHRydWU7XG4gIH1cbn1cblxuLy8gQSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmFsdWUgcmVwcmVzZW50aW5nIGFuIFwib3duZXJcIiBmb3IgdHJhbnNpZW50IHdyaXRlc1xuLy8gdG8gdHJpZXMuIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBvbmx5IGV2ZXIgZXF1YWwgaXRzZWxmLCBhbmQgd2lsbCBub3QgZXF1YWxcbi8vIHRoZSByZXR1cm4gb2YgYW55IHN1YnNlcXVlbnQgY2FsbCBvZiB0aGlzIGZ1bmN0aW9uLlxuZnVuY3Rpb24gT3duZXJJRCgpIHt9XG5cbmZ1bmN0aW9uIGVuc3VyZVNpemUoaXRlcikge1xuICBpZiAoaXRlci5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICBpdGVyLnNpemUgPSBpdGVyLl9faXRlcmF0ZShyZXR1cm5UcnVlKTtcbiAgfVxuICByZXR1cm4gaXRlci5zaXplO1xufVxuXG5mdW5jdGlvbiB3cmFwSW5kZXgoaXRlciwgaW5kZXgpIHtcbiAgLy8gVGhpcyBpbXBsZW1lbnRzIFwiaXMgYXJyYXkgaW5kZXhcIiB3aGljaCB0aGUgRUNNQVN0cmluZyBzcGVjIGRlZmluZXMgYXM6XG4gIC8vXG4gIC8vICAgICBBIFN0cmluZyBwcm9wZXJ0eSBuYW1lIFAgaXMgYW4gYXJyYXkgaW5kZXggaWYgYW5kIG9ubHkgaWZcbiAgLy8gICAgIFRvU3RyaW5nKFRvVWludDMyKFApKSBpcyBlcXVhbCB0byBQIGFuZCBUb1VpbnQzMihQKSBpcyBub3QgZXF1YWxcbiAgLy8gICAgIHRvIDJeMzLiiJIxLlxuICAvL1xuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXktZXhvdGljLW9iamVjdHNcbiAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcbiAgICB2YXIgdWludDMySW5kZXggPSBpbmRleCA+Pj4gMDsgLy8gTiA+Pj4gMCBpcyBzaG9ydGhhbmQgZm9yIFRvVWludDMyXG4gICAgaWYgKCcnICsgdWludDMySW5kZXggIT09IGluZGV4IHx8IHVpbnQzMkluZGV4ID09PSA0Mjk0OTY3Mjk1KSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBpbmRleCA9IHVpbnQzMkluZGV4O1xuICB9XG4gIHJldHVybiBpbmRleCA8IDAgPyBlbnN1cmVTaXplKGl0ZXIpICsgaW5kZXggOiBpbmRleDtcbn1cblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSkge1xuICByZXR1cm4gKFxuICAgICgoYmVnaW4gPT09IDAgJiYgIWlzTmVnKGJlZ2luKSkgfHxcbiAgICAgIChzaXplICE9PSB1bmRlZmluZWQgJiYgYmVnaW4gPD0gLXNpemUpKSAmJlxuICAgIChlbmQgPT09IHVuZGVmaW5lZCB8fCAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA+PSBzaXplKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSB7XG4gIHJldHVybiByZXNvbHZlSW5kZXgoYmVnaW4sIHNpemUsIDApO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRW5kKGVuZCwgc2l6ZSkge1xuICByZXR1cm4gcmVzb2x2ZUluZGV4KGVuZCwgc2l6ZSwgc2l6ZSk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmRleChpbmRleCwgc2l6ZSwgZGVmYXVsdEluZGV4KSB7XG4gIC8vIFNhbml0aXplIGluZGljZXMgdXNpbmcgdGhpcyBzaG9ydGhhbmQgZm9yIFRvSW50MzIoYXJndW1lbnQpXG4gIC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b2ludDMyXG4gIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkXG4gICAgPyBkZWZhdWx0SW5kZXhcbiAgICA6IGlzTmVnKGluZGV4KVxuICAgICAgPyBzaXplID09PSBJbmZpbml0eVxuICAgICAgICA/IHNpemVcbiAgICAgICAgOiBNYXRoLm1heCgwLCBzaXplICsgaW5kZXgpIHwgMFxuICAgICAgOiBzaXplID09PSB1bmRlZmluZWQgfHwgc2l6ZSA9PT0gaW5kZXhcbiAgICAgICAgPyBpbmRleFxuICAgICAgICA6IE1hdGgubWluKHNpemUsIGluZGV4KSB8IDA7XG59XG5cbmZ1bmN0aW9uIGlzTmVnKHZhbHVlKSB7XG4gIC8vIEFjY291bnQgZm9yIC0wIHdoaWNoIGlzIG5lZ2F0aXZlLCBidXQgbm90IGxlc3MgdGhhbiAwLlxuICByZXR1cm4gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPT09IC1JbmZpbml0eSk7XG59XG5cbi8vIE5vdGU6IHZhbHVlIGlzIHVuY2hhbmdlZCB0byBub3QgYnJlYWsgaW1tdXRhYmxlLWRldnRvb2xzLlxudmFyIElTX0NPTExFQ1RJT05fU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfSVRFUkFCTEVfX0BAJztcblxuZnVuY3Rpb24gaXNDb2xsZWN0aW9uKG1heWJlQ29sbGVjdGlvbikge1xuICByZXR1cm4gQm9vbGVhbihtYXliZUNvbGxlY3Rpb24gJiYgbWF5YmVDb2xsZWN0aW9uW0lTX0NPTExFQ1RJT05fU1lNQk9MXSk7XG59XG5cbnZhciBJU19LRVlFRF9TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9LRVlFRF9fQEAnO1xuXG5mdW5jdGlvbiBpc0tleWVkKG1heWJlS2V5ZWQpIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVLZXllZCAmJiBtYXliZUtleWVkW0lTX0tFWUVEX1NZTUJPTF0pO1xufVxuXG52YXIgSVNfSU5ERVhFRF9TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9JTkRFWEVEX19AQCc7XG5cbmZ1bmN0aW9uIGlzSW5kZXhlZChtYXliZUluZGV4ZWQpIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVJbmRleGVkICYmIG1heWJlSW5kZXhlZFtJU19JTkRFWEVEX1NZTUJPTF0pO1xufVxuXG5mdW5jdGlvbiBpc0Fzc29jaWF0aXZlKG1heWJlQXNzb2NpYXRpdmUpIHtcbiAgcmV0dXJuIGlzS2V5ZWQobWF5YmVBc3NvY2lhdGl2ZSkgfHwgaXNJbmRleGVkKG1heWJlQXNzb2NpYXRpdmUpO1xufVxuXG52YXIgQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIENvbGxlY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzQ29sbGVjdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG59O1xuXG52YXIgS2V5ZWRDb2xsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQ29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gaXNLZXllZCh2YWx1ZSkgPyB2YWx1ZSA6IEtleWVkU2VxKHZhbHVlKTtcbiAgfVxuXG4gIGlmICggQ29sbGVjdGlvbiApIEtleWVkQ29sbGVjdGlvbi5fX3Byb3RvX18gPSBDb2xsZWN0aW9uO1xuICBLZXllZENvbGxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZSApO1xuICBLZXllZENvbGxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gS2V5ZWRDb2xsZWN0aW9uO1xuXG4gIHJldHVybiBLZXllZENvbGxlY3Rpb247XG59KENvbGxlY3Rpb24pKTtcblxudmFyIEluZGV4ZWRDb2xsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQ29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBJbmRleGVkQ29sbGVjdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBpc0luZGV4ZWQodmFsdWUpID8gdmFsdWUgOiBJbmRleGVkU2VxKHZhbHVlKTtcbiAgfVxuXG4gIGlmICggQ29sbGVjdGlvbiApIEluZGV4ZWRDb2xsZWN0aW9uLl9fcHJvdG9fXyA9IENvbGxlY3Rpb247XG4gIEluZGV4ZWRDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW5kZXhlZENvbGxlY3Rpb247XG5cbiAgcmV0dXJuIEluZGV4ZWRDb2xsZWN0aW9uO1xufShDb2xsZWN0aW9uKSk7XG5cbnZhciBTZXRDb2xsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQ29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBTZXRDb2xsZWN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzQ29sbGVjdGlvbih2YWx1ZSkgJiYgIWlzQXNzb2NpYXRpdmUodmFsdWUpID8gdmFsdWUgOiBTZXRTZXEodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBDb2xsZWN0aW9uICkgU2V0Q29sbGVjdGlvbi5fX3Byb3RvX18gPSBDb2xsZWN0aW9uO1xuICBTZXRDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIHJldHVybiBTZXRDb2xsZWN0aW9uO1xufShDb2xsZWN0aW9uKSk7XG5cbkNvbGxlY3Rpb24uS2V5ZWQgPSBLZXllZENvbGxlY3Rpb247XG5Db2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbkNvbGxlY3Rpb24uU2V0ID0gU2V0Q29sbGVjdGlvbjtcblxudmFyIElTX1NFUV9TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblxuZnVuY3Rpb24gaXNTZXEobWF5YmVTZXEpIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVTZXEgJiYgbWF5YmVTZXFbSVNfU0VRX1NZTUJPTF0pO1xufVxuXG52YXIgSVNfUkVDT1JEX1NZTUJPTCA9ICdAQF9fSU1NVVRBQkxFX1JFQ09SRF9fQEAnO1xuXG5mdW5jdGlvbiBpc1JlY29yZChtYXliZVJlY29yZCkge1xuICByZXR1cm4gQm9vbGVhbihtYXliZVJlY29yZCAmJiBtYXliZVJlY29yZFtJU19SRUNPUkRfU1lNQk9MXSk7XG59XG5cbmZ1bmN0aW9uIGlzSW1tdXRhYmxlKG1heWJlSW1tdXRhYmxlKSB7XG4gIHJldHVybiBpc0NvbGxlY3Rpb24obWF5YmVJbW11dGFibGUpIHx8IGlzUmVjb3JkKG1heWJlSW1tdXRhYmxlKTtcbn1cblxudmFyIElTX09SREVSRURfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXG5mdW5jdGlvbiBpc09yZGVyZWQobWF5YmVPcmRlcmVkKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlT3JkZXJlZCAmJiBtYXliZU9yZGVyZWRbSVNfT1JERVJFRF9TWU1CT0xdKTtcbn1cblxudmFyIElURVJBVEVfS0VZUyA9IDA7XG52YXIgSVRFUkFURV9WQUxVRVMgPSAxO1xudmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cbnZhciBSRUFMX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG52YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cbnZhciBJdGVyYXRvciA9IGZ1bmN0aW9uIEl0ZXJhdG9yKG5leHQpIHtcbiAgdGhpcy5uZXh0ID0gbmV4dDtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuICdbSXRlcmF0b3JdJztcbn07XG5cbkl0ZXJhdG9yLktFWVMgPSBJVEVSQVRFX0tFWVM7XG5JdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcbkl0ZXJhdG9yLkVOVFJJRVMgPSBJVEVSQVRFX0VOVFJJRVM7XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5pbnNwZWN0ID0gSXRlcmF0b3IucHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG59O1xuSXRlcmF0b3IucHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBpdGVyYXRvclZhbHVlKHR5cGUsIGssIHYsIGl0ZXJhdG9yUmVzdWx0KSB7XG4gIHZhciB2YWx1ZSA9IHR5cGUgPT09IDAgPyBrIDogdHlwZSA9PT0gMSA/IHYgOiBbaywgdl07XG4gIGl0ZXJhdG9yUmVzdWx0XG4gICAgPyAoaXRlcmF0b3JSZXN1bHQudmFsdWUgPSB2YWx1ZSlcbiAgICA6IChpdGVyYXRvclJlc3VsdCA9IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgIH0pO1xuICByZXR1cm4gaXRlcmF0b3JSZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGl0ZXJhdG9yRG9uZSgpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xufVxuXG5mdW5jdGlvbiBoYXNJdGVyYXRvcihtYXliZUl0ZXJhYmxlKSB7XG4gIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG59XG5cbmZ1bmN0aW9uIGlzSXRlcmF0b3IobWF5YmVJdGVyYXRvcikge1xuICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpO1xuICByZXR1cm4gaXRlcmF0b3JGbiAmJiBpdGVyYXRvckZuLmNhbGwoaXRlcmFibGUpO1xufVxuXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID1cbiAgICBpdGVyYWJsZSAmJlxuICAgICgoUkVBTF9JVEVSQVRPUl9TWU1CT0wgJiYgaXRlcmFibGVbUkVBTF9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gIH1cbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgdmFsdWUgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZS5sZW5ndGgpICYmXG4gICAgdmFsdWUubGVuZ3RoID49IDAgJiZcbiAgICAodmFsdWUubGVuZ3RoID09PSAwXG4gICAgICA/IC8vIE9ubHkge2xlbmd0aDogMH0gaXMgY29uc2lkZXJlZCBBcnJheS1saWtlLlxuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAxXG4gICAgICA6IC8vIEFuIG9iamVjdCBpcyBvbmx5IEFycmF5LWxpa2UgaWYgaXQgaGFzIGEgcHJvcGVydHkgd2hlcmUgdGhlIGxhc3QgdmFsdWVcbiAgICAgICAgLy8gaW4gdGhlIGFycmF5LWxpa2UgbWF5IGJlIGZvdW5kICh3aGljaCBjb3VsZCBiZSB1bmRlZmluZWQpLlxuICAgICAgICB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZS5sZW5ndGggLSAxKSlcbiAgKTtcbn1cblxudmFyIFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKENvbGxlY3Rpb24kJDEpIHtcbiAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gZW1wdHlTZXF1ZW5jZSgpXG4gICAgICA6IGlzSW1tdXRhYmxlKHZhbHVlKVxuICAgICAgICA/IHZhbHVlLnRvU2VxKClcbiAgICAgICAgOiBzZXFGcm9tVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBDb2xsZWN0aW9uJCQxICkgU2VxLl9fcHJvdG9fXyA9IENvbGxlY3Rpb24kJDE7XG4gIFNlcS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDb2xsZWN0aW9uJCQxICYmIENvbGxlY3Rpb24kJDEucHJvdG90eXBlICk7XG4gIFNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXE7XG5cbiAgU2VxLnByb3RvdHlwZS50b1NlcSA9IGZ1bmN0aW9uIHRvU2VxICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSB7JywgJ30nKTtcbiAgfTtcblxuICBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gZnVuY3Rpb24gY2FjaGVSZXN1bHQgKCkge1xuICAgIGlmICghdGhpcy5fY2FjaGUgJiYgdGhpcy5fX2l0ZXJhdGVVbmNhY2hlZCkge1xuICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5fY2FjaGUubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblxuICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgY2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBzaXplID0gY2FjaGUubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgd2hpbGUgKGkgIT09IHNpemUpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9faXRlcmF0ZVVuY2FjaGVkKGZuLCByZXZlcnNlKTtcbiAgfTtcblxuICAvLyBhYnN0cmFjdCBfX2l0ZXJhdG9yVW5jYWNoZWQodHlwZSwgcmV2ZXJzZSlcblxuICBTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5fY2FjaGU7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICB2YXIgc2l6ZSA9IGNhY2hlLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaSA9PT0gc2l6ZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtyZXZlcnNlID8gc2l6ZSAtICsraSA6IGkrK107XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9O1xuXG4gIHJldHVybiBTZXE7XG59KENvbGxlY3Rpb24pKTtcblxudmFyIEtleWVkU2VxID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU2VxKSB7XG4gIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gZW1wdHlTZXF1ZW5jZSgpLnRvS2V5ZWRTZXEoKVxuICAgICAgOiBpc0NvbGxlY3Rpb24odmFsdWUpXG4gICAgICAgID8gaXNLZXllZCh2YWx1ZSlcbiAgICAgICAgICA/IHZhbHVlLnRvU2VxKClcbiAgICAgICAgICA6IHZhbHVlLmZyb21FbnRyeVNlcSgpXG4gICAgICAgIDogaXNSZWNvcmQodmFsdWUpXG4gICAgICAgICAgPyB2YWx1ZS50b1NlcSgpXG4gICAgICAgICAgOiBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIFNlcSApIEtleWVkU2VxLl9fcHJvdG9fXyA9IFNlcTtcbiAgS2V5ZWRTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2VxICYmIFNlcS5wcm90b3R5cGUgKTtcbiAgS2V5ZWRTZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gS2V5ZWRTZXE7XG5cbiAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbiB0b0tleWVkU2VxICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gS2V5ZWRTZXE7XG59KFNlcSkpO1xuXG52YXIgSW5kZXhlZFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNlcSkge1xuICBmdW5jdGlvbiBJbmRleGVkU2VxKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gZW1wdHlTZXF1ZW5jZSgpXG4gICAgICA6IGlzQ29sbGVjdGlvbih2YWx1ZSlcbiAgICAgICAgPyBpc0tleWVkKHZhbHVlKVxuICAgICAgICAgID8gdmFsdWUuZW50cnlTZXEoKVxuICAgICAgICAgIDogdmFsdWUudG9JbmRleGVkU2VxKClcbiAgICAgICAgOiBpc1JlY29yZCh2YWx1ZSlcbiAgICAgICAgICA/IHZhbHVlLnRvU2VxKCkuZW50cnlTZXEoKVxuICAgICAgICAgIDogaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIFNlcSApIEluZGV4ZWRTZXEuX19wcm90b19fID0gU2VxO1xuICBJbmRleGVkU2VxLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNlcSAmJiBTZXEucHJvdG90eXBlICk7XG4gIEluZGV4ZWRTZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW5kZXhlZFNlcTtcblxuICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuICB9O1xuXG4gIEluZGV4ZWRTZXEucHJvdG90eXBlLnRvSW5kZXhlZFNlcSA9IGZ1bmN0aW9uIHRvSW5kZXhlZFNlcSAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIFsnLCAnXScpO1xuICB9O1xuXG4gIHJldHVybiBJbmRleGVkU2VxO1xufShTZXEpKTtcblxudmFyIFNldFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNlcSkge1xuICBmdW5jdGlvbiBTZXRTZXEodmFsdWUpIHtcbiAgICByZXR1cm4gKGlzQ29sbGVjdGlvbih2YWx1ZSkgJiYgIWlzQXNzb2NpYXRpdmUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IEluZGV4ZWRTZXEodmFsdWUpXG4gICAgKS50b1NldFNlcSgpO1xuICB9XG5cbiAgaWYgKCBTZXEgKSBTZXRTZXEuX19wcm90b19fID0gU2VxO1xuICBTZXRTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2VxICYmIFNlcS5wcm90b3R5cGUgKTtcbiAgU2V0U2VxLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNldFNlcTtcblxuICBTZXRTZXEub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiBTZXRTZXEoYXJndW1lbnRzKTtcbiAgfTtcblxuICBTZXRTZXEucHJvdG90eXBlLnRvU2V0U2VxID0gZnVuY3Rpb24gdG9TZXRTZXEgKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBTZXRTZXE7XG59KFNlcSkpO1xuXG5TZXEuaXNTZXEgPSBpc1NlcTtcblNlcS5LZXllZCA9IEtleWVkU2VxO1xuU2VxLlNldCA9IFNldFNlcTtcblNlcS5JbmRleGVkID0gSW5kZXhlZFNlcTtcblxuU2VxLnByb3RvdHlwZVtJU19TRVFfU1lNQk9MXSA9IHRydWU7XG5cbi8vICNwcmFnbWEgUm9vdCBTZXF1ZW5jZXNcblxudmFyIEFycmF5U2VxID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSW5kZXhlZFNlcSkge1xuICBmdW5jdGlvbiBBcnJheVNlcShhcnJheSkge1xuICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7XG4gICAgdGhpcy5zaXplID0gYXJyYXkubGVuZ3RoO1xuICB9XG5cbiAgaWYgKCBJbmRleGVkU2VxICkgQXJyYXlTZXEuX19wcm90b19fID0gSW5kZXhlZFNlcTtcbiAgQXJyYXlTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSW5kZXhlZFNlcSAmJiBJbmRleGVkU2VxLnByb3RvdHlwZSApO1xuICBBcnJheVNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcnJheVNlcTtcblxuICBBcnJheVNlcS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpID8gdGhpcy5fYXJyYXlbd3JhcEluZGV4KHRoaXMsIGluZGV4KV0gOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciBhcnJheSA9IHRoaXMuX2FycmF5O1xuICAgIHZhciBzaXplID0gYXJyYXkubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSAhPT0gc2l6ZSkge1xuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKys7XG4gICAgICBpZiAoZm4oYXJyYXlbaWldLCBpaSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfTtcblxuICBBcnJheVNlcS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgYXJyYXkgPSB0aGlzLl9hcnJheTtcbiAgICB2YXIgc2l6ZSA9IGFycmF5Lmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaSA9PT0gc2l6ZSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgaWkgPSByZXZlcnNlID8gc2l6ZSAtICsraSA6IGkrKztcbiAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGlpLCBhcnJheVtpaV0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBBcnJheVNlcTtcbn0oSW5kZXhlZFNlcSkpO1xuXG52YXIgT2JqZWN0U2VxID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoS2V5ZWRTZXEpIHtcbiAgZnVuY3Rpb24gT2JqZWN0U2VxKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgICB0aGlzLl9vYmplY3QgPSBvYmplY3Q7XG4gICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gIH1cblxuICBpZiAoIEtleWVkU2VxICkgT2JqZWN0U2VxLl9fcHJvdG9fXyA9IEtleWVkU2VxO1xuICBPYmplY3RTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggS2V5ZWRTZXEgJiYgS2V5ZWRTZXEucHJvdG90eXBlICk7XG4gIE9iamVjdFNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPYmplY3RTZXE7XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gIH07XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX29iamVjdCwga2V5KTtcbiAgfTtcblxuICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgIHZhciBrZXlzID0gdGhpcy5fa2V5cztcbiAgICB2YXIgc2l6ZSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSAhPT0gc2l6ZSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgaWYgKGZuKG9iamVjdFtrZXldLCBrZXksIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH07XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgIHZhciBzaXplID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPT09IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdFNlcTtcbn0oS2V5ZWRTZXEpKTtcbk9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TWU1CT0xdID0gdHJ1ZTtcblxudmFyIENvbGxlY3Rpb25TZXEgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkU2VxKSB7XG4gIGZ1bmN0aW9uIENvbGxlY3Rpb25TZXEoY29sbGVjdGlvbikge1xuICAgIHRoaXMuX2NvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuc2l6ZSA9IGNvbGxlY3Rpb24ubGVuZ3RoIHx8IGNvbGxlY3Rpb24uc2l6ZTtcbiAgfVxuXG4gIGlmICggSW5kZXhlZFNlcSApIENvbGxlY3Rpb25TZXEuX19wcm90b19fID0gSW5kZXhlZFNlcTtcbiAgQ29sbGVjdGlvblNlcS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkU2VxICYmIEluZGV4ZWRTZXEucHJvdG90eXBlICk7XG4gIENvbGxlY3Rpb25TZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29sbGVjdGlvblNlcTtcblxuICBDb2xsZWN0aW9uU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIF9faXRlcmF0ZVVuY2FjaGVkIChmbiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcy5fY29sbGVjdGlvbjtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihjb2xsZWN0aW9uKTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgQ29sbGVjdGlvblNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gX19pdGVyYXRvclVuY2FjaGVkICh0eXBlLCByZXZlcnNlKSB7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzLl9jb2xsZWN0aW9uO1xuICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGNvbGxlY3Rpb24pO1xuICAgIGlmICghaXNJdGVyYXRvcihpdGVyYXRvcikpIHtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQ29sbGVjdGlvblNlcTtcbn0oSW5kZXhlZFNlcSkpO1xuXG4vLyAjIHByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cbnZhciBFTVBUWV9TRVE7XG5cbmZ1bmN0aW9uIGVtcHR5U2VxdWVuY2UoKSB7XG4gIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xufVxuXG5mdW5jdGlvbiBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICB2YXIgc2VxID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICA/IG5ldyBBcnJheVNlcSh2YWx1ZSlcbiAgICA6IGhhc0l0ZXJhdG9yKHZhbHVlKVxuICAgICAgPyBuZXcgQ29sbGVjdGlvblNlcSh2YWx1ZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZiAoc2VxKSB7XG4gICAgcmV0dXJuIHNlcS5mcm9tRW50cnlTZXEoKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBuZXcgT2JqZWN0U2VxKHZhbHVlKTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdFeHBlY3RlZCBBcnJheSBvciBjb2xsZWN0aW9uIG9iamVjdCBvZiBbaywgdl0gZW50cmllcywgb3Iga2V5ZWQgb2JqZWN0OiAnICtcbiAgICAgIHZhbHVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIGlmIChzZXEpIHtcbiAgICByZXR1cm4gc2VxO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ0V4cGVjdGVkIEFycmF5IG9yIGNvbGxlY3Rpb24gb2JqZWN0IG9mIHZhbHVlczogJyArIHZhbHVlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgaWYgKHNlcSkge1xuICAgIHJldHVybiBzZXE7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFNlcSh2YWx1ZSk7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgY29sbGVjdGlvbiBvYmplY3Qgb2YgdmFsdWVzLCBvciBrZXllZCBvYmplY3Q6ICcgKyB2YWx1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKHZhbHVlKVxuICAgID8gbmV3IEFycmF5U2VxKHZhbHVlKVxuICAgIDogaGFzSXRlcmF0b3IodmFsdWUpXG4gICAgICA/IG5ldyBDb2xsZWN0aW9uU2VxKHZhbHVlKVxuICAgICAgOiB1bmRlZmluZWQ7XG59XG5cbnZhciBJU19NQVBfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfTUFQX19AQCc7XG5cbmZ1bmN0aW9uIGlzTWFwKG1heWJlTWFwKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlTWFwICYmIG1heWJlTWFwW0lTX01BUF9TWU1CT0xdKTtcbn1cblxuZnVuY3Rpb24gaXNPcmRlcmVkTWFwKG1heWJlT3JkZXJlZE1hcCkge1xuICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbn1cblxuZnVuY3Rpb24gaXNWYWx1ZU9iamVjdChtYXliZVZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIG1heWJlVmFsdWUgJiZcbiAgICAgIHR5cGVvZiBtYXliZVZhbHVlLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIG1heWJlVmFsdWUuaGFzaENvZGUgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICogYW5kIFNldF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwI0tleV9lcXVhbGl0eSlcbiAqXG4gKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAqIHZhbHVlLCB3aGljaCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBieVxuICogW2BPYmplY3QuaXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXMpLlxuICpcbiAqIFRoaXMgaXMgZXh0ZW5kZWQgZnVydGhlciB0byBhbGxvdyBPYmplY3RzIHRvIGRlc2NyaWJlIHRoZSB2YWx1ZXMgdGhleVxuICogcmVwcmVzZW50LCBieSB3YXkgb2YgYHZhbHVlT2ZgIG9yIGBlcXVhbHNgIChhbmQgYGhhc2hDb2RlYCkuXG4gKlxuICogTm90ZTogYmVjYXVzZSBvZiB0aGlzIGV4dGVuc2lvbiwgdGhlIGtleSBlcXVhbGl0eSBvZiBJbW11dGFibGUuTWFwIGFuZCB0aGVcbiAqIHZhbHVlIGVxdWFsaXR5IG9mIEltbXV0YWJsZS5TZXQgd2lsbCBkaWZmZXIgZnJvbSBFUzYgTWFwIGFuZCBTZXQuXG4gKlxuICogIyMjIERlZmluaW5nIGN1c3RvbSB2YWx1ZXNcbiAqXG4gKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICogYHZhbHVlT2ZgLiBGb3IgZXhhbXBsZSwgYERhdGVgIHJlcHJlc2VudHMgYSB2YWx1ZSBieSByZXR1cm5pbmcgYSB1bml4XG4gKiB0aW1lc3RhbXAgZm9yIGB2YWx1ZU9mYDpcbiAqXG4gKiAgICAgdmFyIGRhdGUxID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7IC8vIEZyaSBGZWIgMTMgMjAwOSAuLi5cbiAqICAgICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTtcbiAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAqICAgICBhc3NlcnQoIGRhdGUxICE9PSBkYXRlMiApO1xuICogICAgIGFzc2VydCggSW1tdXRhYmxlLmlzKCBkYXRlMSwgZGF0ZTIgKSApO1xuICpcbiAqIE5vdGU6IG92ZXJyaWRpbmcgYHZhbHVlT2ZgIG1heSBoYXZlIG90aGVyIGltcGxpY2F0aW9ucyBpZiB5b3UgdXNlIHRoaXMgb2JqZWN0XG4gKiB3aGVyZSBKYXZhU2NyaXB0IGV4cGVjdHMgYSBwcmltaXRpdmUsIHN1Y2ggYXMgaW1wbGljaXQgc3RyaW5nIGNvZXJjaW9uLlxuICpcbiAqIEZvciBtb3JlIGNvbXBsZXggdHlwZXMsIGVzcGVjaWFsbHkgY29sbGVjdGlvbnMsIGltcGxlbWVudGluZyBgdmFsdWVPZmAgbWF5XG4gKiBub3QgYmUgcGVyZm9ybWFudC4gQW4gYWx0ZXJuYXRpdmUgaXMgdG8gaW1wbGVtZW50IGBlcXVhbHNgIGFuZCBgaGFzaENvZGVgLlxuICpcbiAqIGBlcXVhbHNgIHRha2VzIGFub3RoZXIgb2JqZWN0LCBwcmVzdW1hYmx5IG9mIHNpbWlsYXIgdHlwZSwgYW5kIHJldHVybnMgdHJ1ZVxuICogaWYgaXQgaXMgZXF1YWwuIEVxdWFsaXR5IGlzIHN5bW1ldHJpY2FsLCBzbyB0aGUgc2FtZSByZXN1bHQgc2hvdWxkIGJlXG4gKiByZXR1cm5lZCBpZiB0aGlzIGFuZCB0aGUgYXJndW1lbnQgYXJlIGZsaXBwZWQuXG4gKlxuICogICAgIGFzc2VydCggYS5lcXVhbHMoYikgPT09IGIuZXF1YWxzKGEpICk7XG4gKlxuICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICogYmUgdXNlZCB0byBkZXRlcm1pbmUgaG93IHRvIHN0b3JlIHRoZSB2YWx1ZSBvYmplY3QgaW4gYSBNYXAgb3IgU2V0LiBZb3UgbXVzdFxuICogcHJvdmlkZSBib3RoIG9yIG5laXRoZXIgbWV0aG9kcywgb25lIG11c3Qgbm90IGV4aXN0IHdpdGhvdXQgdGhlIG90aGVyLlxuICpcbiAqIEFsc28sIGFuIGltcG9ydGFudCByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGVzZSBtZXRob2RzIG11c3QgYmUgdXBoZWxkOiBpZiB0d29cbiAqIHZhbHVlcyBhcmUgZXF1YWwsIHRoZXkgKm11c3QqIHJldHVybiB0aGUgc2FtZSBoYXNoQ29kZS4gSWYgdGhlIHZhbHVlcyBhcmUgbm90XG4gKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICogYW5kIHdoaWxlIHVuZGVzaXJhYmxlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBpdCBpcyBhY2NlcHRhYmxlLlxuICpcbiAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAqICAgICAgIGFzc2VydCggYS5oYXNoQ29kZSgpID09PSBiLmhhc2hDb2RlKCkgKTtcbiAqICAgICB9XG4gKlxuICogQWxsIEltbXV0YWJsZSBjb2xsZWN0aW9ucyBhcmUgVmFsdWUgT2JqZWN0czogdGhleSBpbXBsZW1lbnQgYGVxdWFscygpYFxuICogYW5kIGBoYXNoQ29kZSgpYC5cbiAqL1xuZnVuY3Rpb24gaXModmFsdWVBLCB2YWx1ZUIpIHtcbiAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWVCLnZhbHVlT2YgPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgdmFsdWVBID0gdmFsdWVBLnZhbHVlT2YoKTtcbiAgICB2YWx1ZUIgPSB2YWx1ZUIudmFsdWVPZigpO1xuICAgIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gISEoXG4gICAgaXNWYWx1ZU9iamVjdCh2YWx1ZUEpICYmXG4gICAgaXNWYWx1ZU9iamVjdCh2YWx1ZUIpICYmXG4gICAgdmFsdWVBLmVxdWFscyh2YWx1ZUIpXG4gICk7XG59XG5cbnZhciBpbXVsID1cbiAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yXG4gICAgPyBNYXRoLmltdWxcbiAgICA6IGZ1bmN0aW9uIGltdWwoYSwgYikge1xuICAgICAgICBhIHw9IDA7IC8vIGludFxuICAgICAgICBiIHw9IDA7IC8vIGludFxuICAgICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICAgIHZhciBkID0gYiAmIDB4ZmZmZjtcbiAgICAgICAgLy8gU2hpZnQgYnkgMCBmaXhlcyB0aGUgc2lnbiBvbiB0aGUgaGlnaCBwYXJ0LlxuICAgICAgICByZXR1cm4gKGMgKiBkICsgKCgoKGEgPj4+IDE2KSAqIGQgKyBjICogKGIgPj4+IDE2KSkgPDwgMTYpID4+PiAwKSkgfCAwOyAvLyBpbnRcbiAgICAgIH07XG5cbi8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuLy8gVmFsdWVzIHdoaWNoIGhhdmUgZWl0aGVyIDAwIG9yIDExIGFzIHRoZSBoaWdoIG9yZGVyIGJpdHMgcXVhbGlmeS5cbi8vIFRoaXMgZnVuY3Rpb24gZHJvcHMgdGhlIGhpZ2hlc3Qgb3JkZXIgYml0IGluIGEgc2lnbmVkIG51bWJlciwgbWFpbnRhaW5pbmdcbi8vIHRoZSBzaWduIGJpdC5cbmZ1bmN0aW9uIHNtaShpMzIpIHtcbiAgcmV0dXJuICgoaTMyID4+PiAxKSAmIDB4NDAwMDAwMDApIHwgKGkzMiAmIDB4YmZmZmZmZmYpO1xufVxuXG52YXIgZGVmYXVsdFZhbHVlT2YgPSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2Y7XG5cbmZ1bmN0aW9uIGhhc2gobykge1xuICBzd2l0Y2ggKHR5cGVvZiBvKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAvLyBUaGUgaGFzaCB2YWx1ZXMgZm9yIGJ1aWx0LWluIGNvbnN0YW50cyBhcmUgYSAxIHZhbHVlIGZvciBlYWNoIDUtYnl0ZVxuICAgICAgLy8gc2hpZnQgcmVnaW9uIGV4cGVjdCBmb3IgdGhlIGZpcnN0LCB3aGljaCBlbmNvZGVzIHRoZSB2YWx1ZS4gVGhpc1xuICAgICAgLy8gcmVkdWNlcyB0aGUgb2RkcyBvZiBhIGhhc2ggY29sbGlzaW9uIGZvciB0aGVzZSBjb21tb24gdmFsdWVzLlxuICAgICAgcmV0dXJuIG8gPyAweDQyMTA4NDIxIDogMHg0MjEwODQyMDtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGhhc2hOdW1iZXIobyk7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBvLmxlbmd0aCA+IFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU5cbiAgICAgICAgPyBjYWNoZWRIYXNoU3RyaW5nKG8pXG4gICAgICAgIDogaGFzaFN0cmluZyhvKTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIGlmIChvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAweDQyMTA4NDIyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvLmhhc2hDb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIERyb3AgYW55IGhpZ2ggYml0cyBmcm9tIGFjY2lkZW50YWxseSBsb25nIGhhc2ggY29kZXMuXG4gICAgICAgIHJldHVybiBzbWkoby5oYXNoQ29kZShvKSk7XG4gICAgICB9XG4gICAgICBpZiAoby52YWx1ZU9mICE9PSBkZWZhdWx0VmFsdWVPZiAmJiB0eXBlb2Ygby52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG8gPSBvLnZhbHVlT2Yobyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzaEpTT2JqKG8pO1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gMHg0MjEwODQyMztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiBvLnRvU3RyaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBoYXNoU3RyaW5nKG8udG9TdHJpbmcoKSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIHR5cGUgJyArIHR5cGVvZiBvICsgJyBjYW5ub3QgYmUgaGFzaGVkLicpO1xuICB9XG59XG5cbi8vIENvbXByZXNzIGFyYml0cmFyaWx5IGxhcmdlIG51bWJlcnMgaW50byBzbWkgaGFzaGVzLlxuZnVuY3Rpb24gaGFzaE51bWJlcihuKSB7XG4gIGlmIChuICE9PSBuIHx8IG4gPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIGhhc2ggPSBuIHwgMDtcbiAgaWYgKGhhc2ggIT09IG4pIHtcbiAgICBoYXNoIF49IG4gKiAweGZmZmZmZmZmO1xuICB9XG4gIHdoaWxlIChuID4gMHhmZmZmZmZmZikge1xuICAgIG4gLz0gMHhmZmZmZmZmZjtcbiAgICBoYXNoIF49IG47XG4gIH1cbiAgcmV0dXJuIHNtaShoYXNoKTtcbn1cblxuZnVuY3Rpb24gY2FjaGVkSGFzaFN0cmluZyhzdHJpbmcpIHtcbiAgdmFyIGhhc2hlZCA9IHN0cmluZ0hhc2hDYWNoZVtzdHJpbmddO1xuICBpZiAoaGFzaGVkID09PSB1bmRlZmluZWQpIHtcbiAgICBoYXNoZWQgPSBoYXNoU3RyaW5nKHN0cmluZyk7XG4gICAgaWYgKFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPT09IFNUUklOR19IQVNIX0NBQ0hFX01BWF9TSVpFKSB7XG4gICAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcbiAgICAgIHN0cmluZ0hhc2hDYWNoZSA9IHt9O1xuICAgIH1cbiAgICBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFKys7XG4gICAgc3RyaW5nSGFzaENhY2hlW3N0cmluZ10gPSBoYXNoZWQ7XG4gIH1cbiAgcmV0dXJuIGhhc2hlZDtcbn1cblxuLy8gaHR0cDovL2pzcGVyZi5jb20vaGFzaGluZy1zdHJpbmdzXG5mdW5jdGlvbiBoYXNoU3RyaW5nKHN0cmluZykge1xuICAvLyBUaGlzIGlzIHRoZSBoYXNoIGZyb20gSlZNXG4gIC8vIFRoZSBoYXNoIGNvZGUgZm9yIGEgc3RyaW5nIGlzIGNvbXB1dGVkIGFzXG4gIC8vIHNbMF0gKiAzMSBeIChuIC0gMSkgKyBzWzFdICogMzEgXiAobiAtIDIpICsgLi4uICsgc1tuIC0gMV0sXG4gIC8vIHdoZXJlIHNbaV0gaXMgdGhlIGl0aCBjaGFyYWN0ZXIgb2YgdGhlIHN0cmluZyBhbmQgbiBpcyB0aGUgbGVuZ3RoIG9mXG4gIC8vIHRoZSBzdHJpbmcuIFdlIFwibW9kXCIgdGhlIHJlc3VsdCB0byBtYWtlIGl0IGJldHdlZW4gMCAoaW5jbHVzaXZlKSBhbmQgMl4zMVxuICAvLyAoZXhjbHVzaXZlKSBieSBkcm9wcGluZyBoaWdoIGJpdHMuXG4gIHZhciBoYXNoZWQgPSAwO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgc3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgIGhhc2hlZCA9ICgzMSAqIGhhc2hlZCArIHN0cmluZy5jaGFyQ29kZUF0KGlpKSkgfCAwO1xuICB9XG4gIHJldHVybiBzbWkoaGFzaGVkKTtcbn1cblxuZnVuY3Rpb24gaGFzaEpTT2JqKG9iaikge1xuICB2YXIgaGFzaGVkO1xuICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgaGFzaGVkID0gd2Vha01hcC5nZXQob2JqKTtcbiAgICBpZiAoaGFzaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBoYXNoZWQ7XG4gICAgfVxuICB9XG5cbiAgaGFzaGVkID0gb2JqW1VJRF9IQVNIX0tFWV07XG4gIGlmIChoYXNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBoYXNoZWQ7XG4gIH1cblxuICBpZiAoIWNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgaGFzaGVkID0gb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlICYmIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZVtVSURfSEFTSF9LRVldO1xuICAgIGlmIChoYXNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGhhc2hlZDtcbiAgICB9XG5cbiAgICBoYXNoZWQgPSBnZXRJRU5vZGVIYXNoKG9iaik7XG4gICAgaWYgKGhhc2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFzaGVkO1xuICAgIH1cbiAgfVxuXG4gIGhhc2hlZCA9ICsrb2JqSGFzaFVJRDtcbiAgaWYgKG9iakhhc2hVSUQgJiAweDQwMDAwMDAwKSB7XG4gICAgb2JqSGFzaFVJRCA9IDA7XG4gIH1cblxuICBpZiAodXNpbmdXZWFrTWFwKSB7XG4gICAgd2Vha01hcC5zZXQob2JqLCBoYXNoZWQpO1xuICB9IGVsc2UgaWYgKGlzRXh0ZW5zaWJsZSAhPT0gdW5kZWZpbmVkICYmIGlzRXh0ZW5zaWJsZShvYmopID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm9uLWV4dGVuc2libGUgb2JqZWN0cyBhcmUgbm90IGFsbG93ZWQgYXMga2V5cy4nKTtcbiAgfSBlbHNlIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIFVJRF9IQVNIX0tFWSwge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IGhhc2hlZCxcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChcbiAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGUgIT09IHVuZGVmaW5lZCAmJlxuICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9PT0gb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICApIHtcbiAgICAvLyBTaW5jZSB3ZSBjYW4ndCBkZWZpbmUgYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0XG4gICAgLy8gd2UnbGwgaGlqYWNrIG9uZSBvZiB0aGUgbGVzcy11c2VkIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgdG9cbiAgICAvLyBzYXZlIG91ciBoYXNoIG9uIGl0LiBTaW5jZSB0aGlzIGlzIGEgZnVuY3Rpb24gaXQgd2lsbCBub3Qgc2hvdyB1cCBpblxuICAgIC8vIGBKU09OLnN0cmluZ2lmeWAgd2hpY2ggaXMgd2hhdCB3ZSB3YW50LlxuICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmFwcGx5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBhcmd1bWVudHNcbiAgICAgICk7XG4gICAgfTtcbiAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXSA9IGhhc2hlZDtcbiAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcbiAgICAvLyBhbmQgd2UgY291bGRuJ3QgdXNlIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgdG8gZXhwbG9pdCB0aGVcbiAgICAvLyBkb250RW51bSBidWcgc28gd2Ugc2ltcGx5IGFkZCB0aGUgYFVJRF9IQVNIX0tFWWAgb24gdGhlIG5vZGVcbiAgICAvLyBpdHNlbGYuXG4gICAgb2JqW1VJRF9IQVNIX0tFWV0gPSBoYXNoZWQ7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gb2JqZWN0LicpO1xuICB9XG5cbiAgcmV0dXJuIGhhc2hlZDtcbn1cblxuLy8gR2V0IHJlZmVyZW5jZXMgdG8gRVM1IG9iamVjdCBtZXRob2RzLlxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbi8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ0AnLCB7fSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0pKCk7XG5cbi8vIElFIGhhcyBhIGB1bmlxdWVJRGAgcHJvcGVydHkgb24gRE9NIG5vZGVzLiBXZSBjYW4gY29uc3RydWN0IHRoZSBoYXNoIGZyb20gaXRcbi8vIGFuZCBhdm9pZCBtZW1vcnkgbGVha3MgZnJvbSB0aGUgSUUgY2xvbmVOb2RlIGJ1Zy5cbmZ1bmN0aW9uIGdldElFTm9kZUhhc2gobm9kZSkge1xuICBpZiAobm9kZSAmJiBub2RlLm5vZGVUeXBlID4gMCkge1xuICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgY2FzZSAxOiAvLyBFbGVtZW50XG4gICAgICAgIHJldHVybiBub2RlLnVuaXF1ZUlEO1xuICAgICAgY2FzZSA5OiAvLyBEb2N1bWVudFxuICAgICAgICByZXR1cm4gbm9kZS5kb2N1bWVudEVsZW1lbnQgJiYgbm9kZS5kb2N1bWVudEVsZW1lbnQudW5pcXVlSUQ7XG4gICAgfVxuICB9XG59XG5cbi8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxudmFyIHVzaW5nV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nO1xudmFyIHdlYWtNYXA7XG5pZiAodXNpbmdXZWFrTWFwKSB7XG4gIHdlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xufVxuXG52YXIgb2JqSGFzaFVJRCA9IDA7XG5cbnZhciBVSURfSEFTSF9LRVkgPSAnX19pbW11dGFibGVoYXNoX18nO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgVUlEX0hBU0hfS0VZID0gU3ltYm9sKFVJRF9IQVNIX0tFWSk7XG59XG5cbnZhciBTVFJJTkdfSEFTSF9DQUNIRV9NSU5fU1RSTEVOID0gMTY7XG52YXIgU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUgPSAyNTU7XG52YXIgU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9IDA7XG52YXIgc3RyaW5nSGFzaENhY2hlID0ge307XG5cbnZhciBUb0tleWVkU2VxdWVuY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChLZXllZFNlcSQkMSkge1xuICBmdW5jdGlvbiBUb0tleWVkU2VxdWVuY2UoaW5kZXhlZCwgdXNlS2V5cykge1xuICAgIHRoaXMuX2l0ZXIgPSBpbmRleGVkO1xuICAgIHRoaXMuX3VzZUtleXMgPSB1c2VLZXlzO1xuICAgIHRoaXMuc2l6ZSA9IGluZGV4ZWQuc2l6ZTtcbiAgfVxuXG4gIGlmICggS2V5ZWRTZXEkJDEgKSBUb0tleWVkU2VxdWVuY2UuX19wcm90b19fID0gS2V5ZWRTZXEkJDE7XG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBLZXllZFNlcSQkMSAmJiBLZXllZFNlcSQkMS5wcm90b3R5cGUgKTtcbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvS2V5ZWRTZXF1ZW5jZTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLmdldChrZXksIG5vdFNldFZhbHVlKTtcbiAgfTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIuaGFzKGtleSk7XG4gIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS52YWx1ZVNlcSA9IGZ1bmN0aW9uIHZhbHVlU2VxICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlci52YWx1ZVNlcSgpO1xuICB9O1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uIHJldmVyc2UgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKTtcbiAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgIHJldmVyc2VkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCk7IH07XG4gICAgfVxuICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICB9O1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KTtcbiAgICBpZiAoIXRoaXMuX3VzZUtleXMpIHtcbiAgICAgIG1hcHBlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLl9pdGVyLnRvU2VxKCkubWFwKG1hcHBlciwgY29udGV4dCk7IH07XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbiAgfTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gZm4odiwgaywgdGhpcyQxKTsgfSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvS2V5ZWRTZXF1ZW5jZTtcbn0oS2V5ZWRTZXEpKTtcblRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGVbSVNfT1JERVJFRF9TWU1CT0xdID0gdHJ1ZTtcblxudmFyIFRvSW5kZXhlZFNlcXVlbmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSW5kZXhlZFNlcSQkMSkge1xuICBmdW5jdGlvbiBUb0luZGV4ZWRTZXF1ZW5jZShpdGVyKSB7XG4gICAgdGhpcy5faXRlciA9IGl0ZXI7XG4gICAgdGhpcy5zaXplID0gaXRlci5zaXplO1xuICB9XG5cbiAgaWYgKCBJbmRleGVkU2VxJCQxICkgVG9JbmRleGVkU2VxdWVuY2UuX19wcm90b19fID0gSW5kZXhlZFNlcSQkMTtcbiAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSW5kZXhlZFNlcSQkMSAmJiBJbmRleGVkU2VxJCQxLnByb3RvdHlwZSApO1xuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUb0luZGV4ZWRTZXF1ZW5jZTtcblxuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlci5pbmNsdWRlcyh2YWx1ZSk7XG4gIH07XG5cbiAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBpID0gMDtcbiAgICByZXZlcnNlICYmIGVuc3VyZVNpemUodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGZuKHYsIHJldmVyc2UgPyB0aGlzJDEuc2l6ZSAtICsraSA6IGkrKywgdGhpcyQxKTsgfSxcbiAgICAgIHJldmVyc2VcbiAgICApO1xuICB9O1xuXG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV2ZXJzZSAmJiBlbnN1cmVTaXplKHRoaXMpO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICByZXR1cm4gc3RlcC5kb25lXG4gICAgICAgID8gc3RlcFxuICAgICAgICA6IGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgcmV2ZXJzZSA/IHRoaXMkMS5zaXplIC0gKytpIDogaSsrLFxuICAgICAgICAgICAgc3RlcC52YWx1ZSxcbiAgICAgICAgICAgIHN0ZXBcbiAgICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBUb0luZGV4ZWRTZXF1ZW5jZTtcbn0oSW5kZXhlZFNlcSkpO1xuXG52YXIgVG9TZXRTZXF1ZW5jZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNldFNlcSQkMSkge1xuICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gIH1cblxuICBpZiAoIFNldFNlcSQkMSApIFRvU2V0U2VxdWVuY2UuX19wcm90b19fID0gU2V0U2VxJCQxO1xuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNldFNlcSQkMSAmJiBTZXRTZXEkJDEucHJvdG90eXBlICk7XG4gIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9TZXRTZXF1ZW5jZTtcblxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKGtleSk7XG4gIH07XG5cbiAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uICh2KSB7IHJldHVybiBmbih2LCB2LCB0aGlzJDEpOyB9LCByZXZlcnNlKTtcbiAgfTtcblxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHJldHVybiBzdGVwLmRvbmVcbiAgICAgICAgPyBzdGVwXG4gICAgICAgIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBzdGVwLnZhbHVlLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVG9TZXRTZXF1ZW5jZTtcbn0oU2V0U2VxKSk7XG5cbnZhciBGcm9tRW50cmllc1NlcXVlbmNlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoS2V5ZWRTZXEkJDEpIHtcbiAgZnVuY3Rpb24gRnJvbUVudHJpZXNTZXF1ZW5jZShlbnRyaWVzKSB7XG4gICAgdGhpcy5faXRlciA9IGVudHJpZXM7XG4gICAgdGhpcy5zaXplID0gZW50cmllcy5zaXplO1xuICB9XG5cbiAgaWYgKCBLZXllZFNlcSQkMSApIEZyb21FbnRyaWVzU2VxdWVuY2UuX19wcm90b19fID0gS2V5ZWRTZXEkJDE7XG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggS2V5ZWRTZXEkJDEgJiYgS2V5ZWRTZXEkJDEucHJvdG90eXBlICk7XG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRnJvbUVudHJpZXNTZXF1ZW5jZTtcblxuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5lbnRyeVNlcSA9IGZ1bmN0aW9uIGVudHJ5U2VxICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlci50b1NlcSgpO1xuICB9O1xuXG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcbiAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuICAgICAgICB2YXIgaW5kZXhlZENvbGxlY3Rpb24gPSBpc0NvbGxlY3Rpb24oZW50cnkpO1xuICAgICAgICByZXR1cm4gZm4oXG4gICAgICAgICAgaW5kZXhlZENvbGxlY3Rpb24gPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICBpbmRleGVkQ29sbGVjdGlvbiA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgIHRoaXMkMVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sIHJldmVyc2UpO1xuICB9O1xuXG4gIEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5faXRlci5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgZW50cnkgZXhpc3RzIGZpcnN0IHNvIGFycmF5IGFjY2VzcyBkb2Vzbid0IHRocm93IGZvciBob2xlc1xuICAgICAgICAvLyBpbiB0aGUgcGFyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFsaWRhdGVFbnRyeShlbnRyeSk7XG4gICAgICAgICAgdmFyIGluZGV4ZWRDb2xsZWN0aW9uID0gaXNDb2xsZWN0aW9uKGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZShcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBpbmRleGVkQ29sbGVjdGlvbiA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgICAgaW5kZXhlZENvbGxlY3Rpb24gPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICAgIHN0ZXBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEZyb21FbnRyaWVzU2VxdWVuY2U7XG59KEtleWVkU2VxKSk7XG5cblRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9IFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPSBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9IEZyb21FbnRyaWVzU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuXG5mdW5jdGlvbiBmbGlwRmFjdG9yeShjb2xsZWN0aW9uKSB7XG4gIHZhciBmbGlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIGZsaXBTZXF1ZW5jZS5faXRlciA9IGNvbGxlY3Rpb247XG4gIGZsaXBTZXF1ZW5jZS5zaXplID0gY29sbGVjdGlvbi5zaXplO1xuICBmbGlwU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbGxlY3Rpb247IH07XG4gIGZsaXBTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBjb2xsZWN0aW9uLnJldmVyc2UuYXBwbHkodGhpcyk7IC8vIHN1cGVyLnJldmVyc2UoKVxuICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbGxlY3Rpb24ucmV2ZXJzZSgpOyB9O1xuICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICB9O1xuICBmbGlwU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gY29sbGVjdGlvbi5pbmNsdWRlcyhrZXkpOyB9O1xuICBmbGlwU2VxdWVuY2UuaW5jbHVkZXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBjb2xsZWN0aW9uLmhhcyhrZXkpOyB9O1xuICBmbGlwU2VxdWVuY2UuY2FjaGVSZXN1bHQgPSBjYWNoZVJlc3VsdFRocm91Z2g7XG4gIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIGZuKGssIHYsIHRoaXMkMSkgIT09IGZhbHNlOyB9LCByZXZlcnNlKTtcbiAgfTtcbiAgZmxpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmICghc3RlcC5kb25lKSB7XG4gICAgICAgICAgdmFyIGsgPSBzdGVwLnZhbHVlWzBdO1xuICAgICAgICAgIHN0ZXAudmFsdWVbMF0gPSBzdGVwLnZhbHVlWzFdO1xuICAgICAgICAgIHN0ZXAudmFsdWVbMV0gPSBrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLl9faXRlcmF0b3IoXG4gICAgICB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUyA/IElURVJBVEVfS0VZUyA6IElURVJBVEVfVkFMVUVTLFxuICAgICAgcmV2ZXJzZVxuICAgICk7XG4gIH07XG4gIHJldHVybiBmbGlwU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIG1hcEZhY3RvcnkoY29sbGVjdGlvbiwgbWFwcGVyLCBjb250ZXh0KSB7XG4gIHZhciBtYXBwZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgbWFwcGVkU2VxdWVuY2Uuc2l6ZSA9IGNvbGxlY3Rpb24uc2l6ZTtcbiAgbWFwcGVkU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gY29sbGVjdGlvbi5oYXMoa2V5KTsgfTtcbiAgbWFwcGVkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24gKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICB2YXIgdiA9IGNvbGxlY3Rpb24uZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgcmV0dXJuIHYgPT09IE5PVF9TRVRcbiAgICAgID8gbm90U2V0VmFsdWVcbiAgICAgIDogbWFwcGVyLmNhbGwoY29udGV4dCwgdiwga2V5LCBjb2xsZWN0aW9uKTtcbiAgfTtcbiAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKHYsIGssIGMpIHsgcmV0dXJuIGZuKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGMpLCBrLCB0aGlzJDEpICE9PSBmYWxzZTsgfSxcbiAgICAgIHJldmVyc2VcbiAgICApO1xuICB9O1xuICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICB9XG4gICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgdmFyIGtleSA9IGVudHJ5WzBdO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGtleSxcbiAgICAgICAgbWFwcGVyLmNhbGwoY29udGV4dCwgZW50cnlbMV0sIGtleSwgY29sbGVjdGlvbiksXG4gICAgICAgIHN0ZXBcbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBtYXBwZWRTZXF1ZW5jZTtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZUZhY3RvcnkoY29sbGVjdGlvbiwgdXNlS2V5cykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgcmV2ZXJzZWRTZXF1ZW5jZS5faXRlciA9IGNvbGxlY3Rpb247XG4gIHJldmVyc2VkU2VxdWVuY2Uuc2l6ZSA9IGNvbGxlY3Rpb24uc2l6ZTtcbiAgcmV2ZXJzZWRTZXF1ZW5jZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbjsgfTtcbiAgaWYgKGNvbGxlY3Rpb24uZmxpcCkge1xuICAgIHJldmVyc2VkU2VxdWVuY2UuZmxpcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGZsaXBTZXF1ZW5jZSA9IGZsaXBGYWN0b3J5KGNvbGxlY3Rpb24pO1xuICAgICAgZmxpcFNlcXVlbmNlLnJldmVyc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2xsZWN0aW9uLmZsaXAoKTsgfTtcbiAgICAgIHJldHVybiBmbGlwU2VxdWVuY2U7XG4gICAgfTtcbiAgfVxuICByZXZlcnNlZFNlcXVlbmNlLmdldCA9IGZ1bmN0aW9uIChrZXksIG5vdFNldFZhbHVlKSB7IHJldHVybiBjb2xsZWN0aW9uLmdldCh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXksIG5vdFNldFZhbHVlKTsgfTtcbiAgcmV2ZXJzZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBjb2xsZWN0aW9uLmhhcyh1c2VLZXlzID8ga2V5IDogLTEgLSBrZXkpOyB9O1xuICByZXZlcnNlZFNlcXVlbmNlLmluY2x1ZGVzID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBjb2xsZWN0aW9uLmluY2x1ZGVzKHZhbHVlKTsgfTtcbiAgcmV2ZXJzZWRTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgcmV2ZXJzZWRTZXF1ZW5jZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGkgPSAwO1xuICAgIHJldmVyc2UgJiYgZW5zdXJlU2l6ZShjb2xsZWN0aW9uKTtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5fX2l0ZXJhdGUoXG4gICAgICBmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gZm4odiwgdXNlS2V5cyA/IGsgOiByZXZlcnNlID8gdGhpcyQxLnNpemUgLSArK2kgOiBpKyssIHRoaXMkMSk7IH0sXG4gICAgICAhcmV2ZXJzZVxuICAgICk7XG4gIH07XG4gIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRvciA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldmVyc2UgJiYgZW5zdXJlU2l6ZShjb2xsZWN0aW9uKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCAhcmV2ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICB9XG4gICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHVzZUtleXMgPyBlbnRyeVswXSA6IHJldmVyc2UgPyB0aGlzJDEuc2l6ZSAtICsraSA6IGkrKyxcbiAgICAgICAgZW50cnlbMV0sXG4gICAgICAgIHN0ZXBcbiAgICAgICk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJGYWN0b3J5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgY29udGV4dCwgdXNlS2V5cykge1xuICB2YXIgZmlsdGVyU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIGlmICh1c2VLZXlzKSB7XG4gICAgZmlsdGVyU2VxdWVuY2UuaGFzID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHYgPSBjb2xsZWN0aW9uLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgISFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrZXksIGNvbGxlY3Rpb24pO1xuICAgIH07XG4gICAgZmlsdGVyU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24gKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICAgIHZhciB2ID0gY29sbGVjdGlvbi5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICAgIHJldHVybiB2ICE9PSBOT1RfU0VUICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgY29sbGVjdGlvbilcbiAgICAgICAgPyB2XG4gICAgICAgIDogbm90U2V0VmFsdWU7XG4gICAgfTtcbiAgfVxuICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDEpO1xuICAgICAgfVxuICAgIH0sIHJldmVyc2UpO1xuICAgIHJldHVybiBpdGVyYXRpb25zO1xuICB9O1xuICBmaWx0ZXJTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICAgIHZhciB2YWx1ZSA9IGVudHJ5WzFdO1xuICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGtleSwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCB1c2VLZXlzID8ga2V5IDogaXRlcmF0aW9ucysrLCB2YWx1ZSwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIGZpbHRlclNlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiBjb3VudEJ5RmFjdG9yeShjb2xsZWN0aW9uLCBncm91cGVyLCBjb250ZXh0KSB7XG4gIHZhciBncm91cHMgPSBNYXAoKS5hc011dGFibGUoKTtcbiAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICBncm91cHMudXBkYXRlKGdyb3VwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBjb2xsZWN0aW9uKSwgMCwgZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgKyAxOyB9KTtcbiAgfSk7XG4gIHJldHVybiBncm91cHMuYXNJbW11dGFibGUoKTtcbn1cblxuZnVuY3Rpb24gZ3JvdXBCeUZhY3RvcnkoY29sbGVjdGlvbiwgZ3JvdXBlciwgY29udGV4dCkge1xuICB2YXIgaXNLZXllZEl0ZXIgPSBpc0tleWVkKGNvbGxlY3Rpb24pO1xuICB2YXIgZ3JvdXBzID0gKGlzT3JkZXJlZChjb2xsZWN0aW9uKSA/IE9yZGVyZWRNYXAoKSA6IE1hcCgpKS5hc011dGFibGUoKTtcbiAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICBncm91cHMudXBkYXRlKFxuICAgICAgZ3JvdXBlci5jYWxsKGNvbnRleHQsIHYsIGssIGNvbGxlY3Rpb24pLFxuICAgICAgZnVuY3Rpb24gKGEpIHsgcmV0dXJuICgoYSA9IGEgfHwgW10pLCBhLnB1c2goaXNLZXllZEl0ZXIgPyBbaywgdl0gOiB2KSwgYSk7IH1cbiAgICApO1xuICB9KTtcbiAgdmFyIGNvZXJjZSA9IGNvbGxlY3Rpb25DbGFzcyhjb2xsZWN0aW9uKTtcbiAgcmV0dXJuIGdyb3Vwcy5tYXAoZnVuY3Rpb24gKGFycikgeyByZXR1cm4gcmVpZnkoY29sbGVjdGlvbiwgY29lcmNlKGFycikpOyB9KS5hc0ltbXV0YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBzbGljZUZhY3RvcnkoY29sbGVjdGlvbiwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuICB2YXIgb3JpZ2luYWxTaXplID0gY29sbGVjdGlvbi5zaXplO1xuXG4gIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIG9yaWdpbmFsU2l6ZSkpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuXG4gIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgb3JpZ2luYWxTaXplKTtcblxuICAvLyBiZWdpbiBvciBlbmQgd2lsbCBiZSBOYU4gaWYgdGhleSB3ZXJlIHByb3ZpZGVkIGFzIG5lZ2F0aXZlIG51bWJlcnMgYW5kXG4gIC8vIHRoaXMgY29sbGVjdGlvbidzIHNpemUgaXMgdW5rbm93bi4gSW4gdGhhdCBjYXNlLCBjYWNoZSBmaXJzdCBzbyB0aGVyZSBpc1xuICAvLyBhIGtub3duIHNpemUgYW5kIHRoZXNlIGRvIG5vdCByZXNvbHZlIHRvIE5hTi5cbiAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG4gICAgcmV0dXJuIHNsaWNlRmFjdG9yeShjb2xsZWN0aW9uLnRvU2VxKCkuY2FjaGVSZXN1bHQoKSwgYmVnaW4sIGVuZCwgdXNlS2V5cyk7XG4gIH1cblxuICAvLyBOb3RlOiByZXNvbHZlZEVuZCBpcyB1bmRlZmluZWQgd2hlbiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UncyBsZW5ndGggaXNcbiAgLy8gdW5rbm93biBhbmQgdGhpcyBzbGljZSBkaWQgbm90IHN1cHBseSBhbiBlbmQgYW5kIHNob3VsZCBjb250YWluIGFsbFxuICAvLyBlbGVtZW50cyBhZnRlciByZXNvbHZlZEJlZ2luLlxuICAvLyBJbiB0aGF0IGNhc2UsIHJlc29sdmVkU2l6ZSB3aWxsIGJlIE5hTiBhbmQgc2xpY2VTaXplIHdpbGwgcmVtYWluIHVuZGVmaW5lZC5cbiAgdmFyIHJlc29sdmVkU2l6ZSA9IHJlc29sdmVkRW5kIC0gcmVzb2x2ZWRCZWdpbjtcbiAgdmFyIHNsaWNlU2l6ZTtcbiAgaWYgKHJlc29sdmVkU2l6ZSA9PT0gcmVzb2x2ZWRTaXplKSB7XG4gICAgc2xpY2VTaXplID0gcmVzb2x2ZWRTaXplIDwgMCA/IDAgOiByZXNvbHZlZFNpemU7XG4gIH1cblxuICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG5cbiAgLy8gSWYgY29sbGVjdGlvbi5zaXplIGlzIHVuZGVmaW5lZCwgdGhlIHNpemUgb2YgdGhlIHJlYWxpemVkIHNsaWNlU2VxIGlzXG4gIC8vIHVua25vd24gYXQgdGhpcyBwb2ludCB1bmxlc3MgdGhlIG51bWJlciBvZiBpdGVtcyB0byBzbGljZSBpcyAwXG4gIHNsaWNlU2VxLnNpemUgPVxuICAgIHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IChjb2xsZWN0aW9uLnNpemUgJiYgc2xpY2VTaXplKSB8fCB1bmRlZmluZWQ7XG5cbiAgaWYgKCF1c2VLZXlzICYmIGlzU2VxKGNvbGxlY3Rpb24pICYmIHNsaWNlU2l6ZSA+PSAwKSB7XG4gICAgc2xpY2VTZXEuZ2V0ID0gZnVuY3Rpb24oaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgICByZXR1cm4gaW5kZXggPj0gMCAmJiBpbmRleCA8IHNsaWNlU2l6ZVxuICAgICAgICA/IGNvbGxlY3Rpb24uZ2V0KGluZGV4ICsgcmVzb2x2ZWRCZWdpbiwgbm90U2V0VmFsdWUpXG4gICAgICAgIDogbm90U2V0VmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIHNsaWNlU2VxLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGlmIChzbGljZVNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgIH1cbiAgICB2YXIgc2tpcHBlZCA9IDA7XG4gICAgdmFyIGlzU2tpcHBpbmcgPSB0cnVlO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICBjb2xsZWN0aW9uLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgICAgaWYgKCEoaXNTa2lwcGluZyAmJiAoaXNTa2lwcGluZyA9IHNraXBwZWQrKyA8IHJlc29sdmVkQmVnaW4pKSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgdGhpcyQxKSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICBpdGVyYXRpb25zICE9PSBzbGljZVNpemVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcblxuICBzbGljZVNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbih0eXBlLCByZXZlcnNlKSB7XG4gICAgaWYgKHNsaWNlU2l6ZSAhPT0gMCAmJiByZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBpbnN0YW50aWF0aW5nIHBhcmVudCBpdGVyYXRvciBpZiB0YWtpbmcgMC5cbiAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGl0ZXJhdG9yRG9uZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB2YXIgc2tpcHBlZCA9IDA7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgd2hpbGUgKHNraXBwZWQrKyA8IHJlc29sdmVkQmVnaW4pIHtcbiAgICAgICAgaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKCsraXRlcmF0aW9ucyA+IHNsaWNlU2l6ZSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmICh1c2VLZXlzIHx8IHR5cGUgPT09IElURVJBVEVfVkFMVUVTIHx8IHN0ZXAuZG9uZSkge1xuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zIC0gMSwgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHNsaWNlU2VxO1xufVxuXG5mdW5jdGlvbiB0YWtlV2hpbGVGYWN0b3J5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICB2YXIgdGFrZVNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGNvbGxlY3Rpb24pO1xuICB0YWtlU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIGNvbGxlY3Rpb24uX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKHYsIGssIGMpIHsgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpICYmICsraXRlcmF0aW9ucyAmJiBmbih2LCBrLCB0aGlzJDEpOyB9XG4gICAgKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgdGFrZVNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgIHZhciBpdGVyYXRpbmcgPSB0cnVlO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpdGVyYXRpbmcpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgfVxuICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgIHZhciBrID0gZW50cnlbMF07XG4gICAgICB2YXIgdiA9IGVudHJ5WzFdO1xuICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCB0aGlzJDEpKSB7XG4gICAgICAgIGl0ZXJhdGluZyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiB0YWtlU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIHNraXBXaGlsZUZhY3RvcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gIHZhciBza2lwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIHNraXBTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xuICAgIH1cbiAgICB2YXIgaXNTa2lwcGluZyA9IHRydWU7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIGNvbGxlY3Rpb24uX19pdGVyYXRlKGZ1bmN0aW9uICh2LCBrLCBjKSB7XG4gICAgICBpZiAoIShpc1NraXBwaW5nICYmIChpc1NraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpKSkge1xuICAgICAgICBpdGVyYXRpb25zKys7XG4gICAgICAgIHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCB0aGlzJDEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRpb25zO1xuICB9O1xuICBza2lwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgdmFyIHNraXBwaW5nID0gdHJ1ZTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHZhciBrO1xuICAgICAgdmFyIHY7XG4gICAgICBkbyB7XG4gICAgICAgIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUykge1xuICAgICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0tFWVMpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgdW5kZWZpbmVkLCBzdGVwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlWzFdLCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICBrID0gZW50cnlbMF07XG4gICAgICAgIHYgPSBlbnRyeVsxXTtcbiAgICAgICAgc2tpcHBpbmcgJiYgKHNraXBwaW5nID0gcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgdGhpcyQxKSk7XG4gICAgICB9IHdoaWxlIChza2lwcGluZyk7XG4gICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBza2lwU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoY29sbGVjdGlvbiwgdmFsdWVzKSB7XG4gIHZhciBpc0tleWVkQ29sbGVjdGlvbiA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBpdGVycyA9IFtjb2xsZWN0aW9uXVxuICAgIC5jb25jYXQodmFsdWVzKVxuICAgIC5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIGlmICghaXNDb2xsZWN0aW9uKHYpKSB7XG4gICAgICAgIHYgPSBpc0tleWVkQ29sbGVjdGlvblxuICAgICAgICAgID8ga2V5ZWRTZXFGcm9tVmFsdWUodilcbiAgICAgICAgICA6IGluZGV4ZWRTZXFGcm9tVmFsdWUoQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdl0pO1xuICAgICAgfSBlbHNlIGlmIChpc0tleWVkQ29sbGVjdGlvbikge1xuICAgICAgICB2ID0gS2V5ZWRDb2xsZWN0aW9uKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnNpemUgIT09IDA7IH0pO1xuXG4gIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuXG4gIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgc2luZ2xldG9uID0gaXRlcnNbMF07XG4gICAgaWYgKFxuICAgICAgc2luZ2xldG9uID09PSBjb2xsZWN0aW9uIHx8XG4gICAgICAoaXNLZXllZENvbGxlY3Rpb24gJiYgaXNLZXllZChzaW5nbGV0b24pKSB8fFxuICAgICAgKGlzSW5kZXhlZChjb2xsZWN0aW9uKSAmJiBpc0luZGV4ZWQoc2luZ2xldG9uKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBzaW5nbGV0b247XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbmNhdFNlcSA9IG5ldyBBcnJheVNlcShpdGVycyk7XG4gIGlmIChpc0tleWVkQ29sbGVjdGlvbikge1xuICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b0tleWVkU2VxKCk7XG4gIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChjb2xsZWN0aW9uKSkge1xuICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuICB9XG4gIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS5mbGF0dGVuKHRydWUpO1xuICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBzZXEpIHtcbiAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBzaXplID0gc2VxLnNpemU7XG4gICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuICAgICAgfVxuICAgIH1cbiAgfSwgMCk7XG4gIHJldHVybiBjb25jYXRTZXE7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGNvbGxlY3Rpb24sIGRlcHRoLCB1c2VLZXlzKSB7XG4gIHZhciBmbGF0U2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uKGZuLCByZXZlcnNlKSB7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gZmxhdERlZXAoaXRlciwgY3VycmVudERlcHRoKSB7XG4gICAgICBpdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgICAgICBpZiAoKCFkZXB0aCB8fCBjdXJyZW50RGVwdGggPCBkZXB0aCkgJiYgaXNDb2xsZWN0aW9uKHYpKSB7XG4gICAgICAgICAgZmxhdERlZXAodiwgY3VycmVudERlcHRoICsgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICAgIGlmIChmbih2LCB1c2VLZXlzID8gayA6IGl0ZXJhdGlvbnMgLSAxLCBmbGF0U2VxdWVuY2UpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhc3RvcHBlZDtcbiAgICAgIH0sIHJldmVyc2UpO1xuICAgIH1cbiAgICBmbGF0RGVlcChjb2xsZWN0aW9uLCAwKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgZmxhdFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgdmFyIHN0YWNrID0gW107XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgd2hpbGUgKGl0ZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lICE9PSBmYWxzZSkge1xuICAgICAgICAgIGl0ZXJhdG9yID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHYgPSBzdGVwLnZhbHVlO1xuICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTKSB7XG4gICAgICAgICAgdiA9IHZbMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghZGVwdGggfHwgc3RhY2subGVuZ3RoIDwgZGVwdGgpICYmIGlzQ29sbGVjdGlvbih2KSkge1xuICAgICAgICAgIHN0YWNrLnB1c2goaXRlcmF0b3IpO1xuICAgICAgICAgIGl0ZXJhdG9yID0gdi5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1c2VLZXlzID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2LCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gZmxhdFNlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiBmbGF0TWFwRmFjdG9yeShjb2xsZWN0aW9uLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgdmFyIGNvZXJjZSA9IGNvbGxlY3Rpb25DbGFzcyhjb2xsZWN0aW9uKTtcbiAgcmV0dXJuIGNvbGxlY3Rpb25cbiAgICAudG9TZXEoKVxuICAgIC5tYXAoZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIGNvZXJjZShtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrLCBjb2xsZWN0aW9uKSk7IH0pXG4gICAgLmZsYXR0ZW4odHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGludGVycG9zZUZhY3RvcnkoY29sbGVjdGlvbiwgc2VwYXJhdG9yKSB7XG4gIHZhciBpbnRlcnBvc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIGludGVycG9zZWRTZXF1ZW5jZS5zaXplID0gY29sbGVjdGlvbi5zaXplICYmIGNvbGxlY3Rpb24uc2l6ZSAqIDIgLSAxO1xuICBpbnRlcnBvc2VkU2VxdWVuY2UuX19pdGVyYXRlVW5jYWNoZWQgPSBmdW5jdGlvbihmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIGNvbGxlY3Rpb24uX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKHYpIHsgcmV0dXJuICghaXRlcmF0aW9ucyB8fCBmbihzZXBhcmF0b3IsIGl0ZXJhdGlvbnMrKywgdGhpcyQxKSAhPT0gZmFsc2UpICYmXG4gICAgICAgIGZuKHYsIGl0ZXJhdGlvbnMrKywgdGhpcyQxKSAhPT0gZmFsc2U7IH0sXG4gICAgICByZXZlcnNlXG4gICAgKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB2YXIgc3RlcDtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghc3RlcCB8fCBpdGVyYXRpb25zICUgMikge1xuICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRpb25zICUgMlxuICAgICAgICA/IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzZXBhcmF0b3IpXG4gICAgICAgIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHN0ZXAudmFsdWUsIHN0ZXApO1xuICAgIH0pO1xuICB9O1xuICByZXR1cm4gaW50ZXJwb3NlZFNlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiBzb3J0RmFjdG9yeShjb2xsZWN0aW9uLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcbiAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICB9XG4gIHZhciBpc0tleWVkQ29sbGVjdGlvbiA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBlbnRyaWVzID0gY29sbGVjdGlvblxuICAgIC50b1NlcSgpXG4gICAgLm1hcChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gW2ssIHYsIGluZGV4KyssIG1hcHBlciA/IG1hcHBlcih2LCBrLCBjb2xsZWN0aW9uKSA6IHZdOyB9KVxuICAgIC52YWx1ZVNlcSgpXG4gICAgLnRvQXJyYXkoKTtcbiAgZW50cmllcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBjb21wYXJhdG9yKGFbM10sIGJbM10pIHx8IGFbMl0gLSBiWzJdOyB9KS5mb3JFYWNoKFxuICAgIGlzS2V5ZWRDb2xsZWN0aW9uXG4gICAgICA/IGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgZW50cmllc1tpXS5sZW5ndGggPSAyO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgZW50cmllc1tpXSA9IHZbMV07XG4gICAgICAgIH1cbiAgKTtcbiAgcmV0dXJuIGlzS2V5ZWRDb2xsZWN0aW9uXG4gICAgPyBLZXllZFNlcShlbnRyaWVzKVxuICAgIDogaXNJbmRleGVkKGNvbGxlY3Rpb24pXG4gICAgICA/IEluZGV4ZWRTZXEoZW50cmllcylcbiAgICAgIDogU2V0U2VxKGVudHJpZXMpO1xufVxuXG5mdW5jdGlvbiBtYXhGYWN0b3J5KGNvbGxlY3Rpb24sIGNvbXBhcmF0b3IsIG1hcHBlcikge1xuICBpZiAoIWNvbXBhcmF0b3IpIHtcbiAgICBjb21wYXJhdG9yID0gZGVmYXVsdENvbXBhcmF0b3I7XG4gIH1cbiAgaWYgKG1hcHBlcikge1xuICAgIHZhciBlbnRyeSA9IGNvbGxlY3Rpb25cbiAgICAgIC50b1NlcSgpXG4gICAgICAubWFwKGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBbdiwgbWFwcGVyKHYsIGssIGNvbGxlY3Rpb24pXTsgfSlcbiAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGFbMV0sIGJbMV0pID8gYiA6IGEpOyB9KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3Rpb24ucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAobWF4Q29tcGFyZShjb21wYXJhdG9yLCBhLCBiKSA/IGIgOiBhKTsgfSk7XG59XG5cbmZ1bmN0aW9uIG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikge1xuICB2YXIgY29tcCA9IGNvbXBhcmF0b3IoYiwgYSk7XG4gIC8vIGIgaXMgY29uc2lkZXJlZCB0aGUgbmV3IG1heCBpZiB0aGUgY29tcGFyYXRvciBkZWNsYXJlcyB0aGVtIGVxdWFsLCBidXRcbiAgLy8gdGhleSBhcmUgbm90IGVxdWFsIGFuZCBiIGlzIGluIGZhY3QgYSBudWxsaXNoIHZhbHVlLlxuICByZXR1cm4gKFxuICAgIChjb21wID09PSAwICYmIGIgIT09IGEgJiYgKGIgPT09IHVuZGVmaW5lZCB8fCBiID09PSBudWxsIHx8IGIgIT09IGIpKSB8fFxuICAgIGNvbXAgPiAwXG4gICk7XG59XG5cbmZ1bmN0aW9uIHppcFdpdGhGYWN0b3J5KGtleUl0ZXIsIHppcHBlciwgaXRlcnMsIHppcEFsbCkge1xuICB2YXIgemlwU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2Uoa2V5SXRlcik7XG4gIHZhciBzaXplcyA9IG5ldyBBcnJheVNlcShpdGVycykubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLnNpemU7IH0pO1xuICB6aXBTZXF1ZW5jZS5zaXplID0gemlwQWxsID8gc2l6ZXMubWF4KCkgOiBzaXplcy5taW4oKTtcbiAgLy8gTm90ZTogdGhpcyBhIGdlbmVyaWMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBfX2l0ZXJhdGUgaW4gdGVybXMgb2ZcbiAgLy8gX19pdGVyYXRvciB3aGljaCBtYXkgYmUgbW9yZSBnZW5lcmljYWxseSB1c2VmdWwgaW4gdGhlIGZ1dHVyZS5cbiAgemlwU2VxdWVuY2UuX19pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgICAvKiBnZW5lcmljOlxuICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICBpdGVyYXRpb25zKys7XG4gICAgICBpZiAoZm4oc3RlcC52YWx1ZVsxXSwgc3RlcC52YWx1ZVswXSwgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgICAqL1xuICAgIC8vIGluZGV4ZWQ6XG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICB2YXIgc3RlcDtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgemlwU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24odHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBpdGVyYXRvcnMgPSBpdGVycy5tYXAoXG4gICAgICBmdW5jdGlvbiAoaSkgeyByZXR1cm4gKChpID0gQ29sbGVjdGlvbihpKSksIGdldEl0ZXJhdG9yKHJldmVyc2UgPyBpLnJldmVyc2UoKSA6IGkpKTsgfVxuICAgICk7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwcztcbiAgICAgIGlmICghaXNEb25lKSB7XG4gICAgICAgIHN0ZXBzID0gaXRlcmF0b3JzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5uZXh0KCk7IH0pO1xuICAgICAgICBpc0RvbmUgPSB6aXBBbGwgPyBzdGVwcy5ldmVyeShmdW5jdGlvbiAocykgeyByZXR1cm4gcy5kb25lOyB9KSA6IHN0ZXBzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZG9uZTsgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICB0eXBlLFxuICAgICAgICBpdGVyYXRpb25zKyssXG4gICAgICAgIHppcHBlci5hcHBseShudWxsLCBzdGVwcy5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMudmFsdWU7IH0pKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHppcFNlcXVlbmNlO1xufVxuXG4vLyAjcHJhZ21hIEhlbHBlciBGdW5jdGlvbnNcblxuZnVuY3Rpb24gcmVpZnkoaXRlciwgc2VxKSB7XG4gIHJldHVybiBpdGVyID09PSBzZXEgPyBpdGVyIDogaXNTZXEoaXRlcikgPyBzZXEgOiBpdGVyLmNvbnN0cnVjdG9yKHNlcSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRW50cnkoZW50cnkpIHtcbiAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgW0ssIFZdIHR1cGxlOiAnICsgZW50cnkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb25DbGFzcyhjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBpc0tleWVkKGNvbGxlY3Rpb24pXG4gICAgPyBLZXllZENvbGxlY3Rpb25cbiAgICA6IGlzSW5kZXhlZChjb2xsZWN0aW9uKVxuICAgICAgPyBJbmRleGVkQ29sbGVjdGlvblxuICAgICAgOiBTZXRDb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbikge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShcbiAgICAoaXNLZXllZChjb2xsZWN0aW9uKVxuICAgICAgPyBLZXllZFNlcVxuICAgICAgOiBpc0luZGV4ZWQoY29sbGVjdGlvbilcbiAgICAgICAgPyBJbmRleGVkU2VxXG4gICAgICAgIDogU2V0U2VxXG4gICAgKS5wcm90b3R5cGVcbiAgKTtcbn1cblxuZnVuY3Rpb24gY2FjaGVSZXN1bHRUaHJvdWdoKCkge1xuICBpZiAodGhpcy5faXRlci5jYWNoZVJlc3VsdCkge1xuICAgIHRoaXMuX2l0ZXIuY2FjaGVSZXN1bHQoKTtcbiAgICB0aGlzLnNpemUgPSB0aGlzLl9pdGVyLnNpemU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmV0dXJuIFNlcS5wcm90b3R5cGUuY2FjaGVSZXN1bHQuY2FsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmF0b3IoYSwgYikge1xuICBpZiAoYSA9PT0gdW5kZWZpbmVkICYmIGIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgaWYgKGIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHJldHVybiBhID4gYiA/IDEgOiBhIDwgYiA/IC0xIDogMDtcbn1cblxuLy8gaHR0cDovL2pzcGVyZi5jb20vY29weS1hcnJheS1pbmxpbmVcbmZ1bmN0aW9uIGFyckNvcHkoYXJyLCBvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgdmFyIG5ld0FyciA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG4gIH1cbiAgcmV0dXJuIG5ld0Fycjtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZXJyb3IpIHtcbiAgaWYgKCFjb25kaXRpb24pIHsgdGhyb3cgbmV3IEVycm9yKGVycm9yKTsgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnROb3RJbmZpbml0ZShzaXplKSB7XG4gIGludmFyaWFudChcbiAgICBzaXplICE9PSBJbmZpbml0eSxcbiAgICAnQ2Fubm90IHBlcmZvcm0gdGhpcyBhY3Rpb24gd2l0aCBhbiBpbmZpbml0ZSBzaXplLidcbiAgKTtcbn1cblxuZnVuY3Rpb24gY29lcmNlS2V5UGF0aChrZXlQYXRoKSB7XG4gIGlmIChpc0FycmF5TGlrZShrZXlQYXRoKSAmJiB0eXBlb2Yga2V5UGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4ga2V5UGF0aDtcbiAgfVxuICBpZiAoaXNPcmRlcmVkKGtleVBhdGgpKSB7XG4gICAgcmV0dXJuIGtleVBhdGgudG9BcnJheSgpO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ0ludmFsaWQga2V5UGF0aDogZXhwZWN0ZWQgT3JkZXJlZCBDb2xsZWN0aW9uIG9yIEFycmF5OiAnICsga2V5UGF0aFxuICApO1xufVxuXG5mdW5jdGlvbiBpc1BsYWluT2JqKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdmFsdWUgJiZcbiAgICAodHlwZW9mIHZhbHVlLmNvbnN0cnVjdG9yICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lID09PSAnT2JqZWN0JylcbiAgKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgcG90ZW50aWFsbHktcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZSwgZWl0aGVyXG4gKiBwcm92aWRlZCBieSBJbW11dGFibGUuanMgb3IgYSBwbGFpbiBBcnJheSBvciBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzRGF0YVN0cnVjdHVyZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAoaXNJbW11dGFibGUodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmoodmFsdWUpKVxuICApO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgdmFsdWUgdG8gYSBzdHJpbmcsIGFkZGluZyBxdW90ZXMgaWYgYSBzdHJpbmcgd2FzIHByb3ZpZGVkLlxuICovXG5mdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbiAgfSBjYXRjaCAoX2lnbm9yZUVycm9yKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXMoY29sbGVjdGlvbiwga2V5KSB7XG4gIHJldHVybiBpc0ltbXV0YWJsZShjb2xsZWN0aW9uKVxuICAgID8gY29sbGVjdGlvbi5oYXMoa2V5KVxuICAgIDogaXNEYXRhU3RydWN0dXJlKGNvbGxlY3Rpb24pICYmIGhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwga2V5KTtcbn1cblxuZnVuY3Rpb24gZ2V0KGNvbGxlY3Rpb24sIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgcmV0dXJuIGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pXG4gICAgPyBjb2xsZWN0aW9uLmdldChrZXksIG5vdFNldFZhbHVlKVxuICAgIDogIWhhcyhjb2xsZWN0aW9uLCBrZXkpXG4gICAgICA/IG5vdFNldFZhbHVlXG4gICAgICA6IHR5cGVvZiBjb2xsZWN0aW9uLmdldCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNvbGxlY3Rpb24uZ2V0KGtleSlcbiAgICAgICAgOiBjb2xsZWN0aW9uW2tleV07XG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KGZyb20pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZnJvbSkpIHtcbiAgICByZXR1cm4gYXJyQ29weShmcm9tKTtcbiAgfVxuICB2YXIgdG8gPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG4gICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShjb2xsZWN0aW9uLCBrZXkpIHtcbiAgaWYgKCFpc0RhdGFTdHJ1Y3R1cmUoY29sbGVjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0Nhbm5vdCB1cGRhdGUgbm9uLWRhdGEtc3RydWN0dXJlIHZhbHVlOiAnICsgY29sbGVjdGlvblxuICAgICk7XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uLnJlbW92ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCB1cGRhdGUgaW1tdXRhYmxlIHZhbHVlIHdpdGhvdXQgLnJlbW92ZSgpIG1ldGhvZDogJyArIGNvbGxlY3Rpb25cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLnJlbW92ZShrZXkpO1xuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChjb2xsZWN0aW9uLCBrZXkpKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH1cbiAgdmFyIGNvbGxlY3Rpb25Db3B5ID0gc2hhbGxvd0NvcHkoY29sbGVjdGlvbik7XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbGxlY3Rpb25Db3B5KSkge1xuICAgIGNvbGxlY3Rpb25Db3B5LnNwbGljZShrZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBjb2xsZWN0aW9uQ29weVtrZXldO1xuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uQ29weTtcbn1cblxuZnVuY3Rpb24gc2V0KGNvbGxlY3Rpb24sIGtleSwgdmFsdWUpIHtcbiAgaWYgKCFpc0RhdGFTdHJ1Y3R1cmUoY29sbGVjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0Nhbm5vdCB1cGRhdGUgbm9uLWRhdGEtc3RydWN0dXJlIHZhbHVlOiAnICsgY29sbGVjdGlvblxuICAgICk7XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uLnNldCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCB1cGRhdGUgaW1tdXRhYmxlIHZhbHVlIHdpdGhvdXQgLnNldCgpIG1ldGhvZDogJyArIGNvbGxlY3Rpb25cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLnNldChrZXksIHZhbHVlKTtcbiAgfVxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb2xsZWN0aW9uLCBrZXkpICYmIHZhbHVlID09PSBjb2xsZWN0aW9uW2tleV0pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuICB2YXIgY29sbGVjdGlvbkNvcHkgPSBzaGFsbG93Q29weShjb2xsZWN0aW9uKTtcbiAgY29sbGVjdGlvbkNvcHlba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gY29sbGVjdGlvbkNvcHk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluKGNvbGxlY3Rpb24sIGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gIGlmICghdXBkYXRlcikge1xuICAgIHVwZGF0ZXIgPSBub3RTZXRWYWx1ZTtcbiAgICBub3RTZXRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB2YXIgdXBkYXRlZFZhbHVlID0gdXBkYXRlSW5EZWVwbHkoXG4gICAgaXNJbW11dGFibGUoY29sbGVjdGlvbiksXG4gICAgY29sbGVjdGlvbixcbiAgICBjb2VyY2VLZXlQYXRoKGtleVBhdGgpLFxuICAgIDAsXG4gICAgbm90U2V0VmFsdWUsXG4gICAgdXBkYXRlclxuICApO1xuICByZXR1cm4gdXBkYXRlZFZhbHVlID09PSBOT1RfU0VUID8gbm90U2V0VmFsdWUgOiB1cGRhdGVkVmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluRGVlcGx5KFxuICBpbkltbXV0YWJsZSxcbiAgZXhpc3RpbmcsXG4gIGtleVBhdGgsXG4gIGksXG4gIG5vdFNldFZhbHVlLFxuICB1cGRhdGVyXG4pIHtcbiAgdmFyIHdhc05vdFNldCA9IGV4aXN0aW5nID09PSBOT1RfU0VUO1xuICBpZiAoaSA9PT0ga2V5UGF0aC5sZW5ndGgpIHtcbiAgICB2YXIgZXhpc3RpbmdWYWx1ZSA9IHdhc05vdFNldCA/IG5vdFNldFZhbHVlIDogZXhpc3Rpbmc7XG4gICAgdmFyIG5ld1ZhbHVlID0gdXBkYXRlcihleGlzdGluZ1ZhbHVlKTtcbiAgICByZXR1cm4gbmV3VmFsdWUgPT09IGV4aXN0aW5nVmFsdWUgPyBleGlzdGluZyA6IG5ld1ZhbHVlO1xuICB9XG4gIGlmICghd2FzTm90U2V0ICYmICFpc0RhdGFTdHJ1Y3R1cmUoZXhpc3RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdDYW5ub3QgdXBkYXRlIHdpdGhpbiBub24tZGF0YS1zdHJ1Y3R1cmUgdmFsdWUgaW4gcGF0aCBbJyArXG4gICAgICAgIGtleVBhdGguc2xpY2UoMCwgaSkubWFwKHF1b3RlU3RyaW5nKSArXG4gICAgICAgICddOiAnICtcbiAgICAgICAgZXhpc3RpbmdcbiAgICApO1xuICB9XG4gIHZhciBrZXkgPSBrZXlQYXRoW2ldO1xuICB2YXIgbmV4dEV4aXN0aW5nID0gd2FzTm90U2V0ID8gTk9UX1NFVCA6IGdldChleGlzdGluZywga2V5LCBOT1RfU0VUKTtcbiAgdmFyIG5leHRVcGRhdGVkID0gdXBkYXRlSW5EZWVwbHkoXG4gICAgbmV4dEV4aXN0aW5nID09PSBOT1RfU0VUID8gaW5JbW11dGFibGUgOiBpc0ltbXV0YWJsZShuZXh0RXhpc3RpbmcpLFxuICAgIG5leHRFeGlzdGluZyxcbiAgICBrZXlQYXRoLFxuICAgIGkgKyAxLFxuICAgIG5vdFNldFZhbHVlLFxuICAgIHVwZGF0ZXJcbiAgKTtcbiAgcmV0dXJuIG5leHRVcGRhdGVkID09PSBuZXh0RXhpc3RpbmdcbiAgICA/IGV4aXN0aW5nXG4gICAgOiBuZXh0VXBkYXRlZCA9PT0gTk9UX1NFVFxuICAgICAgPyByZW1vdmUoZXhpc3RpbmcsIGtleSlcbiAgICAgIDogc2V0KFxuICAgICAgICAgIHdhc05vdFNldCA/IChpbkltbXV0YWJsZSA/IGVtcHR5TWFwKCkgOiB7fSkgOiBleGlzdGluZyxcbiAgICAgICAgICBrZXksXG4gICAgICAgICAgbmV4dFVwZGF0ZWRcbiAgICAgICAgKTtcbn1cblxuZnVuY3Rpb24gc2V0SW4oY29sbGVjdGlvbiwga2V5UGF0aCwgdmFsdWUpIHtcbiAgcmV0dXJuIHVwZGF0ZUluKGNvbGxlY3Rpb24sIGtleVBhdGgsIE5PVF9TRVQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbn1cblxuZnVuY3Rpb24gc2V0SW4kMShrZXlQYXRoLCB2KSB7XG4gIHJldHVybiBzZXRJbih0aGlzLCBrZXlQYXRoLCB2KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSW4oY29sbGVjdGlvbiwga2V5UGF0aCkge1xuICByZXR1cm4gdXBkYXRlSW4oY29sbGVjdGlvbiwga2V5UGF0aCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gTk9UX1NFVDsgfSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUluKGtleVBhdGgpIHtcbiAgcmV0dXJuIHJlbW92ZUluKHRoaXMsIGtleVBhdGgpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoY29sbGVjdGlvbiwga2V5LCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICByZXR1cm4gdXBkYXRlSW4oY29sbGVjdGlvbiwgW2tleV0sIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlJDEoa2V5LCBub3RTZXRWYWx1ZSwgdXBkYXRlcikge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgID8ga2V5KHRoaXMpXG4gICAgOiB1cGRhdGUodGhpcywga2V5LCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluJDEoa2V5UGF0aCwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgcmV0dXJuIHVwZGF0ZUluKHRoaXMsIGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoKSB7XG4gIHZhciBpdGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gbWVyZ2VJbnRvS2V5ZWRXaXRoKHRoaXMsIGl0ZXJzKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VXaXRoKG1lcmdlcikge1xuICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgaWYgKHR5cGVvZiBtZXJnZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG1lcmdlciBmdW5jdGlvbjogJyArIG1lcmdlcik7XG4gIH1cbiAgcmV0dXJuIG1lcmdlSW50b0tleWVkV2l0aCh0aGlzLCBpdGVycywgbWVyZ2VyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VJbnRvS2V5ZWRXaXRoKGNvbGxlY3Rpb24sIGNvbGxlY3Rpb25zLCBtZXJnZXIpIHtcbiAgdmFyIGl0ZXJzID0gW107XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGlpKyspIHtcbiAgICB2YXIgY29sbGVjdGlvbiQxID0gS2V5ZWRDb2xsZWN0aW9uKGNvbGxlY3Rpb25zW2lpXSk7XG4gICAgaWYgKGNvbGxlY3Rpb24kMS5zaXplICE9PSAwKSB7XG4gICAgICBpdGVycy5wdXNoKGNvbGxlY3Rpb24kMSk7XG4gICAgfVxuICB9XG4gIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuICBpZiAoXG4gICAgY29sbGVjdGlvbi50b1NlcSgpLnNpemUgPT09IDAgJiZcbiAgICAhY29sbGVjdGlvbi5fX293bmVySUQgJiZcbiAgICBpdGVycy5sZW5ndGggPT09IDFcbiAgKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uY29uc3RydWN0b3IoaXRlcnNbMF0pO1xuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgbWVyZ2VJbnRvQ29sbGVjdGlvbiA9IG1lcmdlclxuICAgICAgPyBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIHVwZGF0ZShcbiAgICAgICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICBOT1RfU0VULFxuICAgICAgICAgICAgZnVuY3Rpb24gKG9sZFZhbCkgeyByZXR1cm4gKG9sZFZhbCA9PT0gTk9UX1NFVCA/IHZhbHVlIDogbWVyZ2VyKG9sZFZhbCwgdmFsdWUsIGtleSkpOyB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgIGNvbGxlY3Rpb24uc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9O1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBpdGVycy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIGl0ZXJzW2lpXS5mb3JFYWNoKG1lcmdlSW50b0NvbGxlY3Rpb24pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlJDEoY29sbGVjdGlvbikge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHJldHVybiBtZXJnZVdpdGhTb3VyY2VzKGNvbGxlY3Rpb24sIHNvdXJjZXMpO1xufVxuXG5mdW5jdGlvbiBtZXJnZVdpdGgkMShtZXJnZXIsIGNvbGxlY3Rpb24pIHtcbiAgdmFyIHNvdXJjZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgc291cmNlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDIgXTtcblxuICByZXR1cm4gbWVyZ2VXaXRoU291cmNlcyhjb2xsZWN0aW9uLCBzb3VyY2VzLCBtZXJnZXIpO1xufVxuXG5mdW5jdGlvbiBtZXJnZURlZXAoY29sbGVjdGlvbikge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHJldHVybiBtZXJnZURlZXBXaXRoU291cmNlcyhjb2xsZWN0aW9uLCBzb3VyY2VzKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwV2l0aChtZXJnZXIsIGNvbGxlY3Rpb24pIHtcbiAgdmFyIHNvdXJjZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgc291cmNlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDIgXTtcblxuICByZXR1cm4gbWVyZ2VEZWVwV2l0aFNvdXJjZXMoY29sbGVjdGlvbiwgc291cmNlcywgbWVyZ2VyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwV2l0aFNvdXJjZXMoY29sbGVjdGlvbiwgc291cmNlcywgbWVyZ2VyKSB7XG4gIHJldHVybiBtZXJnZVdpdGhTb3VyY2VzKGNvbGxlY3Rpb24sIHNvdXJjZXMsIGRlZXBNZXJnZXJXaXRoKG1lcmdlcikpO1xufVxuXG5mdW5jdGlvbiBtZXJnZVdpdGhTb3VyY2VzKGNvbGxlY3Rpb24sIHNvdXJjZXMsIG1lcmdlcikge1xuICBpZiAoIWlzRGF0YVN0cnVjdHVyZShjb2xsZWN0aW9uKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnQ2Fubm90IG1lcmdlIGludG8gbm9uLWRhdGEtc3RydWN0dXJlIHZhbHVlOiAnICsgY29sbGVjdGlvblxuICAgICk7XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBtZXJnZXIgPT09ICdmdW5jdGlvbicgJiYgY29sbGVjdGlvbi5tZXJnZVdpdGhcbiAgICAgID8gY29sbGVjdGlvbi5tZXJnZVdpdGguYXBwbHkoY29sbGVjdGlvbiwgWyBtZXJnZXIgXS5jb25jYXQoIHNvdXJjZXMgKSlcbiAgICAgIDogY29sbGVjdGlvbi5tZXJnZVxuICAgICAgICA/IGNvbGxlY3Rpb24ubWVyZ2UuYXBwbHkoY29sbGVjdGlvbiwgc291cmNlcylcbiAgICAgICAgOiBjb2xsZWN0aW9uLmNvbmNhdC5hcHBseShjb2xsZWN0aW9uLCBzb3VyY2VzKTtcbiAgfVxuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbik7XG4gIHZhciBtZXJnZWQgPSBjb2xsZWN0aW9uO1xuICB2YXIgQ29sbGVjdGlvbiQkMSA9IGlzQXJyYXkgPyBJbmRleGVkQ29sbGVjdGlvbiA6IEtleWVkQ29sbGVjdGlvbjtcbiAgdmFyIG1lcmdlSXRlbSA9IGlzQXJyYXlcbiAgICA/IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBDb3B5IG9uIHdyaXRlXG4gICAgICAgIGlmIChtZXJnZWQgPT09IGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBtZXJnZWQgPSBzaGFsbG93Q29weShtZXJnZWQpO1xuICAgICAgICB9XG4gICAgICAgIG1lcmdlZC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICA6IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBoYXNWYWwgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG1lcmdlZCwga2V5KTtcbiAgICAgICAgdmFyIG5leHRWYWwgPVxuICAgICAgICAgIGhhc1ZhbCAmJiBtZXJnZXIgPyBtZXJnZXIobWVyZ2VkW2tleV0sIHZhbHVlLCBrZXkpIDogdmFsdWU7XG4gICAgICAgIGlmICghaGFzVmFsIHx8IG5leHRWYWwgIT09IG1lcmdlZFtrZXldKSB7XG4gICAgICAgICAgLy8gQ29weSBvbiB3cml0ZVxuICAgICAgICAgIGlmIChtZXJnZWQgPT09IGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIG1lcmdlZCA9IHNoYWxsb3dDb3B5KG1lcmdlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1lcmdlZFtrZXldID0gbmV4dFZhbDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgQ29sbGVjdGlvbiQkMShzb3VyY2VzW2ldKS5mb3JFYWNoKG1lcmdlSXRlbSk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlZDtcbn1cblxuZnVuY3Rpb24gZGVlcE1lcmdlcldpdGgobWVyZ2VyKSB7XG4gIGZ1bmN0aW9uIGRlZXBNZXJnZXIob2xkVmFsdWUsIG5ld1ZhbHVlLCBrZXkpIHtcbiAgICByZXR1cm4gaXNEYXRhU3RydWN0dXJlKG9sZFZhbHVlKSAmJiBpc0RhdGFTdHJ1Y3R1cmUobmV3VmFsdWUpXG4gICAgICA/IG1lcmdlV2l0aFNvdXJjZXMob2xkVmFsdWUsIFtuZXdWYWx1ZV0sIGRlZXBNZXJnZXIpXG4gICAgICA6IG1lcmdlclxuICAgICAgICA/IG1lcmdlcihvbGRWYWx1ZSwgbmV3VmFsdWUsIGtleSlcbiAgICAgICAgOiBuZXdWYWx1ZTtcbiAgfVxuICByZXR1cm4gZGVlcE1lcmdlcjtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwJDEoKSB7XG4gIHZhciBpdGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gbWVyZ2VEZWVwV2l0aFNvdXJjZXModGhpcywgaXRlcnMpO1xufVxuXG5mdW5jdGlvbiBtZXJnZURlZXBXaXRoJDEobWVyZ2VyKSB7XG4gIHZhciBpdGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBpdGVyc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICByZXR1cm4gbWVyZ2VEZWVwV2l0aFNvdXJjZXModGhpcywgaXRlcnMsIG1lcmdlcik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlSW4oa2V5UGF0aCkge1xuICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgcmV0dXJuIHVwZGF0ZUluKHRoaXMsIGtleVBhdGgsIGVtcHR5TWFwKCksIGZ1bmN0aW9uIChtKSB7IHJldHVybiBtZXJnZVdpdGhTb3VyY2VzKG0sIGl0ZXJzKTsgfSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVlcEluKGtleVBhdGgpIHtcbiAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICB3aGlsZSAoIGxlbi0tID4gMCApIGl0ZXJzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHJldHVybiB1cGRhdGVJbih0aGlzLCBrZXlQYXRoLCBlbXB0eU1hcCgpLCBmdW5jdGlvbiAobSkgeyByZXR1cm4gbWVyZ2VEZWVwV2l0aFNvdXJjZXMobSwgaXRlcnMpOyB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIHdpdGhNdXRhdGlvbnMoZm4pIHtcbiAgdmFyIG11dGFibGUgPSB0aGlzLmFzTXV0YWJsZSgpO1xuICBmbihtdXRhYmxlKTtcbiAgcmV0dXJuIG11dGFibGUud2FzQWx0ZXJlZCgpID8gbXV0YWJsZS5fX2Vuc3VyZU93bmVyKHRoaXMuX19vd25lcklEKSA6IHRoaXM7XG59XG5cbmZ1bmN0aW9uIGFzTXV0YWJsZSgpIHtcbiAgcmV0dXJuIHRoaXMuX19vd25lcklEID8gdGhpcyA6IHRoaXMuX19lbnN1cmVPd25lcihuZXcgT3duZXJJRCgpKTtcbn1cblxuZnVuY3Rpb24gYXNJbW11dGFibGUoKSB7XG4gIHJldHVybiB0aGlzLl9fZW5zdXJlT3duZXIoKTtcbn1cblxuZnVuY3Rpb24gd2FzQWx0ZXJlZCgpIHtcbiAgcmV0dXJuIHRoaXMuX19hbHRlcmVkO1xufVxuXG52YXIgTWFwID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoS2V5ZWRDb2xsZWN0aW9uJCQxKSB7XG4gIGZ1bmN0aW9uIE1hcCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/IGVtcHR5TWFwKClcbiAgICAgIDogaXNNYXAodmFsdWUpICYmICFpc09yZGVyZWQodmFsdWUpXG4gICAgICAgID8gdmFsdWVcbiAgICAgICAgOiBlbXB0eU1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZENvbGxlY3Rpb24kJDEodmFsdWUpO1xuICAgICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gbWFwLnNldChrLCB2KTsgfSk7XG4gICAgICAgICAgfSk7XG4gIH1cblxuICBpZiAoIEtleWVkQ29sbGVjdGlvbiQkMSApIE1hcC5fX3Byb3RvX18gPSBLZXllZENvbGxlY3Rpb24kJDE7XG4gIE1hcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBLZXllZENvbGxlY3Rpb24kJDEgJiYgS2V5ZWRDb2xsZWN0aW9uJCQxLnByb3RvdHlwZSApO1xuICBNYXAucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFwO1xuXG4gIE1hcC5vZiA9IGZ1bmN0aW9uIG9mICgpIHtcbiAgICB2YXIga2V5VmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGtleVZhbHVlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgcmV0dXJuIGVtcHR5TWFwKCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobWFwKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleVZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICBpZiAoaSArIDEgPj0ga2V5VmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyB2YWx1ZSBmb3Iga2V5OiAnICsga2V5VmFsdWVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBtYXAuc2V0KGtleVZhbHVlc1tpXSwga2V5VmFsdWVzW2kgKyAxXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdNYXAgeycsICd9Jyk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICBNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaywgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdFxuICAgICAgPyB0aGlzLl9yb290LmdldCgwLCB1bmRlZmluZWQsIGssIG5vdFNldFZhbHVlKVxuICAgICAgOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG4gIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChrLCB2KSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCB2KTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaykge1xuICAgIHJldHVybiB1cGRhdGVNYXAodGhpcywgaywgTk9UX1NFVCk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5kZWxldGVBbGwgPSBmdW5jdGlvbiBkZWxldGVBbGwgKGtleXMpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IENvbGxlY3Rpb24oa2V5cyk7XG5cbiAgICBpZiAoY29sbGVjdGlvbi5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgIGNvbGxlY3Rpb24uZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBtYXAucmVtb3ZlKGtleSk7IH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGVtcHR5TWFwKCk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gIE1hcC5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIHNvcnQgKGNvbXBhcmF0b3IpIHtcbiAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICByZXR1cm4gT3JkZXJlZE1hcChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKSk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5zb3J0QnkgPSBmdW5jdGlvbiBzb3J0QnkgKG1hcHBlciwgY29tcGFyYXRvcikge1xuICAgIC8vIExhdGUgYmluZGluZ1xuICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuICB9O1xuXG4gIE1hcC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwZXIsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBtYXBwZXIuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBtYXApKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXG4gIE1hcC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMsIHR5cGUsIHJldmVyc2UpO1xuICB9O1xuXG4gIE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHRoaXMuX3Jvb3QgJiZcbiAgICAgIHRoaXMuX3Jvb3QuaXRlcmF0ZShmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICByZXR1cm4gZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzJDEpO1xuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghb3duZXJJRCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlNYXAoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VNYXAodGhpcy5zaXplLCB0aGlzLl9yb290LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gIH07XG5cbiAgcmV0dXJuIE1hcDtcbn0oS2V5ZWRDb2xsZWN0aW9uKSk7XG5cbk1hcC5pc01hcCA9IGlzTWFwO1xuXG52YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbk1hcFByb3RvdHlwZVtJU19NQVBfU1lNQk9MXSA9IHRydWU7XG5NYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG5NYXBQcm90b3R5cGUucmVtb3ZlQWxsID0gTWFwUHJvdG90eXBlLmRlbGV0ZUFsbDtcbk1hcFByb3RvdHlwZS5zZXRJbiA9IHNldEluJDE7XG5NYXBQcm90b3R5cGUucmVtb3ZlSW4gPSBNYXBQcm90b3R5cGUuZGVsZXRlSW4gPSBkZWxldGVJbjtcbk1hcFByb3RvdHlwZS51cGRhdGUgPSB1cGRhdGUkMTtcbk1hcFByb3RvdHlwZS51cGRhdGVJbiA9IHVwZGF0ZUluJDE7XG5NYXBQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUuY29uY2F0ID0gbWVyZ2U7XG5NYXBQcm90b3R5cGUubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuTWFwUHJvdG90eXBlLm1lcmdlRGVlcCA9IG1lcmdlRGVlcCQxO1xuTWFwUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBtZXJnZURlZXBXaXRoJDE7XG5NYXBQcm90b3R5cGUubWVyZ2VJbiA9IG1lcmdlSW47XG5NYXBQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBtZXJnZURlZXBJbjtcbk1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gd2l0aE11dGF0aW9ucztcbk1hcFByb3RvdHlwZS53YXNBbHRlcmVkID0gd2FzQWx0ZXJlZDtcbk1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGFzSW1tdXRhYmxlO1xuTWFwUHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZSA9IGFzTXV0YWJsZTtcbk1hcFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uKHJlc3VsdCwgYXJyKSB7XG4gIHJldHVybiByZXN1bHQuc2V0KGFyclswXSwgYXJyWzFdKTtcbn07XG5NYXBQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gb2JqLmFzSW1tdXRhYmxlKCk7XG59O1xuXG4vLyAjcHJhZ21hIFRyaWUgTm9kZXNcblxudmFyIEFycmF5TWFwTm9kZSA9IGZ1bmN0aW9uIEFycmF5TWFwTm9kZShvd25lcklELCBlbnRyaWVzKSB7XG4gIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG59O1xuXG5BcnJheU1hcE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gIGZvciAodmFyIGlpID0gMCwgbGVuID0gZW50cmllcy5sZW5ndGg7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgaWYgKGlzKGtleSwgZW50cmllc1tpaV1bMF0pKSB7XG4gICAgICByZXR1cm4gZW50cmllc1tpaV1bMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBub3RTZXRWYWx1ZTtcbn07XG5cbkFycmF5TWFwTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBlbnRyaWVzLmxlbmd0aDtcbiAgZm9yICg7IGlkeCA8IGxlbjsgaWR4KyspIHtcbiAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lkeF1bMF0pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgdmFyIGV4aXN0cyA9IGlkeCA8IGxlbjtcblxuICBpZiAoZXhpc3RzID8gZW50cmllc1tpZHhdWzFdID09PSB2YWx1ZSA6IHJlbW92ZWQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIFNldFJlZihkaWRBbHRlcik7XG4gIChyZW1vdmVkIHx8ICFleGlzdHMpICYmIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcblxuICBpZiAocmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAoIWV4aXN0cyAmJiAhcmVtb3ZlZCAmJiBlbnRyaWVzLmxlbmd0aCA+PSBNQVhfQVJSQVlfTUFQX1NJWkUpIHtcbiAgICByZXR1cm4gY3JlYXRlTm9kZXMob3duZXJJRCwgZW50cmllcywga2V5LCB2YWx1ZSk7XG4gIH1cblxuICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICBpZiAoZXhpc3RzKSB7XG4gICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgIGlkeCA9PT0gbGVuIC0gMVxuICAgICAgICA/IG5ld0VudHJpZXMucG9wKClcbiAgICAgICAgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH1cblxuICBpZiAoaXNFZGl0YWJsZSkge1xuICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gbmV3IEFycmF5TWFwTm9kZShvd25lcklELCBuZXdFbnRyaWVzKTtcbn07XG5cbnZhciBCaXRtYXBJbmRleGVkTm9kZSA9IGZ1bmN0aW9uIEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgbm9kZXMpIHtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgdGhpcy5iaXRtYXAgPSBiaXRtYXA7XG4gIHRoaXMubm9kZXMgPSBub2Rlcztcbn07XG5cbkJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICB9XG4gIHZhciBiaXQgPSAxIDw8ICgoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSyk7XG4gIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgcmV0dXJuIChiaXRtYXAgJiBiaXQpID09PSAwXG4gICAgPyBub3RTZXRWYWx1ZVxuICAgIDogdGhpcy5ub2Rlc1twb3BDb3VudChiaXRtYXAgJiAoYml0IC0gMSkpXS5nZXQoXG4gICAgICAgIHNoaWZ0ICsgU0hJRlQsXG4gICAgICAgIGtleUhhc2gsXG4gICAgICAgIGtleSxcbiAgICAgICAgbm90U2V0VmFsdWVcbiAgICAgICk7XG59O1xuXG5CaXRtYXBJbmRleGVkTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gIH1cbiAgdmFyIGtleUhhc2hGcmFnID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gIHZhciBiaXQgPSAxIDw8IGtleUhhc2hGcmFnO1xuICB2YXIgYml0bWFwID0gdGhpcy5iaXRtYXA7XG4gIHZhciBleGlzdHMgPSAoYml0bWFwICYgYml0KSAhPT0gMDtcblxuICBpZiAoIWV4aXN0cyAmJiB2YWx1ZSA9PT0gTk9UX1NFVCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIGlkeCA9IHBvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSk7XG4gIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gIHZhciBub2RlID0gZXhpc3RzID8gbm9kZXNbaWR4XSA6IHVuZGVmaW5lZDtcbiAgdmFyIG5ld05vZGUgPSB1cGRhdGVOb2RlKFxuICAgIG5vZGUsXG4gICAgb3duZXJJRCxcbiAgICBzaGlmdCArIFNISUZULFxuICAgIGtleUhhc2gsXG4gICAga2V5LFxuICAgIHZhbHVlLFxuICAgIGRpZENoYW5nZVNpemUsXG4gICAgZGlkQWx0ZXJcbiAgKTtcblxuICBpZiAobmV3Tm9kZSA9PT0gbm9kZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaWYgKCFleGlzdHMgJiYgbmV3Tm9kZSAmJiBub2Rlcy5sZW5ndGggPj0gTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUpIHtcbiAgICByZXR1cm4gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwga2V5SGFzaEZyYWcsIG5ld05vZGUpO1xuICB9XG5cbiAgaWYgKFxuICAgIGV4aXN0cyAmJlxuICAgICFuZXdOb2RlICYmXG4gICAgbm9kZXMubGVuZ3RoID09PSAyICYmXG4gICAgaXNMZWFmTm9kZShub2Rlc1tpZHggXiAxXSlcbiAgKSB7XG4gICAgcmV0dXJuIG5vZGVzW2lkeCBeIDFdO1xuICB9XG5cbiAgaWYgKGV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA9PT0gMSAmJiBpc0xlYWZOb2RlKG5ld05vZGUpKSB7XG4gICAgcmV0dXJuIG5ld05vZGU7XG4gIH1cblxuICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICB2YXIgbmV3Qml0bWFwID0gZXhpc3RzID8gKG5ld05vZGUgPyBiaXRtYXAgOiBiaXRtYXAgXiBiaXQpIDogYml0bWFwIHwgYml0O1xuICB2YXIgbmV3Tm9kZXMgPSBleGlzdHNcbiAgICA/IG5ld05vZGVcbiAgICAgID8gc2V0QXQobm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSlcbiAgICAgIDogc3BsaWNlT3V0KG5vZGVzLCBpZHgsIGlzRWRpdGFibGUpXG4gICAgOiBzcGxpY2VJbihub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblxuICBpZiAoaXNFZGl0YWJsZSkge1xuICAgIHRoaXMuYml0bWFwID0gbmV3Qml0bWFwO1xuICAgIHRoaXMubm9kZXMgPSBuZXdOb2RlcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBuZXcgQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgbmV3Qml0bWFwLCBuZXdOb2Rlcyk7XG59O1xuXG52YXIgSGFzaEFycmF5TWFwTm9kZSA9IGZ1bmN0aW9uIEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgY291bnQsIG5vZGVzKSB7XG4gIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gIHRoaXMuY291bnQgPSBjb3VudDtcbiAgdGhpcy5ub2RlcyA9IG5vZGVzO1xufTtcblxuSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgfVxuICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gIHZhciBub2RlID0gdGhpcy5ub2Rlc1tpZHhdO1xuICByZXR1cm4gbm9kZVxuICAgID8gbm9kZS5nZXQoc2hpZnQgKyBTSElGVCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSlcbiAgICA6IG5vdFNldFZhbHVlO1xufTtcblxuSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gIH1cbiAgdmFyIGlkeCA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xuICB2YXIgbm9kZSA9IG5vZGVzW2lkeF07XG5cbiAgaWYgKHJlbW92ZWQgJiYgIW5vZGUpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBuZXdOb2RlID0gdXBkYXRlTm9kZShcbiAgICBub2RlLFxuICAgIG93bmVySUQsXG4gICAgc2hpZnQgKyBTSElGVCxcbiAgICBrZXlIYXNoLFxuICAgIGtleSxcbiAgICB2YWx1ZSxcbiAgICBkaWRDaGFuZ2VTaXplLFxuICAgIGRpZEFsdGVyXG4gICk7XG4gIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgbmV3Q291bnQgPSB0aGlzLmNvdW50O1xuICBpZiAoIW5vZGUpIHtcbiAgICBuZXdDb3VudCsrO1xuICB9IGVsc2UgaWYgKCFuZXdOb2RlKSB7XG4gICAgbmV3Q291bnQtLTtcbiAgICBpZiAobmV3Q291bnQgPCBNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSkge1xuICAgICAgcmV0dXJuIHBhY2tOb2Rlcyhvd25lcklELCBub2RlcywgbmV3Q291bnQsIGlkeCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzRWRpdGFibGUgPSBvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRDtcbiAgdmFyIG5ld05vZGVzID0gc2V0QXQobm9kZXMsIGlkeCwgbmV3Tm9kZSwgaXNFZGl0YWJsZSk7XG5cbiAgaWYgKGlzRWRpdGFibGUpIHtcbiAgICB0aGlzLmNvdW50ID0gbmV3Q291bnQ7XG4gICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0NvdW50LCBuZXdOb2Rlcyk7XG59O1xuXG52YXIgSGFzaENvbGxpc2lvbk5vZGUgPSBmdW5jdGlvbiBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyaWVzKSB7XG4gIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gIHRoaXMua2V5SGFzaCA9IGtleUhhc2g7XG4gIHRoaXMuZW50cmllcyA9IGVudHJpZXM7XG59O1xuXG5IYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vdFNldFZhbHVlO1xufTtcblxuSGFzaENvbGxpc2lvbk5vZGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAob3duZXJJRCwgc2hpZnQsIGtleUhhc2gsIGtleSwgdmFsdWUsIGRpZENoYW5nZVNpemUsIGRpZEFsdGVyKSB7XG4gIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICB9XG5cbiAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcblxuICBpZiAoa2V5SGFzaCAhPT0gdGhpcy5rZXlIYXNoKSB7XG4gICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAgIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgICByZXR1cm4gbWVyZ2VJbnRvTm9kZSh0aGlzLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgfVxuXG4gIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoO1xuICBmb3IgKDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgZXhpc3RzID0gaWR4IDwgbGVuO1xuXG4gIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gIGlmIChyZW1vdmVkICYmIGxlbiA9PT0gMikge1xuICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgZW50cmllc1tpZHggXiAxXSk7XG4gIH1cblxuICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICB2YXIgbmV3RW50cmllcyA9IGlzRWRpdGFibGUgPyBlbnRyaWVzIDogYXJyQ29weShlbnRyaWVzKTtcblxuICBpZiAoZXhpc3RzKSB7XG4gICAgaWYgKHJlbW92ZWQpIHtcbiAgICAgIGlkeCA9PT0gbGVuIC0gMVxuICAgICAgICA/IG5ld0VudHJpZXMucG9wKClcbiAgICAgICAgOiAobmV3RW50cmllc1tpZHhdID0gbmV3RW50cmllcy5wb3AoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0VudHJpZXNbaWR4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbmV3RW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH1cblxuICBpZiAoaXNFZGl0YWJsZSkge1xuICAgIHRoaXMuZW50cmllcyA9IG5ld0VudHJpZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gbmV3IEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgbmV3RW50cmllcyk7XG59O1xuXG52YXIgVmFsdWVOb2RlID0gZnVuY3Rpb24gVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSB7XG4gIHRoaXMub3duZXJJRCA9IG93bmVySUQ7XG4gIHRoaXMua2V5SGFzaCA9IGtleUhhc2g7XG4gIHRoaXMuZW50cnkgPSBlbnRyeTtcbn07XG5cblZhbHVlTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICByZXR1cm4gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKSA/IHRoaXMuZW50cnlbMV0gOiBub3RTZXRWYWx1ZTtcbn07XG5cblZhbHVlTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgdmFyIHJlbW92ZWQgPSB2YWx1ZSA9PT0gTk9UX1NFVDtcbiAgdmFyIGtleU1hdGNoID0gaXMoa2V5LCB0aGlzLmVudHJ5WzBdKTtcbiAgaWYgKGtleU1hdGNoID8gdmFsdWUgPT09IHRoaXMuZW50cnlbMV0gOiByZW1vdmVkKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBTZXRSZWYoZGlkQWx0ZXIpO1xuXG4gIGlmIChyZW1vdmVkKSB7XG4gICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gIH1cblxuICBpZiAoa2V5TWF0Y2gpIHtcbiAgICBpZiAob3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQpIHtcbiAgICAgIHRoaXMuZW50cnlbMV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFZhbHVlTm9kZShvd25lcklELCB0aGlzLmtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gIH1cblxuICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBoYXNoKGtleSksIFtrZXksIHZhbHVlXSk7XG59O1xuXG4vLyAjcHJhZ21hIEl0ZXJhdG9yc1xuXG5BcnJheU1hcE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBIYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uKFxuICBmbixcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gZW50cmllcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgIGlmIChmbihlbnRyaWVzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbkJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gSGFzaEFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uKFxuICBmbixcbiAgcmV2ZXJzZVxuKSB7XG4gIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gIGZvciAodmFyIGlpID0gMCwgbWF4SW5kZXggPSBub2Rlcy5sZW5ndGggLSAxOyBpaSA8PSBtYXhJbmRleDsgaWkrKykge1xuICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgaWYgKG5vZGUgJiYgbm9kZS5pdGVyYXRlKGZuLCByZXZlcnNlKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuVmFsdWVOb2RlLnByb3RvdHlwZS5pdGVyYXRlID0gZnVuY3Rpb24oZm4sIHJldmVyc2UpIHtcbiAgcmV0dXJuIGZuKHRoaXMuZW50cnkpO1xufTtcblxudmFyIE1hcEl0ZXJhdG9yID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSXRlcmF0b3IkJDEpIHtcbiAgZnVuY3Rpb24gTWFwSXRlcmF0b3IobWFwLCB0eXBlLCByZXZlcnNlKSB7XG4gICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgdGhpcy5fcmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgdGhpcy5fc3RhY2sgPSBtYXAuX3Jvb3QgJiYgbWFwSXRlcmF0b3JGcmFtZShtYXAuX3Jvb3QpO1xuICB9XG5cbiAgaWYgKCBJdGVyYXRvciQkMSApIE1hcEl0ZXJhdG9yLl9fcHJvdG9fXyA9IEl0ZXJhdG9yJCQxO1xuICBNYXBJdGVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJdGVyYXRvciQkMSAmJiBJdGVyYXRvciQkMS5wcm90b3R5cGUgKTtcbiAgTWFwSXRlcmF0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFwSXRlcmF0b3I7XG5cbiAgTWFwSXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiBuZXh0ICgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX3R5cGU7XG4gICAgdmFyIHN0YWNrID0gdGhpcy5fc3RhY2s7XG4gICAgd2hpbGUgKHN0YWNrKSB7XG4gICAgICB2YXIgbm9kZSA9IHN0YWNrLm5vZGU7XG4gICAgICB2YXIgaW5kZXggPSBzdGFjay5pbmRleCsrO1xuICAgICAgdmFyIG1heEluZGV4ID0gKHZvaWQgMCk7XG4gICAgICBpZiAobm9kZS5lbnRyeSkge1xuICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBub2RlLmVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmVudHJpZXMpIHtcbiAgICAgICAgbWF4SW5kZXggPSBub2RlLmVudHJpZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGluZGV4IDw9IG1heEluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUoXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgbm9kZS5lbnRyaWVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF4SW5kZXggPSBub2RlLm5vZGVzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChpbmRleCA8PSBtYXhJbmRleCkge1xuICAgICAgICAgIHZhciBzdWJOb2RlID0gbm9kZS5ub2Rlc1t0aGlzLl9yZXZlcnNlID8gbWF4SW5kZXggLSBpbmRleCA6IGluZGV4XTtcbiAgICAgICAgICBpZiAoc3ViTm9kZSkge1xuICAgICAgICAgICAgaWYgKHN1Yk5vZGUuZW50cnkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgc3ViTm9kZS5lbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gbWFwSXRlcmF0b3JGcmFtZShzdWJOb2RlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFjayA9IHRoaXMuX3N0YWNrID0gdGhpcy5fc3RhY2suX19wcmV2O1xuICAgIH1cbiAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gIH07XG5cbiAgcmV0dXJuIE1hcEl0ZXJhdG9yO1xufShJdGVyYXRvcikpO1xuXG5mdW5jdGlvbiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5KSB7XG4gIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG59XG5cbmZ1bmN0aW9uIG1hcEl0ZXJhdG9yRnJhbWUobm9kZSwgcHJldikge1xuICByZXR1cm4ge1xuICAgIG5vZGU6IG5vZGUsXG4gICAgaW5kZXg6IDAsXG4gICAgX19wcmV2OiBwcmV2LFxuICB9O1xufVxuXG5mdW5jdGlvbiBtYWtlTWFwKHNpemUsIHJvb3QsIG93bmVySUQsIGhhc2gkJDEpIHtcbiAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUoTWFwUHJvdG90eXBlKTtcbiAgbWFwLnNpemUgPSBzaXplO1xuICBtYXAuX3Jvb3QgPSByb290O1xuICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgbWFwLl9faGFzaCA9IGhhc2gkJDE7XG4gIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgcmV0dXJuIG1hcDtcbn1cblxudmFyIEVNUFRZX01BUDtcbmZ1bmN0aW9uIGVtcHR5TWFwKCkge1xuICByZXR1cm4gRU1QVFlfTUFQIHx8IChFTVBUWV9NQVAgPSBtYWtlTWFwKDApKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTWFwKG1hcCwgaywgdikge1xuICB2YXIgbmV3Um9vdDtcbiAgdmFyIG5ld1NpemU7XG4gIGlmICghbWFwLl9yb290KSB7XG4gICAgaWYgKHYgPT09IE5PVF9TRVQpIHtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIG5ld1NpemUgPSAxO1xuICAgIG5ld1Jvb3QgPSBuZXcgQXJyYXlNYXBOb2RlKG1hcC5fX293bmVySUQsIFtbaywgdl1dKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlkQ2hhbmdlU2l6ZSA9IE1ha2VSZWYoKTtcbiAgICB2YXIgZGlkQWx0ZXIgPSBNYWtlUmVmKCk7XG4gICAgbmV3Um9vdCA9IHVwZGF0ZU5vZGUoXG4gICAgICBtYXAuX3Jvb3QsXG4gICAgICBtYXAuX19vd25lcklELFxuICAgICAgMCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIGssXG4gICAgICB2LFxuICAgICAgZGlkQ2hhbmdlU2l6ZSxcbiAgICAgIGRpZEFsdGVyXG4gICAgKTtcbiAgICBpZiAoIWRpZEFsdGVyLnZhbHVlKSB7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBuZXdTaXplID0gbWFwLnNpemUgKyAoZGlkQ2hhbmdlU2l6ZS52YWx1ZSA/ICh2ID09PSBOT1RfU0VUID8gLTEgOiAxKSA6IDApO1xuICB9XG4gIGlmIChtYXAuX19vd25lcklEKSB7XG4gICAgbWFwLnNpemUgPSBuZXdTaXplO1xuICAgIG1hcC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgbWFwLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICBtYXAuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbWFwO1xuICB9XG4gIHJldHVybiBuZXdSb290ID8gbWFrZU1hcChuZXdTaXplLCBuZXdSb290KSA6IGVtcHR5TWFwKCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU5vZGUoXG4gIG5vZGUsXG4gIG93bmVySUQsXG4gIHNoaWZ0LFxuICBrZXlIYXNoLFxuICBrZXksXG4gIHZhbHVlLFxuICBkaWRDaGFuZ2VTaXplLFxuICBkaWRBbHRlclxuKSB7XG4gIGlmICghbm9kZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gTk9UX1NFVCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIFtrZXksIHZhbHVlXSk7XG4gIH1cbiAgcmV0dXJuIG5vZGUudXBkYXRlKFxuICAgIG93bmVySUQsXG4gICAgc2hpZnQsXG4gICAga2V5SGFzaCxcbiAgICBrZXksXG4gICAgdmFsdWUsXG4gICAgZGlkQ2hhbmdlU2l6ZSxcbiAgICBkaWRBbHRlclxuICApO1xufVxuXG5mdW5jdGlvbiBpc0xlYWZOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBub2RlLmNvbnN0cnVjdG9yID09PSBWYWx1ZU5vZGUgfHwgbm9kZS5jb25zdHJ1Y3RvciA9PT0gSGFzaENvbGxpc2lvbk5vZGVcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VJbnRvTm9kZShub2RlLCBvd25lcklELCBzaGlmdCwga2V5SGFzaCwgZW50cnkpIHtcbiAgaWYgKG5vZGUua2V5SGFzaCA9PT0ga2V5SGFzaCkge1xuICAgIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwga2V5SGFzaCwgW25vZGUuZW50cnksIGVudHJ5XSk7XG4gIH1cblxuICB2YXIgaWR4MSA9IChzaGlmdCA9PT0gMCA/IG5vZGUua2V5SGFzaCA6IG5vZGUua2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgdmFyIGlkeDIgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcblxuICB2YXIgbmV3Tm9kZTtcbiAgdmFyIG5vZGVzID1cbiAgICBpZHgxID09PSBpZHgyXG4gICAgICA/IFttZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0ICsgU0hJRlQsIGtleUhhc2gsIGVudHJ5KV1cbiAgICAgIDogKChuZXdOb2RlID0gbmV3IFZhbHVlTm9kZShvd25lcklELCBrZXlIYXNoLCBlbnRyeSkpLFxuICAgICAgICBpZHgxIDwgaWR4MiA/IFtub2RlLCBuZXdOb2RlXSA6IFtuZXdOb2RlLCBub2RlXSk7XG5cbiAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCAoMSA8PCBpZHgxKSB8ICgxIDw8IGlkeDIpLCBub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVzKG93bmVySUQsIGVudHJpZXMsIGtleSwgdmFsdWUpIHtcbiAgaWYgKCFvd25lcklEKSB7XG4gICAgb3duZXJJRCA9IG5ldyBPd25lcklEKCk7XG4gIH1cbiAgdmFyIG5vZGUgPSBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVudHJpZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpaV07XG4gICAgbm9kZSA9IG5vZGUudXBkYXRlKG93bmVySUQsIDAsIHVuZGVmaW5lZCwgZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBjb3VudCwgZXhjbHVkaW5nKSB7XG4gIHZhciBiaXRtYXAgPSAwO1xuICB2YXIgcGFja2VkSUkgPSAwO1xuICB2YXIgcGFja2VkTm9kZXMgPSBuZXcgQXJyYXkoY291bnQpO1xuICBmb3IgKHZhciBpaSA9IDAsIGJpdCA9IDEsIGxlbiA9IG5vZGVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyssIGJpdCA8PD0gMSkge1xuICAgIHZhciBub2RlID0gbm9kZXNbaWldO1xuICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQgJiYgaWkgIT09IGV4Y2x1ZGluZykge1xuICAgICAgYml0bWFwIHw9IGJpdDtcbiAgICAgIHBhY2tlZE5vZGVzW3BhY2tlZElJKytdID0gbm9kZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBiaXRtYXAsIHBhY2tlZE5vZGVzKTtcbn1cblxuZnVuY3Rpb24gZXhwYW5kTm9kZXMob3duZXJJRCwgbm9kZXMsIGJpdG1hcCwgaW5jbHVkaW5nLCBub2RlKSB7XG4gIHZhciBjb3VudCA9IDA7XG4gIHZhciBleHBhbmRlZE5vZGVzID0gbmV3IEFycmF5KFNJWkUpO1xuICBmb3IgKHZhciBpaSA9IDA7IGJpdG1hcCAhPT0gMDsgaWkrKywgYml0bWFwID4+Pj0gMSkge1xuICAgIGV4cGFuZGVkTm9kZXNbaWldID0gYml0bWFwICYgMSA/IG5vZGVzW2NvdW50KytdIDogdW5kZWZpbmVkO1xuICB9XG4gIGV4cGFuZGVkTm9kZXNbaW5jbHVkaW5nXSA9IG5vZGU7XG4gIHJldHVybiBuZXcgSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCArIDEsIGV4cGFuZGVkTm9kZXMpO1xufVxuXG5mdW5jdGlvbiBwb3BDb3VudCh4KSB7XG4gIHggLT0gKHggPj4gMSkgJiAweDU1NTU1NTU1O1xuICB4ID0gKHggJiAweDMzMzMzMzMzKSArICgoeCA+PiAyKSAmIDB4MzMzMzMzMzMpO1xuICB4ID0gKHggKyAoeCA+PiA0KSkgJiAweDBmMGYwZjBmO1xuICB4ICs9IHggPj4gODtcbiAgeCArPSB4ID4+IDE2O1xuICByZXR1cm4geCAmIDB4N2Y7XG59XG5cbmZ1bmN0aW9uIHNldEF0KGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICB2YXIgbmV3QXJyYXkgPSBjYW5FZGl0ID8gYXJyYXkgOiBhcnJDb3B5KGFycmF5KTtcbiAgbmV3QXJyYXlbaWR4XSA9IHZhbDtcbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VJbihhcnJheSwgaWR4LCB2YWwsIGNhbkVkaXQpIHtcbiAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCArIDE7XG4gIGlmIChjYW5FZGl0ICYmIGlkeCArIDEgPT09IG5ld0xlbikge1xuICAgIGFycmF5W2lkeF0gPSB2YWw7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuICB2YXIgYWZ0ZXIgPSAwO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgaWYgKGlpID09PSBpZHgpIHtcbiAgICAgIG5ld0FycmF5W2lpXSA9IHZhbDtcbiAgICAgIGFmdGVyID0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3QXJyYXk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU91dChhcnJheSwgaWR4LCBjYW5FZGl0KSB7XG4gIHZhciBuZXdMZW4gPSBhcnJheS5sZW5ndGggLSAxO1xuICBpZiAoY2FuRWRpdCAmJiBpZHggPT09IG5ld0xlbikge1xuICAgIGFycmF5LnBvcCgpO1xuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TGVuKTtcbiAgdmFyIGFmdGVyID0gMDtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IG5ld0xlbjsgaWkrKykge1xuICAgIGlmIChpaSA9PT0gaWR4KSB7XG4gICAgICBhZnRlciA9IDE7XG4gICAgfVxuICAgIG5ld0FycmF5W2lpXSA9IGFycmF5W2lpICsgYWZ0ZXJdO1xuICB9XG4gIHJldHVybiBuZXdBcnJheTtcbn1cblxudmFyIE1BWF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xudmFyIE1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFID0gU0laRSAvIDI7XG52YXIgTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUgPSBTSVpFIC8gNDtcblxudmFyIElTX0xJU1RfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfTElTVF9fQEAnO1xuXG5mdW5jdGlvbiBpc0xpc3QobWF5YmVMaXN0KSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlTGlzdCAmJiBtYXliZUxpc3RbSVNfTElTVF9TWU1CT0xdKTtcbn1cblxudmFyIExpc3QgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkQ29sbGVjdGlvbiQkMSkge1xuICBmdW5jdGlvbiBMaXN0KHZhbHVlKSB7XG4gICAgdmFyIGVtcHR5ID0gZW1wdHlMaXN0KCk7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG4gICAgaWYgKGlzTGlzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdmFyIGl0ZXIgPSBJbmRleGVkQ29sbGVjdGlvbiQkMSh2YWx1ZSk7XG4gICAgdmFyIHNpemUgPSBpdGVyLnNpemU7XG4gICAgaWYgKHNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9XG4gICAgYXNzZXJ0Tm90SW5maW5pdGUoc2l6ZSk7XG4gICAgaWYgKHNpemUgPiAwICYmIHNpemUgPCBTSVpFKSB7XG4gICAgICByZXR1cm4gbWFrZUxpc3QoMCwgc2l6ZSwgU0hJRlQsIG51bGwsIG5ldyBWTm9kZShpdGVyLnRvQXJyYXkoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZW1wdHkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBsaXN0LnNldChpLCB2KTsgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEluZGV4ZWRDb2xsZWN0aW9uJCQxICkgTGlzdC5fX3Byb3RvX18gPSBJbmRleGVkQ29sbGVjdGlvbiQkMTtcbiAgTGlzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkQ29sbGVjdGlvbiQkMSAmJiBJbmRleGVkQ29sbGVjdGlvbiQkMS5wcm90b3R5cGUgKTtcbiAgTGlzdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaXN0O1xuXG4gIExpc3Qub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTGlzdCBbJywgJ10nKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICBpbmRleCArPSB0aGlzLl9vcmlnaW47XG4gICAgICB2YXIgbm9kZSA9IGxpc3ROb2RlRm9yKHRoaXMsIGluZGV4KTtcbiAgICAgIHJldHVybiBub2RlICYmIG5vZGUuYXJyYXlbaW5kZXggJiBNQVNLXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgTGlzdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChpbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlTGlzdCh0aGlzLCBpbmRleCwgdmFsdWUpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaW5kZXgpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KVxuICAgICAgPyB0aGlzXG4gICAgICA6IGluZGV4ID09PSAwXG4gICAgICAgID8gdGhpcy5zaGlmdCgpXG4gICAgICAgIDogaW5kZXggPT09IHRoaXMuc2l6ZSAtIDFcbiAgICAgICAgICA/IHRoaXMucG9wKClcbiAgICAgICAgICA6IHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQgKGluZGV4LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX29yaWdpbiA9IHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgIHRoaXMuX2xldmVsID0gU0hJRlQ7XG4gICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZW1wdHlMaXN0KCk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKC8qLi4udmFsdWVzKi8pIHtcbiAgICB2YXIgdmFsdWVzID0gYXJndW1lbnRzO1xuICAgIHZhciBvbGRTaXplID0gdGhpcy5zaXplO1xuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgIHNldExpc3RCb3VuZHMobGlzdCwgMCwgb2xkU2l6ZSArIHZhbHVlcy5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IHZhbHVlcy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgbGlzdC5zZXQob2xkU2l6ZSArIGlpLCB2YWx1ZXNbaWldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiBwb3AgKCkge1xuICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDAsIC0xKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCAoLyouLi52YWx1ZXMqLykge1xuICAgIHZhciB2YWx1ZXMgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAtdmFsdWVzLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBsaXN0LnNldChpaSwgdmFsdWVzW2lpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCAoKSB7XG4gICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMSk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gIExpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAoLyouLi5jb2xsZWN0aW9ucyovKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIHNlcXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFyZ3VtZW50ID0gYXJndW1lbnRzJDFbaV07XG4gICAgICB2YXIgc2VxID0gSW5kZXhlZENvbGxlY3Rpb24kJDEoXG4gICAgICAgIHR5cGVvZiBhcmd1bWVudCAhPT0gJ3N0cmluZycgJiYgaGFzSXRlcmF0b3IoYXJndW1lbnQpXG4gICAgICAgICAgPyBhcmd1bWVudFxuICAgICAgICAgIDogW2FyZ3VtZW50XVxuICAgICAgKTtcbiAgICAgIGlmIChzZXEuc2l6ZSAhPT0gMCkge1xuICAgICAgICBzZXFzLnB1c2goc2VxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlcXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCAmJiAhdGhpcy5fX293bmVySUQgJiYgc2Vxcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKHNlcXNbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICBzZXFzLmZvckVhY2goZnVuY3Rpb24gKHNlcSkgeyByZXR1cm4gc2VxLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBsaXN0LnB1c2godmFsdWUpOyB9KTsgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uIHNldFNpemUgKHNpemUpIHtcbiAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAwLCBzaXplKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzJDEuc2l6ZTsgaSsrKSB7XG4gICAgICAgIGxpc3Quc2V0KGksIG1hcHBlci5jYWxsKGNvbnRleHQsIGxpc3QuZ2V0KGkpLCBpLCBsaXN0KSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICBMaXN0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyhcbiAgICAgIHRoaXMsXG4gICAgICByZXNvbHZlQmVnaW4oYmVnaW4sIHNpemUpLFxuICAgICAgcmVzb2x2ZUVuZChlbmQsIHNpemUpXG4gICAgKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBpbmRleCA9IHJldmVyc2UgPyB0aGlzLnNpemUgOiAwO1xuICAgIHZhciB2YWx1ZXMgPSBpdGVyYXRlTGlzdCh0aGlzLCByZXZlcnNlKTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHZhbHVlcygpO1xuICAgICAgcmV0dXJuIHZhbHVlID09PSBET05FXG4gICAgICAgID8gaXRlcmF0b3JEb25lKClcbiAgICAgICAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIHJldmVyc2UgPyAtLWluZGV4IDogaW5kZXgrKywgdmFsdWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgaW5kZXggPSByZXZlcnNlID8gdGhpcy5zaXplIDogMDtcbiAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG4gICAgdmFyIHZhbHVlO1xuICAgIHdoaWxlICgodmFsdWUgPSB2YWx1ZXMoKSkgIT09IERPTkUpIHtcbiAgICAgIGlmIChmbih2YWx1ZSwgcmV2ZXJzZSA/IC0taW5kZXggOiBpbmRleCsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghb3duZXJJRCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlMaXN0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlTGlzdChcbiAgICAgIHRoaXMuX29yaWdpbixcbiAgICAgIHRoaXMuX2NhcGFjaXR5LFxuICAgICAgdGhpcy5fbGV2ZWwsXG4gICAgICB0aGlzLl9yb290LFxuICAgICAgdGhpcy5fdGFpbCxcbiAgICAgIG93bmVySUQsXG4gICAgICB0aGlzLl9faGFzaFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIExpc3Q7XG59KEluZGV4ZWRDb2xsZWN0aW9uKSk7XG5cbkxpc3QuaXNMaXN0ID0gaXNMaXN0O1xuXG52YXIgTGlzdFByb3RvdHlwZSA9IExpc3QucHJvdG90eXBlO1xuTGlzdFByb3RvdHlwZVtJU19MSVNUX1NZTUJPTF0gPSB0cnVlO1xuTGlzdFByb3RvdHlwZVtERUxFVEVdID0gTGlzdFByb3RvdHlwZS5yZW1vdmU7XG5MaXN0UHJvdG90eXBlLm1lcmdlID0gTGlzdFByb3RvdHlwZS5jb25jYXQ7XG5MaXN0UHJvdG90eXBlLnNldEluID0gc2V0SW4kMTtcbkxpc3RQcm90b3R5cGUuZGVsZXRlSW4gPSBMaXN0UHJvdG90eXBlLnJlbW92ZUluID0gZGVsZXRlSW47XG5MaXN0UHJvdG90eXBlLnVwZGF0ZSA9IHVwZGF0ZSQxO1xuTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IHVwZGF0ZUluJDE7XG5MaXN0UHJvdG90eXBlLm1lcmdlSW4gPSBtZXJnZUluO1xuTGlzdFByb3RvdHlwZS5tZXJnZURlZXBJbiA9IG1lcmdlRGVlcEluO1xuTGlzdFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gd2l0aE11dGF0aW9ucztcbkxpc3RQcm90b3R5cGUud2FzQWx0ZXJlZCA9IHdhc0FsdGVyZWQ7XG5MaXN0UHJvdG90eXBlLmFzSW1tdXRhYmxlID0gYXNJbW11dGFibGU7XG5MaXN0UHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gTGlzdFByb3RvdHlwZS5hc011dGFibGUgPSBhc011dGFibGU7XG5MaXN0UHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBhcnIpIHtcbiAgcmV0dXJuIHJlc3VsdC5wdXNoKGFycik7XG59O1xuTGlzdFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBvYmouYXNJbW11dGFibGUoKTtcbn07XG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlKGFycmF5LCBvd25lcklEKSB7XG4gIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbn07XG5cbi8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cblZOb2RlLnByb3RvdHlwZS5yZW1vdmVCZWZvcmUgPSBmdW5jdGlvbiByZW1vdmVCZWZvcmUgKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIG9yaWdpbkluZGV4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICBpZiAob3JpZ2luSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKFtdLCBvd25lcklEKTtcbiAgfVxuICB2YXIgcmVtb3ZpbmdGaXJzdCA9IG9yaWdpbkluZGV4ID09PSAwO1xuICB2YXIgbmV3Q2hpbGQ7XG4gIGlmIChsZXZlbCA+IDApIHtcbiAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W29yaWdpbkluZGV4XTtcbiAgICBuZXdDaGlsZCA9XG4gICAgICBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmluZ0ZpcnN0ICYmICFuZXdDaGlsZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG4gIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvcmlnaW5JbmRleDsgaWkrKykge1xuICAgICAgZWRpdGFibGUuYXJyYXlbaWldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBpZiAobmV3Q2hpbGQpIHtcbiAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcbiAgfVxuICByZXR1cm4gZWRpdGFibGU7XG59O1xuXG5WTm9kZS5wcm90b3R5cGUucmVtb3ZlQWZ0ZXIgPSBmdW5jdGlvbiByZW1vdmVBZnRlciAob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gIGlmIChpbmRleCA9PT0gKGxldmVsID8gMSA8PCBsZXZlbCA6IDApIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIHNpemVJbmRleCA9ICgoaW5kZXggLSAxKSA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIG5ld0NoaWxkO1xuICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgIG5ld0NoaWxkID1cbiAgICAgIG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHNpemVJbmRleCA9PT0gdGhpcy5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICBlZGl0YWJsZS5hcnJheS5zcGxpY2Uoc2l6ZUluZGV4ICsgMSk7XG4gIGlmIChuZXdDaGlsZCkge1xuICAgIGVkaXRhYmxlLmFycmF5W3NpemVJbmRleF0gPSBuZXdDaGlsZDtcbiAgfVxuICByZXR1cm4gZWRpdGFibGU7XG59O1xuXG52YXIgRE9ORSA9IHt9O1xuXG5mdW5jdGlvbiBpdGVyYXRlTGlzdChsaXN0LCByZXZlcnNlKSB7XG4gIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICB2YXIgcmlnaHQgPSBsaXN0Ll9jYXBhY2l0eTtcbiAgdmFyIHRhaWxQb3MgPSBnZXRUYWlsT2Zmc2V0KHJpZ2h0KTtcbiAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gIHJldHVybiBpdGVyYXRlTm9kZU9yTGVhZihsaXN0Ll9yb290LCBsaXN0Ll9sZXZlbCwgMCk7XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZU5vZGVPckxlYWYobm9kZSwgbGV2ZWwsIG9mZnNldCkge1xuICAgIHJldHVybiBsZXZlbCA9PT0gMFxuICAgICAgPyBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpXG4gICAgICA6IGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFycmF5ID0gb2Zmc2V0ID09PSB0YWlsUG9zID8gdGFpbCAmJiB0YWlsLmFycmF5IDogbm9kZSAmJiBub2RlLmFycmF5O1xuICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgIHZhciB0byA9IHJpZ2h0IC0gb2Zmc2V0O1xuICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgIHRvID0gU0laRTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgIH1cbiAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheVtpZHhdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG4gICAgdmFyIHZhbHVlcztcbiAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IChsZWZ0IC0gb2Zmc2V0KSA+PiBsZXZlbDtcbiAgICB2YXIgdG8gPSAoKHJpZ2h0IC0gb2Zmc2V0KSA+PiBsZXZlbCkgKyAxO1xuICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgIHRvID0gU0laRTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IERPTkUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWR4ID0gcmV2ZXJzZSA/IC0tdG8gOiBmcm9tKys7XG4gICAgICAgIHZhbHVlcyA9IGl0ZXJhdGVOb2RlT3JMZWFmKFxuICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sXG4gICAgICAgICAgbGV2ZWwgLSBTSElGVCxcbiAgICAgICAgICBvZmZzZXQgKyAoaWR4IDw8IGxldmVsKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxpc3Qob3JpZ2luLCBjYXBhY2l0eSwgbGV2ZWwsIHJvb3QsIHRhaWwsIG93bmVySUQsIGhhc2gpIHtcbiAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICBsaXN0LnNpemUgPSBjYXBhY2l0eSAtIG9yaWdpbjtcbiAgbGlzdC5fb3JpZ2luID0gb3JpZ2luO1xuICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICBsaXN0Ll9sZXZlbCA9IGxldmVsO1xuICBsaXN0Ll9yb290ID0gcm9vdDtcbiAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gIGxpc3QuX19vd25lcklEID0gb3duZXJJRDtcbiAgbGlzdC5fX2hhc2ggPSBoYXNoO1xuICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICByZXR1cm4gbGlzdDtcbn1cblxudmFyIEVNUFRZX0xJU1Q7XG5mdW5jdGlvbiBlbXB0eUxpc3QoKSB7XG4gIHJldHVybiBFTVBUWV9MSVNUIHx8IChFTVBUWV9MSVNUID0gbWFrZUxpc3QoMCwgMCwgU0hJRlQpKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdChsaXN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaW5kZXggPSB3cmFwSW5kZXgobGlzdCwgaW5kZXgpO1xuXG4gIGlmIChpbmRleCAhPT0gaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGxpc3Qud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgaW5kZXggPCAwXG4gICAgICAgID8gc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKVxuICAgICAgICA6IHNldExpc3RCb3VuZHMobGlzdCwgMCwgaW5kZXggKyAxKS5zZXQoaW5kZXgsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGluZGV4ICs9IGxpc3QuX29yaWdpbjtcblxuICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gIHZhciBuZXdSb290ID0gbGlzdC5fcm9vdDtcbiAgdmFyIGRpZEFsdGVyID0gTWFrZVJlZigpO1xuICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICBuZXdUYWlsID0gdXBkYXRlVk5vZGUobmV3VGFpbCwgbGlzdC5fX293bmVySUQsIDAsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICB9IGVsc2Uge1xuICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShcbiAgICAgIG5ld1Jvb3QsXG4gICAgICBsaXN0Ll9fb3duZXJJRCxcbiAgICAgIGxpc3QuX2xldmVsLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRpZEFsdGVyXG4gICAgKTtcbiAgfVxuXG4gIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICByZXR1cm4gbWFrZUxpc3QobGlzdC5fb3JpZ2luLCBsaXN0Ll9jYXBhY2l0eSwgbGlzdC5fbGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICB2YXIgaWR4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICB2YXIgbm9kZUhhcyA9IG5vZGUgJiYgaWR4IDwgbm9kZS5hcnJheS5sZW5ndGg7XG4gIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgbmV3Tm9kZTtcblxuICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgdmFyIGxvd2VyTm9kZSA9IG5vZGUgJiYgbm9kZS5hcnJheVtpZHhdO1xuICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShcbiAgICAgIGxvd2VyTm9kZSxcbiAgICAgIG93bmVySUQsXG4gICAgICBsZXZlbCAtIFNISUZULFxuICAgICAgaW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRpZEFsdGVyXG4gICAgKTtcbiAgICBpZiAobmV3TG93ZXJOb2RlID09PSBsb3dlck5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBuZXdOb2RlID0gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKTtcbiAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgcmV0dXJuIG5ld05vZGU7XG4gIH1cblxuICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBpZiAoZGlkQWx0ZXIpIHtcbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICB9XG5cbiAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGlkeCA9PT0gbmV3Tm9kZS5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgbmV3Tm9kZS5hcnJheS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuZnVuY3Rpb24gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKSB7XG4gIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xufVxuXG5mdW5jdGlvbiBsaXN0Tm9kZUZvcihsaXN0LCByYXdJbmRleCkge1xuICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICByZXR1cm4gbGlzdC5fdGFpbDtcbiAgfVxuICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgIHZhciBub2RlID0gbGlzdC5fcm9vdDtcbiAgICB2YXIgbGV2ZWwgPSBsaXN0Ll9sZXZlbDtcbiAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgIG5vZGUgPSBub2RlLmFycmF5WyhyYXdJbmRleCA+Pj4gbGV2ZWwpICYgTUFTS107XG4gICAgICBsZXZlbCAtPSBTSElGVDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0TGlzdEJvdW5kcyhsaXN0LCBiZWdpbiwgZW5kKSB7XG4gIC8vIFNhbml0aXplIGJlZ2luICYgZW5kIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgIGJlZ2luIHw9IDA7XG4gIH1cbiAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kIHw9IDA7XG4gIH1cbiAgdmFyIG93bmVyID0gbGlzdC5fX293bmVySUQgfHwgbmV3IE93bmVySUQoKTtcbiAgdmFyIG9sZE9yaWdpbiA9IGxpc3QuX29yaWdpbjtcbiAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gIHZhciBuZXdPcmlnaW4gPSBvbGRPcmlnaW4gKyBiZWdpbjtcbiAgdmFyIG5ld0NhcGFjaXR5ID1cbiAgICBlbmQgPT09IHVuZGVmaW5lZFxuICAgICAgPyBvbGRDYXBhY2l0eVxuICAgICAgOiBlbmQgPCAwXG4gICAgICAgID8gb2xkQ2FwYWNpdHkgKyBlbmRcbiAgICAgICAgOiBvbGRPcmlnaW4gKyBlbmQ7XG4gIGlmIChuZXdPcmlnaW4gPT09IG9sZE9yaWdpbiAmJiBuZXdDYXBhY2l0eSA9PT0gb2xkQ2FwYWNpdHkpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIC8vIElmIGl0J3MgZ29pbmcgdG8gZW5kIGFmdGVyIGl0IHN0YXJ0cywgaXQncyBlbXB0eS5cbiAgaWYgKG5ld09yaWdpbiA+PSBuZXdDYXBhY2l0eSkge1xuICAgIHJldHVybiBsaXN0LmNsZWFyKCk7XG4gIH1cblxuICB2YXIgbmV3TGV2ZWwgPSBsaXN0Ll9sZXZlbDtcbiAgdmFyIG5ld1Jvb3QgPSBsaXN0Ll9yb290O1xuXG4gIC8vIE5ldyBvcmlnaW4gbWlnaHQgbmVlZCBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuICB2YXIgb2Zmc2V0U2hpZnQgPSAwO1xuICB3aGlsZSAobmV3T3JpZ2luICsgb2Zmc2V0U2hpZnQgPCAwKSB7XG4gICAgbmV3Um9vdCA9IG5ldyBWTm9kZShcbiAgICAgIG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbdW5kZWZpbmVkLCBuZXdSb290XSA6IFtdLFxuICAgICAgb3duZXJcbiAgICApO1xuICAgIG5ld0xldmVsICs9IFNISUZUO1xuICAgIG9mZnNldFNoaWZ0ICs9IDEgPDwgbmV3TGV2ZWw7XG4gIH1cbiAgaWYgKG9mZnNldFNoaWZ0KSB7XG4gICAgbmV3T3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgIG9sZE9yaWdpbiArPSBvZmZzZXRTaGlmdDtcbiAgICBuZXdDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgICBvbGRDYXBhY2l0eSArPSBvZmZzZXRTaGlmdDtcbiAgfVxuXG4gIHZhciBvbGRUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChvbGRDYXBhY2l0eSk7XG4gIHZhciBuZXdUYWlsT2Zmc2V0ID0gZ2V0VGFpbE9mZnNldChuZXdDYXBhY2l0eSk7XG5cbiAgLy8gTmV3IHNpemUgbWlnaHQgbmVlZCBjcmVhdGluZyBhIGhpZ2hlciByb290LlxuICB3aGlsZSAobmV3VGFpbE9mZnNldCA+PSAxIDw8IChuZXdMZXZlbCArIFNISUZUKSkge1xuICAgIG5ld1Jvb3QgPSBuZXcgVk5vZGUoXG4gICAgICBuZXdSb290ICYmIG5ld1Jvb3QuYXJyYXkubGVuZ3RoID8gW25ld1Jvb3RdIDogW10sXG4gICAgICBvd25lclxuICAgICk7XG4gICAgbmV3TGV2ZWwgKz0gU0hJRlQ7XG4gIH1cblxuICAvLyBMb2NhdGUgb3IgY3JlYXRlIHRoZSBuZXcgdGFpbC5cbiAgdmFyIG9sZFRhaWwgPSBsaXN0Ll90YWlsO1xuICB2YXIgbmV3VGFpbCA9XG4gICAgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXRcbiAgICAgID8gbGlzdE5vZGVGb3IobGlzdCwgbmV3Q2FwYWNpdHkgLSAxKVxuICAgICAgOiBuZXdUYWlsT2Zmc2V0ID4gb2xkVGFpbE9mZnNldFxuICAgICAgICA/IG5ldyBWTm9kZShbXSwgb3duZXIpXG4gICAgICAgIDogb2xkVGFpbDtcblxuICAvLyBNZXJnZSBUYWlsIGludG8gdHJlZS5cbiAgaWYgKFxuICAgIG9sZFRhaWwgJiZcbiAgICBuZXdUYWlsT2Zmc2V0ID4gb2xkVGFpbE9mZnNldCAmJlxuICAgIG5ld09yaWdpbiA8IG9sZENhcGFjaXR5ICYmXG4gICAgb2xkVGFpbC5hcnJheS5sZW5ndGhcbiAgKSB7XG4gICAgbmV3Um9vdCA9IGVkaXRhYmxlVk5vZGUobmV3Um9vdCwgb3duZXIpO1xuICAgIHZhciBub2RlID0gbmV3Um9vdDtcbiAgICBmb3IgKHZhciBsZXZlbCA9IG5ld0xldmVsOyBsZXZlbCA+IFNISUZUOyBsZXZlbCAtPSBTSElGVCkge1xuICAgICAgdmFyIGlkeCA9IChvbGRUYWlsT2Zmc2V0ID4+PiBsZXZlbCkgJiBNQVNLO1xuICAgICAgbm9kZSA9IG5vZGUuYXJyYXlbaWR4XSA9IGVkaXRhYmxlVk5vZGUobm9kZS5hcnJheVtpZHhdLCBvd25lcik7XG4gICAgfVxuICAgIG5vZGUuYXJyYXlbKG9sZFRhaWxPZmZzZXQgPj4+IFNISUZUKSAmIE1BU0tdID0gb2xkVGFpbDtcbiAgfVxuXG4gIC8vIElmIHRoZSBzaXplIGhhcyBiZWVuIHJlZHVjZWQsIHRoZXJlJ3MgYSBjaGFuY2UgdGhlIHRhaWwgbmVlZHMgdG8gYmUgdHJpbW1lZC5cbiAgaWYgKG5ld0NhcGFjaXR5IDwgb2xkQ2FwYWNpdHkpIHtcbiAgICBuZXdUYWlsID0gbmV3VGFpbCAmJiBuZXdUYWlsLnJlbW92ZUFmdGVyKG93bmVyLCAwLCBuZXdDYXBhY2l0eSk7XG4gIH1cblxuICAvLyBJZiB0aGUgbmV3IG9yaWdpbiBpcyB3aXRoaW4gdGhlIHRhaWwsIHRoZW4gd2UgZG8gbm90IG5lZWQgYSByb290LlxuICBpZiAobmV3T3JpZ2luID49IG5ld1RhaWxPZmZzZXQpIHtcbiAgICBuZXdPcmlnaW4gLT0gbmV3VGFpbE9mZnNldDtcbiAgICBuZXdDYXBhY2l0eSAtPSBuZXdUYWlsT2Zmc2V0O1xuICAgIG5ld0xldmVsID0gU0hJRlQ7XG4gICAgbmV3Um9vdCA9IG51bGw7XG4gICAgbmV3VGFpbCA9IG5ld1RhaWwgJiYgbmV3VGFpbC5yZW1vdmVCZWZvcmUob3duZXIsIDAsIG5ld09yaWdpbik7XG5cbiAgICAvLyBPdGhlcndpc2UsIGlmIHRoZSByb290IGhhcyBiZWVuIHRyaW1tZWQsIGdhcmJhZ2UgY29sbGVjdC5cbiAgfSBlbHNlIGlmIChuZXdPcmlnaW4gPiBvbGRPcmlnaW4gfHwgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICBvZmZzZXRTaGlmdCA9IDA7XG5cbiAgICAvLyBJZGVudGlmeSB0aGUgbmV3IHRvcCByb290IG5vZGUgb2YgdGhlIHN1YnRyZWUgb2YgdGhlIG9sZCByb290LlxuICAgIHdoaWxlIChuZXdSb290KSB7XG4gICAgICB2YXIgYmVnaW5JbmRleCA9IChuZXdPcmlnaW4gPj4+IG5ld0xldmVsKSAmIE1BU0s7XG4gICAgICBpZiAoKGJlZ2luSW5kZXggIT09IG5ld1RhaWxPZmZzZXQgPj4+IG5ld0xldmVsKSAmIE1BU0spIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoYmVnaW5JbmRleCkge1xuICAgICAgICBvZmZzZXRTaGlmdCArPSAoMSA8PCBuZXdMZXZlbCkgKiBiZWdpbkluZGV4O1xuICAgICAgfVxuICAgICAgbmV3TGV2ZWwgLT0gU0hJRlQ7XG4gICAgICBuZXdSb290ID0gbmV3Um9vdC5hcnJheVtiZWdpbkluZGV4XTtcbiAgICB9XG5cbiAgICAvLyBUcmltIHRoZSBuZXcgc2lkZXMgb2YgdGhlIG5ldyByb290LlxuICAgIGlmIChuZXdSb290ICYmIG5ld09yaWdpbiA+IG9sZE9yaWdpbikge1xuICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQmVmb3JlKG93bmVyLCBuZXdMZXZlbCwgbmV3T3JpZ2luIC0gb2Zmc2V0U2hpZnQpO1xuICAgIH1cbiAgICBpZiAobmV3Um9vdCAmJiBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldCkge1xuICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QucmVtb3ZlQWZ0ZXIoXG4gICAgICAgIG93bmVyLFxuICAgICAgICBuZXdMZXZlbCxcbiAgICAgICAgbmV3VGFpbE9mZnNldCAtIG9mZnNldFNoaWZ0XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICAgIG5ld09yaWdpbiAtPSBvZmZzZXRTaGlmdDtcbiAgICAgIG5ld0NhcGFjaXR5IC09IG9mZnNldFNoaWZ0O1xuICAgIH1cbiAgfVxuXG4gIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgIGxpc3Quc2l6ZSA9IG5ld0NhcGFjaXR5IC0gbmV3T3JpZ2luO1xuICAgIGxpc3QuX29yaWdpbiA9IG5ld09yaWdpbjtcbiAgICBsaXN0Ll9jYXBhY2l0eSA9IG5ld0NhcGFjaXR5O1xuICAgIGxpc3QuX2xldmVsID0gbmV3TGV2ZWw7XG4gICAgbGlzdC5fcm9vdCA9IG5ld1Jvb3Q7XG4gICAgbGlzdC5fdGFpbCA9IG5ld1RhaWw7XG4gICAgbGlzdC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgbGlzdC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgIHJldHVybiBsaXN0O1xuICB9XG4gIHJldHVybiBtYWtlTGlzdChuZXdPcmlnaW4sIG5ld0NhcGFjaXR5LCBuZXdMZXZlbCwgbmV3Um9vdCwgbmV3VGFpbCk7XG59XG5cbmZ1bmN0aW9uIGdldFRhaWxPZmZzZXQoc2l6ZSkge1xuICByZXR1cm4gc2l6ZSA8IFNJWkUgPyAwIDogKChzaXplIC0gMSkgPj4+IFNISUZUKSA8PCBTSElGVDtcbn1cblxudmFyIE9yZGVyZWRNYXAgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChNYXAkJDEpIHtcbiAgZnVuY3Rpb24gT3JkZXJlZE1hcCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/IGVtcHR5T3JkZXJlZE1hcCgpXG4gICAgICA6IGlzT3JkZXJlZE1hcCh2YWx1ZSlcbiAgICAgICAgPyB2YWx1ZVxuICAgICAgICA6IGVtcHR5T3JkZXJlZE1hcCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgdmFyIGl0ZXIgPSBLZXllZENvbGxlY3Rpb24odmFsdWUpO1xuICAgICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gbWFwLnNldChrLCB2KTsgfSk7XG4gICAgICAgICAgfSk7XG4gIH1cblxuICBpZiAoIE1hcCQkMSApIE9yZGVyZWRNYXAuX19wcm90b19fID0gTWFwJCQxO1xuICBPcmRlcmVkTWFwLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hcCQkMSAmJiBNYXAkJDEucHJvdG90eXBlICk7XG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT3JkZXJlZE1hcDtcblxuICBPcmRlcmVkTWFwLm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICB9O1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ09yZGVyZWRNYXAgeycsICd9Jyk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGssIG5vdFNldFZhbHVlKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbWFwLmdldChrKTtcbiAgICByZXR1cm4gaW5kZXggIT09IHVuZGVmaW5lZCA/IHRoaXMuX2xpc3QuZ2V0KGluZGV4KVsxXSA6IG5vdFNldFZhbHVlO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX21hcC5jbGVhcigpO1xuICAgICAgdGhpcy5fbGlzdC5jbGVhcigpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBlbXB0eU9yZGVyZWRNYXAoKTtcbiAgfTtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKGssIHYpIHtcbiAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCB2KTtcbiAgfTtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGspIHtcbiAgICByZXR1cm4gdXBkYXRlT3JkZXJlZE1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgfTtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24gd2FzQWx0ZXJlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCkgfHwgdGhpcy5fbGlzdC53YXNBbHRlcmVkKCk7XG4gIH07XG5cbiAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xpc3QuX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMSk7IH0sXG4gICAgICByZXZlcnNlXG4gICAgKTtcbiAgfTtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHJldHVybiB0aGlzLl9saXN0LmZyb21FbnRyeVNlcSgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgT3JkZXJlZE1hcC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uIF9fZW5zdXJlT3duZXIgKG93bmVySUQpIHtcbiAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgdmFyIG5ld0xpc3QgPSB0aGlzLl9saXN0Ll9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgaWYgKCFvd25lcklEKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eU9yZGVyZWRNYXAoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgIHRoaXMuX2xpc3QgPSBuZXdMaXN0O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgfTtcblxuICByZXR1cm4gT3JkZXJlZE1hcDtcbn0oTWFwKSk7XG5cbk9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG5PcmRlcmVkTWFwLnByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gIHZhciBvbWFwID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkTWFwLnByb3RvdHlwZSk7XG4gIG9tYXAuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgb21hcC5fbWFwID0gbWFwO1xuICBvbWFwLl9saXN0ID0gbGlzdDtcbiAgb21hcC5fX293bmVySUQgPSBvd25lcklEO1xuICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gIHJldHVybiBvbWFwO1xufVxuXG52YXIgRU1QVFlfT1JERVJFRF9NQVA7XG5mdW5jdGlvbiBlbXB0eU9yZGVyZWRNYXAoKSB7XG4gIHJldHVybiAoXG4gICAgRU1QVFlfT1JERVJFRF9NQVAgfHxcbiAgICAoRU1QVFlfT1JERVJFRF9NQVAgPSBtYWtlT3JkZXJlZE1hcChlbXB0eU1hcCgpLCBlbXB0eUxpc3QoKSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICB2YXIgbWFwID0gb21hcC5fbWFwO1xuICB2YXIgbGlzdCA9IG9tYXAuX2xpc3Q7XG4gIHZhciBpID0gbWFwLmdldChrKTtcbiAgdmFyIGhhcyA9IGkgIT09IHVuZGVmaW5lZDtcbiAgdmFyIG5ld01hcDtcbiAgdmFyIG5ld0xpc3Q7XG4gIGlmICh2ID09PSBOT1RfU0VUKSB7XG4gICAgLy8gcmVtb3ZlZFxuICAgIGlmICghaGFzKSB7XG4gICAgICByZXR1cm4gb21hcDtcbiAgICB9XG4gICAgaWYgKGxpc3Quc2l6ZSA+PSBTSVpFICYmIGxpc3Quc2l6ZSA+PSBtYXAuc2l6ZSAqIDIpIHtcbiAgICAgIG5ld0xpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAoZW50cnksIGlkeCkgeyByZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHg7IH0pO1xuICAgICAgbmV3TWFwID0gbmV3TGlzdFxuICAgICAgICAudG9LZXllZFNlcSgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeVswXTsgfSlcbiAgICAgICAgLmZsaXAoKVxuICAgICAgICAudG9NYXAoKTtcbiAgICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgIG5ld0xpc3QgPSBpID09PSBsaXN0LnNpemUgLSAxID8gbGlzdC5wb3AoKSA6IGxpc3Quc2V0KGksIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGhhcykge1xuICAgIGlmICh2ID09PSBsaXN0LmdldChpKVsxXSkge1xuICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxuICAgIG5ld01hcCA9IG1hcDtcbiAgICBuZXdMaXN0ID0gbGlzdC5zZXQoaSwgW2ssIHZdKTtcbiAgfSBlbHNlIHtcbiAgICBuZXdNYXAgPSBtYXAuc2V0KGssIGxpc3Quc2l6ZSk7XG4gICAgbmV3TGlzdCA9IGxpc3Quc2V0KGxpc3Quc2l6ZSwgW2ssIHZdKTtcbiAgfVxuICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICBvbWFwLnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICBvbWFwLl9tYXAgPSBuZXdNYXA7XG4gICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgb21hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIG9tYXA7XG4gIH1cbiAgcmV0dXJuIG1ha2VPcmRlcmVkTWFwKG5ld01hcCwgbmV3TGlzdCk7XG59XG5cbnZhciBJU19TVEFDS19TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9TVEFDS19fQEAnO1xuXG5mdW5jdGlvbiBpc1N0YWNrKG1heWJlU3RhY2spIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVTdGFjayAmJiBtYXliZVN0YWNrW0lTX1NUQUNLX1NZTUJPTF0pO1xufVxuXG52YXIgU3RhY2sgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkQ29sbGVjdGlvbiQkMSkge1xuICBmdW5jdGlvbiBTdGFjayh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/IGVtcHR5U3RhY2soKVxuICAgICAgOiBpc1N0YWNrKHZhbHVlKVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogZW1wdHlTdGFjaygpLnB1c2hBbGwodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBJbmRleGVkQ29sbGVjdGlvbiQkMSApIFN0YWNrLl9fcHJvdG9fXyA9IEluZGV4ZWRDb2xsZWN0aW9uJCQxO1xuICBTdGFjay5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkQ29sbGVjdGlvbiQkMSAmJiBJbmRleGVkQ29sbGVjdGlvbiQkMS5wcm90b3R5cGUgKTtcbiAgU3RhY2sucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3RhY2s7XG5cbiAgU3RhY2sub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1N0YWNrIFsnLCAnXScpO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgU3RhY2sucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICB3aGlsZSAoaGVhZCAmJiBpbmRleC0tKSB7XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gaGVhZCA/IGhlYWQudmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICBTdGFjay5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uIHBlZWsgKCkge1xuICAgIHJldHVybiB0aGlzLl9oZWFkICYmIHRoaXMuX2hlYWQudmFsdWU7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICBTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKC8qLi4udmFsdWVzKi8pIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplICsgYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgZm9yICh2YXIgaWkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaWkgPj0gMDsgaWktLSkge1xuICAgICAgaGVhZCA9IHtcbiAgICAgICAgdmFsdWU6IGFyZ3VtZW50cyQxW2lpXSxcbiAgICAgICAgbmV4dDogaGVhZCxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgfTtcblxuICBTdGFjay5wcm90b3R5cGUucHVzaEFsbCA9IGZ1bmN0aW9uIHB1c2hBbGwgKGl0ZXIpIHtcbiAgICBpdGVyID0gSW5kZXhlZENvbGxlY3Rpb24kJDEoaXRlcik7XG4gICAgaWYgKGl0ZXIuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLnNpemUgPT09IDAgJiYgaXNTdGFjayhpdGVyKSkge1xuICAgICAgcmV0dXJuIGl0ZXI7XG4gICAgfVxuICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemU7XG4gICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgIGl0ZXIuX19pdGVyYXRlKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgbmV3U2l6ZSsrO1xuICAgICAgaGVhZCA9IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBuZXh0OiBoZWFkLFxuICAgICAgfTtcbiAgICB9LCAvKiByZXZlcnNlICovIHRydWUpO1xuICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgdGhpcy5zaXplID0gbmV3U2l6ZTtcbiAgICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VTdGFjayhuZXdTaXplLCBoZWFkKTtcbiAgfTtcblxuICBTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gcG9wICgpIHtcbiAgICByZXR1cm4gdGhpcy5zbGljZSgxKTtcbiAgfTtcblxuICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICh0aGlzLl9fb3duZXJJRCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX2hlYWQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZW1wdHlTdGFjaygpO1xuICB9O1xuXG4gIFN0YWNrLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgIHZhciByZXNvbHZlZEVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuICAgIGlmIChyZXNvbHZlZEVuZCAhPT0gdGhpcy5zaXplKSB7XG4gICAgICAvLyBzdXBlci5zbGljZShiZWdpbiwgZW5kKTtcbiAgICAgIHJldHVybiBJbmRleGVkQ29sbGVjdGlvbiQkMS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB9XG4gICAgdmFyIG5ld1NpemUgPSB0aGlzLnNpemUgLSByZXNvbHZlZEJlZ2luO1xuICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICB3aGlsZSAocmVzb2x2ZWRCZWdpbi0tKSB7XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgU3RhY2sucHJvdG90eXBlLl9fZW5zdXJlT3duZXIgPSBmdW5jdGlvbiBfX2Vuc3VyZU93bmVyIChvd25lcklEKSB7XG4gICAgaWYgKG93bmVySUQgPT09IHRoaXMuX19vd25lcklEKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKCFvd25lcklEKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbXB0eVN0YWNrKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlU3RhY2sodGhpcy5zaXplLCB0aGlzLl9oZWFkLCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBJdGVyYXRpb25cblxuICBTdGFjay5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEodGhpcy50b0FycmF5KCkpLl9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIGZuKHYsIGssIHRoaXMkMSk7IH0sXG4gICAgICAgIHJldmVyc2VcbiAgICAgICk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGlmIChmbihub2RlLnZhbHVlLCBpdGVyYXRpb25zKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIFN0YWNrLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gbmV3IEFycmF5U2VxKHRoaXMudG9BcnJheSgpKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgdmFyIG5vZGUgPSB0aGlzLl9oZWFkO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbm9kZS52YWx1ZTtcbiAgICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YWNrO1xufShJbmRleGVkQ29sbGVjdGlvbikpO1xuXG5TdGFjay5pc1N0YWNrID0gaXNTdGFjaztcblxudmFyIFN0YWNrUHJvdG90eXBlID0gU3RhY2sucHJvdG90eXBlO1xuU3RhY2tQcm90b3R5cGVbSVNfU1RBQ0tfU1lNQk9MXSA9IHRydWU7XG5TdGFja1Byb3RvdHlwZS5zaGlmdCA9IFN0YWNrUHJvdG90eXBlLnBvcDtcblN0YWNrUHJvdG90eXBlLnVuc2hpZnQgPSBTdGFja1Byb3RvdHlwZS5wdXNoO1xuU3RhY2tQcm90b3R5cGUudW5zaGlmdEFsbCA9IFN0YWNrUHJvdG90eXBlLnB1c2hBbGw7XG5TdGFja1Byb3RvdHlwZS53aXRoTXV0YXRpb25zID0gd2l0aE11dGF0aW9ucztcblN0YWNrUHJvdG90eXBlLndhc0FsdGVyZWQgPSB3YXNBbHRlcmVkO1xuU3RhY2tQcm90b3R5cGUuYXNJbW11dGFibGUgPSBhc0ltbXV0YWJsZTtcblN0YWNrUHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gU3RhY2tQcm90b3R5cGUuYXNNdXRhYmxlID0gYXNNdXRhYmxlO1xuU3RhY2tQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbihyZXN1bHQsIGFycikge1xuICByZXR1cm4gcmVzdWx0LnVuc2hpZnQoYXJyKTtcbn07XG5TdGFja1Byb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBvYmouYXNJbW11dGFibGUoKTtcbn07XG5cbmZ1bmN0aW9uIG1ha2VTdGFjayhzaXplLCBoZWFkLCBvd25lcklELCBoYXNoKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKFN0YWNrUHJvdG90eXBlKTtcbiAgbWFwLnNpemUgPSBzaXplO1xuICBtYXAuX2hlYWQgPSBoZWFkO1xuICBtYXAuX19vd25lcklEID0gb3duZXJJRDtcbiAgbWFwLl9faGFzaCA9IGhhc2g7XG4gIG1hcC5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgcmV0dXJuIG1hcDtcbn1cblxudmFyIEVNUFRZX1NUQUNLO1xuZnVuY3Rpb24gZW1wdHlTdGFjaygpIHtcbiAgcmV0dXJuIEVNUFRZX1NUQUNLIHx8IChFTVBUWV9TVEFDSyA9IG1ha2VTdGFjaygwKSk7XG59XG5cbnZhciBJU19TRVRfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfU0VUX19AQCc7XG5cbmZ1bmN0aW9uIGlzU2V0KG1heWJlU2V0KSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlU2V0ICYmIG1heWJlU2V0W0lTX1NFVF9TWU1CT0xdKTtcbn1cblxuZnVuY3Rpb24gaXNPcmRlcmVkU2V0KG1heWJlT3JkZXJlZFNldCkge1xuICByZXR1cm4gaXNTZXQobWF5YmVPcmRlcmVkU2V0KSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkU2V0KTtcbn1cblxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChcbiAgICAhaXNDb2xsZWN0aW9uKGIpIHx8XG4gICAgKGEuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGIuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGEuc2l6ZSAhPT0gYi5zaXplKSB8fFxuICAgIChhLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBiLl9faGFzaCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBhLl9faGFzaCAhPT0gYi5fX2hhc2gpIHx8XG4gICAgaXNLZXllZChhKSAhPT0gaXNLZXllZChiKSB8fFxuICAgIGlzSW5kZXhlZChhKSAhPT0gaXNJbmRleGVkKGIpIHx8XG4gICAgaXNPcmRlcmVkKGEpICE9PSBpc09yZGVyZWQoYilcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGEuc2l6ZSA9PT0gMCAmJiBiLnNpemUgPT09IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBub3RBc3NvY2lhdGl2ZSA9ICFpc0Fzc29jaWF0aXZlKGEpO1xuXG4gIGlmIChpc09yZGVyZWQoYSkpIHtcbiAgICB2YXIgZW50cmllcyA9IGEuZW50cmllcygpO1xuICAgIHJldHVybiAoXG4gICAgICBiLmV2ZXJ5KGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXMubmV4dCgpLnZhbHVlO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgaXMoZW50cnlbMV0sIHYpICYmIChub3RBc3NvY2lhdGl2ZSB8fCBpcyhlbnRyeVswXSwgaykpO1xuICAgICAgfSkgJiYgZW50cmllcy5uZXh0KCkuZG9uZVxuICAgICk7XG4gIH1cblxuICB2YXIgZmxpcHBlZCA9IGZhbHNlO1xuXG4gIGlmIChhLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiLnNpemUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBhLmNhY2hlUmVzdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGEuY2FjaGVSZXN1bHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZmxpcHBlZCA9IHRydWU7XG4gICAgICB2YXIgXyA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSBfO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhbGxFcXVhbCA9IHRydWU7XG4gIHZhciBiU2l6ZSA9IGIuX19pdGVyYXRlKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgaWYgKFxuICAgICAgbm90QXNzb2NpYXRpdmVcbiAgICAgICAgPyAhYS5oYXModilcbiAgICAgICAgOiBmbGlwcGVkXG4gICAgICAgICAgPyAhaXModiwgYS5nZXQoaywgTk9UX1NFVCkpXG4gICAgICAgICAgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpXG4gICAgKSB7XG4gICAgICBhbGxFcXVhbCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFsbEVxdWFsICYmIGEuc2l6ZSA9PT0gYlNpemU7XG59XG5cbi8qKlxuICogQ29udHJpYnV0ZXMgYWRkaXRpb25hbCBtZXRob2RzIHRvIGEgY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gbWl4aW4oY3RvciwgbWV0aG9kcykge1xuICB2YXIga2V5Q29waWVyID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGN0b3IucHJvdG90eXBlW2tleV0gPSBtZXRob2RzW2tleV07XG4gIH07XG4gIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2goa2V5Q29waWVyKTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJlxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWV0aG9kcykuZm9yRWFjaChrZXlDb3BpZXIpO1xuICByZXR1cm4gY3Rvcjtcbn1cblxuZnVuY3Rpb24gdG9KUyh2YWx1ZSkge1xuICBpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKCFpc0NvbGxlY3Rpb24odmFsdWUpKSB7XG4gICAgaWYgKCFpc0RhdGFTdHJ1Y3R1cmUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhbHVlID0gU2VxKHZhbHVlKTtcbiAgfVxuICBpZiAoaXNLZXllZCh2YWx1ZSkpIHtcbiAgICB2YXIgcmVzdWx0JDEgPSB7fTtcbiAgICB2YWx1ZS5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgIHJlc3VsdCQxW2tdID0gdG9KUyh2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0JDE7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YWx1ZS5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYpIHtcbiAgICByZXN1bHQucHVzaCh0b0pTKHYpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBTZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTZXRDb2xsZWN0aW9uJCQxKSB7XG4gIGZ1bmN0aW9uIFNldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/IGVtcHR5U2V0KClcbiAgICAgIDogaXNTZXQodmFsdWUpICYmICFpc09yZGVyZWQodmFsdWUpXG4gICAgICAgID8gdmFsdWVcbiAgICAgICAgOiBlbXB0eVNldCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHNldCkge1xuICAgICAgICAgICAgdmFyIGl0ZXIgPSBTZXRDb2xsZWN0aW9uJCQxKHZhbHVlKTtcbiAgICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHNldC5hZGQodik7IH0pO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTZXRDb2xsZWN0aW9uJCQxICkgU2V0Ll9fcHJvdG9fXyA9IFNldENvbGxlY3Rpb24kJDE7XG4gIFNldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTZXRDb2xsZWN0aW9uJCQxICYmIFNldENvbGxlY3Rpb24kJDEucHJvdG90eXBlICk7XG4gIFNldC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXQ7XG5cbiAgU2V0Lm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICB9O1xuXG4gIFNldC5mcm9tS2V5cyA9IGZ1bmN0aW9uIGZyb21LZXlzICh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzKEtleWVkQ29sbGVjdGlvbih2YWx1ZSkua2V5U2VxKCkpO1xuICB9O1xuXG4gIFNldC5pbnRlcnNlY3QgPSBmdW5jdGlvbiBpbnRlcnNlY3QgKHNldHMpIHtcbiAgICBzZXRzID0gQ29sbGVjdGlvbihzZXRzKS50b0FycmF5KCk7XG4gICAgcmV0dXJuIHNldHMubGVuZ3RoXG4gICAgICA/IFNldFByb3RvdHlwZS5pbnRlcnNlY3QuYXBwbHkoU2V0KHNldHMucG9wKCkpLCBzZXRzKVxuICAgICAgOiBlbXB0eVNldCgpO1xuICB9O1xuXG4gIFNldC51bmlvbiA9IGZ1bmN0aW9uIHVuaW9uIChzZXRzKSB7XG4gICAgc2V0cyA9IENvbGxlY3Rpb24oc2V0cykudG9BcnJheSgpO1xuICAgIHJldHVybiBzZXRzLmxlbmd0aFxuICAgICAgPyBTZXRQcm90b3R5cGUudW5pb24uYXBwbHkoU2V0KHNldHMucG9wKCkpLCBzZXRzKVxuICAgICAgOiBlbXB0eVNldCgpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2V0IHsnLCAnfScpO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgQWNjZXNzXG5cbiAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuc2V0KHZhbHVlLCB2YWx1ZSkpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlICh2YWx1ZSkge1xuICAgIHJldHVybiB1cGRhdGVTZXQodGhpcywgdGhpcy5fbWFwLnJlbW92ZSh2YWx1ZSkpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAuY2xlYXIoKSk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBDb21wb3NpdGlvblxuXG4gIFNldC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZW1vdmVzID0gW107XG4gICAgdmFyIGFkZHMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgbWFwcGVkID0gbWFwcGVyLmNhbGwoY29udGV4dCwgdmFsdWUsIHZhbHVlLCB0aGlzJDEpO1xuICAgICAgaWYgKG1hcHBlZCAhPT0gdmFsdWUpIHtcbiAgICAgICAgcmVtb3Zlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgYWRkcy5wdXNoKG1hcHBlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoc2V0KSB7XG4gICAgICByZW1vdmVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBzZXQucmVtb3ZlKHZhbHVlKTsgfSk7XG4gICAgICBhZGRzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBzZXQuYWRkKHZhbHVlKTsgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS51bmlvbiA9IGZ1bmN0aW9uIHVuaW9uICgpIHtcbiAgICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGl0ZXJzID0gaXRlcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnNpemUgIT09IDA7IH0pO1xuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaXplID09PSAwICYmICF0aGlzLl9fb3duZXJJRCAmJiBpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoc2V0KSB7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgaXRlcnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIFNldENvbGxlY3Rpb24kJDEoaXRlcnNbaWldKS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gc2V0LmFkZCh2YWx1ZSk7IH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUuaW50ZXJzZWN0ID0gZnVuY3Rpb24gaW50ZXJzZWN0ICgpIHtcbiAgICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbiAoaXRlcikgeyByZXR1cm4gU2V0Q29sbGVjdGlvbiQkMShpdGVyKTsgfSk7XG4gICAgdmFyIHRvUmVtb3ZlID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFpdGVycy5ldmVyeShmdW5jdGlvbiAoaXRlcikgeyByZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSk7IH0pKSB7XG4gICAgICAgIHRvUmVtb3ZlLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHNldCkge1xuICAgICAgdG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLnN1YnRyYWN0ID0gZnVuY3Rpb24gc3VidHJhY3QgKCkge1xuICAgIHZhciBpdGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBpdGVyc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGl0ZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGl0ZXJzID0gaXRlcnMubWFwKGZ1bmN0aW9uIChpdGVyKSB7IHJldHVybiBTZXRDb2xsZWN0aW9uJCQxKGl0ZXIpOyB9KTtcbiAgICB2YXIgdG9SZW1vdmUgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoaXRlcnMuc29tZShmdW5jdGlvbiAoaXRlcikgeyByZXR1cm4gaXRlci5pbmNsdWRlcyh2YWx1ZSk7IH0pKSB7XG4gICAgICAgIHRvUmVtb3ZlLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHNldCkge1xuICAgICAgdG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgc2V0LnJlbW92ZSh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbiBzb3J0IChjb21wYXJhdG9yKSB7XG4gICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvcikpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUuc29ydEJ5ID0gZnVuY3Rpb24gc29ydEJ5IChtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICAvLyBMYXRlIGJpbmRpbmdcbiAgICByZXR1cm4gT3JkZXJlZFNldChzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpKTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbiB3YXNBbHRlcmVkICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLndhc0FsdGVyZWQoKTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9tYXAuX19pdGVyYXRlKGZ1bmN0aW9uIChrKSB7IHJldHVybiBmbihrLCBrLCB0aGlzJDEpOyB9LCByZXZlcnNlKTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uIF9fZW5zdXJlT3duZXIgKG93bmVySUQpIHtcbiAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgbmV3TWFwID0gdGhpcy5fbWFwLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gICAgaWYgKCFvd25lcklEKSB7XG4gICAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZW1wdHkoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fX21ha2UobmV3TWFwLCBvd25lcklEKTtcbiAgfTtcblxuICByZXR1cm4gU2V0O1xufShTZXRDb2xsZWN0aW9uKSk7XG5cblNldC5pc1NldCA9IGlzU2V0O1xuXG52YXIgU2V0UHJvdG90eXBlID0gU2V0LnByb3RvdHlwZTtcblNldFByb3RvdHlwZVtJU19TRVRfU1lNQk9MXSA9IHRydWU7XG5TZXRQcm90b3R5cGVbREVMRVRFXSA9IFNldFByb3RvdHlwZS5yZW1vdmU7XG5TZXRQcm90b3R5cGUubWVyZ2UgPSBTZXRQcm90b3R5cGUuY29uY2F0ID0gU2V0UHJvdG90eXBlLnVuaW9uO1xuU2V0UHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSB3aXRoTXV0YXRpb25zO1xuU2V0UHJvdG90eXBlLmFzSW1tdXRhYmxlID0gYXNJbW11dGFibGU7XG5TZXRQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9pbml0J10gPSBTZXRQcm90b3R5cGUuYXNNdXRhYmxlID0gYXNNdXRhYmxlO1xuU2V0UHJvdG90eXBlWydAQHRyYW5zZHVjZXIvc3RlcCddID0gZnVuY3Rpb24ocmVzdWx0LCBhcnIpIHtcbiAgcmV0dXJuIHJlc3VsdC5hZGQoYXJyKTtcbn07XG5TZXRQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gb2JqLmFzSW1tdXRhYmxlKCk7XG59O1xuXG5TZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5U2V0O1xuU2V0UHJvdG90eXBlLl9fbWFrZSA9IG1ha2VTZXQ7XG5cbmZ1bmN0aW9uIHVwZGF0ZVNldChzZXQsIG5ld01hcCkge1xuICBpZiAoc2V0Ll9fb3duZXJJRCkge1xuICAgIHNldC5zaXplID0gbmV3TWFwLnNpemU7XG4gICAgc2V0Ll9tYXAgPSBuZXdNYXA7XG4gICAgcmV0dXJuIHNldDtcbiAgfVxuICByZXR1cm4gbmV3TWFwID09PSBzZXQuX21hcFxuICAgID8gc2V0XG4gICAgOiBuZXdNYXAuc2l6ZSA9PT0gMFxuICAgICAgPyBzZXQuX19lbXB0eSgpXG4gICAgICA6IHNldC5fX21ha2UobmV3TWFwKTtcbn1cblxuZnVuY3Rpb24gbWFrZVNldChtYXAsIG93bmVySUQpIHtcbiAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gIHNldC5fbWFwID0gbWFwO1xuICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgcmV0dXJuIHNldDtcbn1cblxudmFyIEVNUFRZX1NFVDtcbmZ1bmN0aW9uIGVtcHR5U2V0KCkge1xuICByZXR1cm4gRU1QVFlfU0VUIHx8IChFTVBUWV9TRVQgPSBtYWtlU2V0KGVtcHR5TWFwKCkpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGF6eSBzZXEgb2YgbnVtcyBmcm9tIHN0YXJ0IChpbmNsdXNpdmUpIHRvIGVuZFxuICogKGV4Y2x1c2l2ZSksIGJ5IHN0ZXAsIHdoZXJlIHN0YXJ0IGRlZmF1bHRzIHRvIDAsIHN0ZXAgdG8gMSwgYW5kIGVuZCB0b1xuICogaW5maW5pdHkuIFdoZW4gc3RhcnQgaXMgZXF1YWwgdG8gZW5kLCByZXR1cm5zIGVtcHR5IGxpc3QuXG4gKi9cbnZhciBSYW5nZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEluZGV4ZWRTZXEkJDEpIHtcbiAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSYW5nZSkpIHtcbiAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCk7XG4gICAgfVxuICAgIGludmFyaWFudChzdGVwICE9PSAwLCAnQ2Fubm90IHN0ZXAgYSBSYW5nZSBieSAwJyk7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZW5kID0gSW5maW5pdHk7XG4gICAgfVxuICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gLXN0ZXA7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5fZW5kID0gZW5kO1xuICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgIHRoaXMuc2l6ZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gc3RlcCAtIDEpICsgMSk7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgIHJldHVybiBFTVBUWV9SQU5HRTtcbiAgICAgIH1cbiAgICAgIEVNUFRZX1JBTkdFID0gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoIEluZGV4ZWRTZXEkJDEgKSBSYW5nZS5fX3Byb3RvX18gPSBJbmRleGVkU2VxJCQxO1xuICBSYW5nZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkU2VxJCQxICYmIEluZGV4ZWRTZXEkJDEucHJvdG90eXBlICk7XG4gIFJhbmdlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJhbmdlO1xuXG4gIFJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1JhbmdlIFtdJztcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgICdSYW5nZSBbICcgK1xuICAgICAgdGhpcy5fc3RhcnQgK1xuICAgICAgJy4uLicgK1xuICAgICAgdGhpcy5fZW5kICtcbiAgICAgICh0aGlzLl9zdGVwICE9PSAxID8gJyBieSAnICsgdGhpcy5fc3RlcCA6ICcnKSArXG4gICAgICAnIF0nXG4gICAgKTtcbiAgfTtcblxuICBSYW5nZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpXG4gICAgICA/IHRoaXMuX3N0YXJ0ICsgd3JhcEluZGV4KHRoaXMsIGluZGV4KSAqIHRoaXMuX3N0ZXBcbiAgICAgIDogbm90U2V0VmFsdWU7XG4gIH07XG5cbiAgUmFuZ2UucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHNlYXJjaFZhbHVlKSB7XG4gICAgdmFyIHBvc3NpYmxlSW5kZXggPSAoc2VhcmNoVmFsdWUgLSB0aGlzLl9zdGFydCkgLyB0aGlzLl9zdGVwO1xuICAgIHJldHVybiAoXG4gICAgICBwb3NzaWJsZUluZGV4ID49IDAgJiZcbiAgICAgIHBvc3NpYmxlSW5kZXggPCB0aGlzLnNpemUgJiZcbiAgICAgIHBvc3NpYmxlSW5kZXggPT09IE1hdGguZmxvb3IocG9zc2libGVJbmRleClcbiAgICApO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG4gICAgaWYgKHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgdGhpcy5zaXplKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCB0aGlzLnNpemUpO1xuICAgIGVuZCA9IHJlc29sdmVFbmQoZW5kLCB0aGlzLnNpemUpO1xuICAgIGlmIChlbmQgPD0gYmVnaW4pIHtcbiAgICAgIHJldHVybiBuZXcgUmFuZ2UoMCwgMCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmFuZ2UoXG4gICAgICB0aGlzLmdldChiZWdpbiwgdGhpcy5fZW5kKSxcbiAgICAgIHRoaXMuZ2V0KGVuZCwgdGhpcy5fZW5kKSxcbiAgICAgIHRoaXMuX3N0ZXBcbiAgICApO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAoc2VhcmNoVmFsdWUpIHtcbiAgICB2YXIgb2Zmc2V0VmFsdWUgPSBzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0O1xuICAgIGlmIChvZmZzZXRWYWx1ZSAlIHRoaXMuX3N0ZXAgPT09IDApIHtcbiAgICAgIHZhciBpbmRleCA9IG9mZnNldFZhbHVlIC8gdGhpcy5fc3RlcDtcbiAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mIChzZWFyY2hWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmluZGV4T2Yoc2VhcmNoVmFsdWUpO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgdmFyIHN0ZXAgPSB0aGlzLl9zdGVwO1xuICAgIHZhciB2YWx1ZSA9IHJldmVyc2UgPyB0aGlzLl9zdGFydCArIChzaXplIC0gMSkgKiBzdGVwIDogdGhpcy5fc3RhcnQ7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpICE9PSBzaXplKSB7XG4gICAgICBpZiAoZm4odmFsdWUsIHJldmVyc2UgPyBzaXplIC0gKytpIDogaSsrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfTtcblxuICBSYW5nZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgdmFyIHZhbHVlID0gcmV2ZXJzZSA/IHRoaXMuX3N0YXJ0ICsgKHNpemUgLSAxKSAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaSA9PT0gc2l6ZSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgICB9XG4gICAgICB2YXIgdiA9IHZhbHVlO1xuICAgICAgdmFsdWUgKz0gcmV2ZXJzZSA/IC1zdGVwIDogc3RlcDtcbiAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIHJldmVyc2UgPyBzaXplIC0gKytpIDogaSsrLCB2KTtcbiAgICB9KTtcbiAgfTtcblxuICBSYW5nZS5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChvdGhlcikge1xuICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJhbmdlXG4gICAgICA/IHRoaXMuX3N0YXJ0ID09PSBvdGhlci5fc3RhcnQgJiZcbiAgICAgICAgICB0aGlzLl9lbmQgPT09IG90aGVyLl9lbmQgJiZcbiAgICAgICAgICB0aGlzLl9zdGVwID09PSBvdGhlci5fc3RlcFxuICAgICAgOiBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICB9O1xuXG4gIHJldHVybiBSYW5nZTtcbn0oSW5kZXhlZFNlcSkpO1xuXG52YXIgRU1QVFlfUkFOR0U7XG5cbmZ1bmN0aW9uIGdldEluKGNvbGxlY3Rpb24sIHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKSB7XG4gIHZhciBrZXlQYXRoID0gY29lcmNlS2V5UGF0aChzZWFyY2hLZXlQYXRoKTtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZSAoaSAhPT0ga2V5UGF0aC5sZW5ndGgpIHtcbiAgICBjb2xsZWN0aW9uID0gZ2V0KGNvbGxlY3Rpb24sIGtleVBhdGhbaSsrXSwgTk9UX1NFVCk7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT09IE5PVF9TRVQpIHtcbiAgICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIGdldEluJDEoc2VhcmNoS2V5UGF0aCwgbm90U2V0VmFsdWUpIHtcbiAgcmV0dXJuIGdldEluKHRoaXMsIHNlYXJjaEtleVBhdGgsIG5vdFNldFZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaGFzSW4oY29sbGVjdGlvbiwga2V5UGF0aCkge1xuICByZXR1cm4gZ2V0SW4oY29sbGVjdGlvbiwga2V5UGF0aCwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG59XG5cbmZ1bmN0aW9uIGhhc0luJDEoc2VhcmNoS2V5UGF0aCkge1xuICByZXR1cm4gaGFzSW4odGhpcywgc2VhcmNoS2V5UGF0aCk7XG59XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICB2YXIgb2JqZWN0ID0ge307XG4gIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgb2JqZWN0W2tdID0gdjtcbiAgfSk7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbi8vIE5vdGU6IGFsbCBvZiB0aGVzZSBtZXRob2RzIGFyZSBkZXByZWNhdGVkLlxuQ29sbGVjdGlvbi5pc0l0ZXJhYmxlID0gaXNDb2xsZWN0aW9uO1xuQ29sbGVjdGlvbi5pc0tleWVkID0gaXNLZXllZDtcbkNvbGxlY3Rpb24uaXNJbmRleGVkID0gaXNJbmRleGVkO1xuQ29sbGVjdGlvbi5pc0Fzc29jaWF0aXZlID0gaXNBc3NvY2lhdGl2ZTtcbkNvbGxlY3Rpb24uaXNPcmRlcmVkID0gaXNPcmRlcmVkO1xuXG5Db2xsZWN0aW9uLkl0ZXJhdG9yID0gSXRlcmF0b3I7XG5cbm1peGluKENvbGxlY3Rpb24sIHtcbiAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICB0b0FycmF5OiBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHRoaXMuc2l6ZSB8fCAwKTtcbiAgICB2YXIgdXNlVHVwbGVzID0gaXNLZXllZCh0aGlzKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgIC8vIEtleWVkIGNvbGxlY3Rpb25zIHByb2R1Y2UgYW4gYXJyYXkgb2YgdHVwbGVzLlxuICAgICAgYXJyYXlbaSsrXSA9IHVzZVR1cGxlcyA/IFtrLCB2XSA6IHY7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9LFxuXG4gIHRvSW5kZXhlZFNlcTogZnVuY3Rpb24gdG9JbmRleGVkU2VxKCkge1xuICAgIHJldHVybiBuZXcgVG9JbmRleGVkU2VxdWVuY2UodGhpcyk7XG4gIH0sXG5cbiAgdG9KUzogZnVuY3Rpb24gdG9KUyQxKCkge1xuICAgIHJldHVybiB0b0pTKHRoaXMpO1xuICB9LFxuXG4gIHRvS2V5ZWRTZXE6IGZ1bmN0aW9uIHRvS2V5ZWRTZXEoKSB7XG4gICAgcmV0dXJuIG5ldyBUb0tleWVkU2VxdWVuY2UodGhpcywgdHJ1ZSk7XG4gIH0sXG5cbiAgdG9NYXA6IGZ1bmN0aW9uIHRvTWFwKCkge1xuICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICByZXR1cm4gTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgfSxcblxuICB0b09iamVjdDogdG9PYmplY3QsXG5cbiAgdG9PcmRlcmVkTWFwOiBmdW5jdGlvbiB0b09yZGVyZWRNYXAoKSB7XG4gICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgIHJldHVybiBPcmRlcmVkTWFwKHRoaXMudG9LZXllZFNlcSgpKTtcbiAgfSxcblxuICB0b09yZGVyZWRTZXQ6IGZ1bmN0aW9uIHRvT3JkZXJlZFNldCgpIHtcbiAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgcmV0dXJuIE9yZGVyZWRTZXQoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuICB9LFxuXG4gIHRvU2V0OiBmdW5jdGlvbiB0b1NldCgpIHtcbiAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgcmV0dXJuIFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gIH0sXG5cbiAgdG9TZXRTZXE6IGZ1bmN0aW9uIHRvU2V0U2VxKCkge1xuICAgIHJldHVybiBuZXcgVG9TZXRTZXF1ZW5jZSh0aGlzKTtcbiAgfSxcblxuICB0b1NlcTogZnVuY3Rpb24gdG9TZXEoKSB7XG4gICAgcmV0dXJuIGlzSW5kZXhlZCh0aGlzKVxuICAgICAgPyB0aGlzLnRvSW5kZXhlZFNlcSgpXG4gICAgICA6IGlzS2V5ZWQodGhpcylcbiAgICAgICAgPyB0aGlzLnRvS2V5ZWRTZXEoKVxuICAgICAgICA6IHRoaXMudG9TZXRTZXEoKTtcbiAgfSxcblxuICB0b1N0YWNrOiBmdW5jdGlvbiB0b1N0YWNrKCkge1xuICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICByZXR1cm4gU3RhY2soaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuICB9LFxuXG4gIHRvTGlzdDogZnVuY3Rpb24gdG9MaXN0KCkge1xuICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICByZXR1cm4gTGlzdChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gIH0sXG5cbiAgLy8gIyMjIENvbW1vbiBKYXZhU2NyaXB0IG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblxuICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbQ29sbGVjdGlvbl0nO1xuICB9LFxuXG4gIF9fdG9TdHJpbmc6IGZ1bmN0aW9uIF9fdG9TdHJpbmcoaGVhZCwgdGFpbCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiBoZWFkICsgdGFpbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGhlYWQgK1xuICAgICAgJyAnICtcbiAgICAgIHRoaXMudG9TZXEoKVxuICAgICAgICAubWFwKHRoaXMuX190b1N0cmluZ01hcHBlcilcbiAgICAgICAgLmpvaW4oJywgJykgK1xuICAgICAgJyAnICtcbiAgICAgIHRhaWxcbiAgICApO1xuICB9LFxuXG4gIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIHZhbHVlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGNvbmNhdEZhY3RvcnkodGhpcywgdmFsdWVzKSk7XG4gIH0sXG5cbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuc29tZShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSk7IH0pO1xuICB9LFxuXG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xuICB9LFxuXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IHRydWU7XG4gICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICAgIGlmICghcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgcmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgZmlsdGVyRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQsIHRydWUpKTtcbiAgfSxcblxuICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzFdIDogbm90U2V0VmFsdWU7XG4gIH0sXG5cbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChzaWRlRWZmZWN0LCBjb250ZXh0KSB7XG4gICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdGUoY29udGV4dCA/IHNpZGVFZmZlY3QuYmluZChjb250ZXh0KSA6IHNpZGVFZmZlY3QpO1xuICB9LFxuXG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICBzZXBhcmF0b3IgPSBzZXBhcmF0b3IgIT09IHVuZGVmaW5lZCA/ICcnICsgc2VwYXJhdG9yIDogJywnO1xuICAgIHZhciBqb2luZWQgPSAnJztcbiAgICB2YXIgaXNGaXJzdCA9IHRydWU7XG4gICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYpIHtcbiAgICAgIGlzRmlyc3QgPyAoaXNGaXJzdCA9IGZhbHNlKSA6IChqb2luZWQgKz0gc2VwYXJhdG9yKTtcbiAgICAgIGpvaW5lZCArPSB2ICE9PSBudWxsICYmIHYgIT09IHVuZGVmaW5lZCA/IHYudG9TdHJpbmcoKSA6ICcnO1xuICAgIH0pO1xuICAgIHJldHVybiBqb2luZWQ7XG4gIH0sXG5cbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfS0VZUyk7XG4gIH0sXG5cbiAgbWFwOiBmdW5jdGlvbiBtYXAobWFwcGVyLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIG1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gIH0sXG5cbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UkMShyZWR1Y2VyLCBpbml0aWFsUmVkdWN0aW9uLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlZHVjZShcbiAgICAgIHRoaXMsXG4gICAgICByZWR1Y2VyLFxuICAgICAgaW5pdGlhbFJlZHVjdGlvbixcbiAgICAgIGNvbnRleHQsXG4gICAgICBhcmd1bWVudHMubGVuZ3RoIDwgMixcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgfSxcblxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgIHJldHVybiByZWR1Y2UoXG4gICAgICB0aGlzLFxuICAgICAgcmVkdWNlcixcbiAgICAgIGluaXRpYWxSZWR1Y3Rpb24sXG4gICAgICBjb250ZXh0LFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA8IDIsXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfSxcblxuICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCByZXZlcnNlRmFjdG9yeSh0aGlzLCB0cnVlKSk7XG4gIH0sXG5cbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIHRydWUpKTtcbiAgfSxcblxuICBzb21lOiBmdW5jdGlvbiBzb21lKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiAhdGhpcy5ldmVyeShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gIH0sXG5cbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgfSxcblxuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTKTtcbiAgfSxcblxuICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICBidXRMYXN0OiBmdW5jdGlvbiBidXRMYXN0KCkge1xuICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIC0xKTtcbiAgfSxcblxuICBpc0VtcHR5OiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCA/IHRoaXMuc2l6ZSA9PT0gMCA6ICF0aGlzLnNvbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSk7XG4gIH0sXG5cbiAgY291bnQ6IGZ1bmN0aW9uIGNvdW50KHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBlbnN1cmVTaXplKFxuICAgICAgcHJlZGljYXRlID8gdGhpcy50b1NlcSgpLmZpbHRlcihwcmVkaWNhdGUsIGNvbnRleHQpIDogdGhpc1xuICAgICk7XG4gIH0sXG5cbiAgY291bnRCeTogZnVuY3Rpb24gY291bnRCeShncm91cGVyLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGNvdW50QnlGYWN0b3J5KHRoaXMsIGdyb3VwZXIsIGNvbnRleHQpO1xuICB9LFxuXG4gIGVxdWFsczogZnVuY3Rpb24gZXF1YWxzKG90aGVyKSB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gIH0sXG5cbiAgZW50cnlTZXE6IGZ1bmN0aW9uIGVudHJ5U2VxKCkge1xuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcztcbiAgICBpZiAoY29sbGVjdGlvbi5fY2FjaGUpIHtcbiAgICAgIC8vIFdlIGNhY2hlIGFzIGFuIGVudHJpZXMgYXJyYXksIHNvIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgY2FjaGUhXG4gICAgICByZXR1cm4gbmV3IEFycmF5U2VxKGNvbGxlY3Rpb24uX2NhY2hlKTtcbiAgICB9XG4gICAgdmFyIGVudHJpZXNTZXF1ZW5jZSA9IGNvbGxlY3Rpb25cbiAgICAgIC50b1NlcSgpXG4gICAgICAubWFwKGVudHJ5TWFwcGVyKVxuICAgICAgLnRvSW5kZXhlZFNlcSgpO1xuICAgIGVudHJpZXNTZXF1ZW5jZS5mcm9tRW50cnlTZXEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2xsZWN0aW9uLnRvU2VxKCk7IH07XG4gICAgcmV0dXJuIGVudHJpZXNTZXF1ZW5jZTtcbiAgfSxcblxuICBmaWx0ZXJOb3Q6IGZ1bmN0aW9uIGZpbHRlck5vdChwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICB9LFxuXG4gIGZpbmRFbnRyeTogZnVuY3Rpb24gZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcbiAgICB2YXIgZm91bmQgPSBub3RTZXRWYWx1ZTtcbiAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaywgYykge1xuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSB7XG4gICAgICAgIGZvdW5kID0gW2ssIHZdO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZvdW5kO1xuICB9LFxuXG4gIGZpbmRLZXk6IGZ1bmN0aW9uIGZpbmRLZXkocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnlbMF07XG4gIH0sXG5cbiAgZmluZExhc3Q6IGZ1bmN0aW9uIGZpbmRMYXN0KHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50b0tleWVkU2VxKClcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICB9LFxuXG4gIGZpbmRMYXN0RW50cnk6IGZ1bmN0aW9uIGZpbmRMYXN0RW50cnkocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKTtcbiAgfSxcblxuICBmaW5kTGFzdEtleTogZnVuY3Rpb24gZmluZExhc3RLZXkocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpXG4gICAgICAucmV2ZXJzZSgpXG4gICAgICAuZmluZEtleShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICB9LFxuXG4gIGZpcnN0OiBmdW5jdGlvbiBmaXJzdChub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmZpbmQocmV0dXJuVHJ1ZSwgbnVsbCwgbm90U2V0VmFsdWUpO1xuICB9LFxuXG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAobWFwcGVyLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXRNYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCkpO1xuICB9LFxuXG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oZGVwdGgpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdHRlbkZhY3RvcnkodGhpcywgZGVwdGgsIHRydWUpKTtcbiAgfSxcblxuICBmcm9tRW50cnlTZXE6IGZ1bmN0aW9uIGZyb21FbnRyeVNlcSgpIHtcbiAgICByZXR1cm4gbmV3IEZyb21FbnRyaWVzU2VxdWVuY2UodGhpcyk7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiBnZXQoc2VhcmNoS2V5LCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmZpbmQoZnVuY3Rpb24gKF8sIGtleSkgeyByZXR1cm4gaXMoa2V5LCBzZWFyY2hLZXkpOyB9LCB1bmRlZmluZWQsIG5vdFNldFZhbHVlKTtcbiAgfSxcblxuICBnZXRJbjogZ2V0SW4kMSxcblxuICBncm91cEJ5OiBmdW5jdGlvbiBncm91cEJ5KGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZ3JvdXBCeUZhY3RvcnkodGhpcywgZ3JvdXBlciwgY29udGV4dCk7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbiBoYXMoc2VhcmNoS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KHNlYXJjaEtleSwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gIH0sXG5cbiAgaGFzSW46IGhhc0luJDEsXG5cbiAgaXNTdWJzZXQ6IGZ1bmN0aW9uIGlzU3Vic2V0KGl0ZXIpIHtcbiAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaW5jbHVkZXMgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogQ29sbGVjdGlvbihpdGVyKTtcbiAgICByZXR1cm4gdGhpcy5ldmVyeShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGl0ZXIuaW5jbHVkZXModmFsdWUpOyB9KTtcbiAgfSxcblxuICBpc1N1cGVyc2V0OiBmdW5jdGlvbiBpc1N1cGVyc2V0KGl0ZXIpIHtcbiAgICBpdGVyID0gdHlwZW9mIGl0ZXIuaXNTdWJzZXQgPT09ICdmdW5jdGlvbicgPyBpdGVyIDogQ29sbGVjdGlvbihpdGVyKTtcbiAgICByZXR1cm4gaXRlci5pc1N1YnNldCh0aGlzKTtcbiAgfSxcblxuICBrZXlPZjogZnVuY3Rpb24ga2V5T2Yoc2VhcmNoVmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5maW5kS2V5KGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKTsgfSk7XG4gIH0sXG5cbiAga2V5U2VxOiBmdW5jdGlvbiBrZXlTZXEoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TZXEoKVxuICAgICAgLm1hcChrZXlNYXBwZXIpXG4gICAgICAudG9JbmRleGVkU2VxKCk7XG4gIH0sXG5cbiAgbGFzdDogZnVuY3Rpb24gbGFzdChub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRvU2VxKClcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5maXJzdChub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgbGFzdEtleU9mOiBmdW5jdGlvbiBsYXN0S2V5T2Yoc2VhcmNoVmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy50b0tleWVkU2VxKClcbiAgICAgIC5yZXZlcnNlKClcbiAgICAgIC5rZXlPZihzZWFyY2hWYWx1ZSk7XG4gIH0sXG5cbiAgbWF4OiBmdW5jdGlvbiBtYXgoY29tcGFyYXRvcikge1xuICAgIHJldHVybiBtYXhGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpO1xuICB9LFxuXG4gIG1heEJ5OiBmdW5jdGlvbiBtYXhCeShtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yLCBtYXBwZXIpO1xuICB9LFxuXG4gIG1pbjogZnVuY3Rpb24gbWluKGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbWF4RmFjdG9yeShcbiAgICAgIHRoaXMsXG4gICAgICBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3JcbiAgICApO1xuICB9LFxuXG4gIG1pbkJ5OiBmdW5jdGlvbiBtaW5CeShtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbWF4RmFjdG9yeShcbiAgICAgIHRoaXMsXG4gICAgICBjb21wYXJhdG9yID8gbmVnKGNvbXBhcmF0b3IpIDogZGVmYXVsdE5lZ0NvbXBhcmF0b3IsXG4gICAgICBtYXBwZXJcbiAgICApO1xuICB9LFxuXG4gIHJlc3Q6IGZ1bmN0aW9uIHJlc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gIH0sXG5cbiAgc2tpcDogZnVuY3Rpb24gc2tpcChhbW91bnQpIHtcbiAgICByZXR1cm4gYW1vdW50ID09PSAwID8gdGhpcyA6IHRoaXMuc2xpY2UoTWF0aC5tYXgoMCwgYW1vdW50KSk7XG4gIH0sXG5cbiAgc2tpcExhc3Q6IGZ1bmN0aW9uIHNraXBMYXN0KGFtb3VudCkge1xuICAgIHJldHVybiBhbW91bnQgPT09IDAgPyB0aGlzIDogdGhpcy5zbGljZSgwLCAtTWF0aC5tYXgoMCwgYW1vdW50KSk7XG4gIH0sXG5cbiAgc2tpcFdoaWxlOiBmdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCB0cnVlKSk7XG4gIH0sXG5cbiAgc2tpcFVudGlsOiBmdW5jdGlvbiBza2lwVW50aWwocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuc2tpcFdoaWxlKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgfSxcblxuICBzb3J0Qnk6IGZ1bmN0aW9uIHNvcnRCeShtYXBwZXIsIGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gIH0sXG5cbiAgdGFrZTogZnVuY3Rpb24gdGFrZShhbW91bnQpIHtcbiAgICByZXR1cm4gdGhpcy5zbGljZSgwLCBNYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgfSxcblxuICB0YWtlTGFzdDogZnVuY3Rpb24gdGFrZUxhc3QoYW1vdW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpY2UoLU1hdGgubWF4KDAsIGFtb3VudCkpO1xuICB9LFxuXG4gIHRha2VXaGlsZTogZnVuY3Rpb24gdGFrZVdoaWxlKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCB0YWtlV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCkpO1xuICB9LFxuXG4gIHRha2VVbnRpbDogZnVuY3Rpb24gdGFrZVVudGlsKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLnRha2VXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gIH0sXG5cbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZm4pIHtcbiAgICByZXR1cm4gZm4odGhpcyk7XG4gIH0sXG5cbiAgdmFsdWVTZXE6IGZ1bmN0aW9uIHZhbHVlU2VxKCkge1xuICAgIHJldHVybiB0aGlzLnRvSW5kZXhlZFNlcSgpO1xuICB9LFxuXG4gIC8vICMjIyBIYXNoYWJsZSBPYmplY3RcblxuICBoYXNoQ29kZTogZnVuY3Rpb24gaGFzaENvZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19oYXNoIHx8ICh0aGlzLl9faGFzaCA9IGhhc2hDb2xsZWN0aW9uKHRoaXMpKTtcbiAgfSxcblxuICAvLyAjIyMgSW50ZXJuYWxcblxuICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGUoZm4sIHJldmVyc2UpXG5cbiAgLy8gYWJzdHJhY3QgX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKVxufSk7XG5cbnZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbi5wcm90b3R5cGU7XG5Db2xsZWN0aW9uUHJvdG90eXBlW0lTX0NPTExFQ1RJT05fU1lNQk9MXSA9IHRydWU7XG5Db2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBDb2xsZWN0aW9uUHJvdG90eXBlLnZhbHVlcztcbkNvbGxlY3Rpb25Qcm90b3R5cGUudG9KU09OID0gQ29sbGVjdGlvblByb3RvdHlwZS50b0FycmF5O1xuQ29sbGVjdGlvblByb3RvdHlwZS5fX3RvU3RyaW5nTWFwcGVyID0gcXVvdGVTdHJpbmc7XG5Db2xsZWN0aW9uUHJvdG90eXBlLmluc3BlY3QgPSBDb2xsZWN0aW9uUHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG59O1xuQ29sbGVjdGlvblByb3RvdHlwZS5jaGFpbiA9IENvbGxlY3Rpb25Qcm90b3R5cGUuZmxhdE1hcDtcbkNvbGxlY3Rpb25Qcm90b3R5cGUuY29udGFpbnMgPSBDb2xsZWN0aW9uUHJvdG90eXBlLmluY2x1ZGVzO1xuXG5taXhpbihLZXllZENvbGxlY3Rpb24sIHtcbiAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgZmxpcDogZnVuY3Rpb24gZmxpcCgpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgZmxpcEZhY3RvcnkodGhpcykpO1xuICB9LFxuXG4gIG1hcEVudHJpZXM6IGZ1bmN0aW9uIG1hcEVudHJpZXMobWFwcGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMudG9TZXEoKVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBtYXBwZXIuY2FsbChjb250ZXh0LCBbaywgdl0sIGl0ZXJhdGlvbnMrKywgdGhpcyQxKTsgfSlcbiAgICAgICAgLmZyb21FbnRyeVNlcSgpXG4gICAgKTtcbiAgfSxcblxuICBtYXBLZXlzOiBmdW5jdGlvbiBtYXBLZXlzKG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHJlaWZ5KFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMudG9TZXEoKVxuICAgICAgICAuZmxpcCgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGssIHYpIHsgcmV0dXJuIG1hcHBlci5jYWxsKGNvbnRleHQsIGssIHYsIHRoaXMkMSk7IH0pXG4gICAgICAgIC5mbGlwKClcbiAgICApO1xuICB9LFxufSk7XG5cbnZhciBLZXllZENvbGxlY3Rpb25Qcm90b3R5cGUgPSBLZXllZENvbGxlY3Rpb24ucHJvdG90eXBlO1xuS2V5ZWRDb2xsZWN0aW9uUHJvdG90eXBlW0lTX0tFWUVEX1NZTUJPTF0gPSB0cnVlO1xuS2V5ZWRDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBDb2xsZWN0aW9uUHJvdG90eXBlLmVudHJpZXM7XG5LZXllZENvbGxlY3Rpb25Qcm90b3R5cGUudG9KU09OID0gdG9PYmplY3Q7XG5LZXllZENvbGxlY3Rpb25Qcm90b3R5cGUuX190b1N0cmluZ01hcHBlciA9IGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBxdW90ZVN0cmluZyhrKSArICc6ICcgKyBxdW90ZVN0cmluZyh2KTsgfTtcblxubWl4aW4oSW5kZXhlZENvbGxlY3Rpb24sIHtcbiAgLy8gIyMjIENvbnZlcnNpb24gdG8gb3RoZXIgdHlwZXNcblxuICB0b0tleWVkU2VxOiBmdW5jdGlvbiB0b0tleWVkU2VxKCkge1xuICAgIHJldHVybiBuZXcgVG9LZXllZFNlcXVlbmNlKHRoaXMsIGZhbHNlKTtcbiAgfSxcblxuICAvLyAjIyMgRVM2IENvbGxlY3Rpb24gbWV0aG9kcyAoRVM2IEFycmF5IGFuZCBNYXApXG5cbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZpbHRlckZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICB9LFxuXG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGVudHJ5ID8gZW50cnlbMF0gOiAtMTtcbiAgfSxcblxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaFZhbHVlKSB7XG4gICAgdmFyIGtleSA9IHRoaXMua2V5T2Yoc2VhcmNoVmFsdWUpO1xuICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICB9LFxuXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hWYWx1ZSkge1xuICAgIHZhciBrZXkgPSB0aGlzLmxhc3RLZXlPZihzZWFyY2hWYWx1ZSk7XG4gICAgcmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID8gLTEgOiBrZXk7XG4gIH0sXG5cbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgZmFsc2UpKTtcbiAgfSxcblxuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBzbGljZUZhY3RvcnkodGhpcywgYmVnaW4sIGVuZCwgZmFsc2UpKTtcbiAgfSxcblxuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShpbmRleCwgcmVtb3ZlTnVtIC8qLCAuLi52YWx1ZXMqLykge1xuICAgIHZhciBudW1BcmdzID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZW1vdmVOdW0gPSBNYXRoLm1heChyZW1vdmVOdW0gfHwgMCwgMCk7XG4gICAgaWYgKG51bUFyZ3MgPT09IDAgfHwgKG51bUFyZ3MgPT09IDIgJiYgIXJlbW92ZU51bSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBJZiBpbmRleCBpcyBuZWdhdGl2ZSwgaXQgc2hvdWxkIHJlc29sdmUgcmVsYXRpdmUgdG8gdGhlIHNpemUgb2YgdGhlXG4gICAgLy8gY29sbGVjdGlvbi4gSG93ZXZlciBzaXplIG1heSBiZSBleHBlbnNpdmUgdG8gY29tcHV0ZSBpZiBub3QgY2FjaGVkLCBzb1xuICAgIC8vIG9ubHkgY2FsbCBjb3VudCgpIGlmIHRoZSBudW1iZXIgaXMgaW4gZmFjdCBuZWdhdGl2ZS5cbiAgICBpbmRleCA9IHJlc29sdmVCZWdpbihpbmRleCwgaW5kZXggPCAwID8gdGhpcy5jb3VudCgpIDogdGhpcy5zaXplKTtcbiAgICB2YXIgc3BsaWNlZCA9IHRoaXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIHJldHVybiByZWlmeShcbiAgICAgIHRoaXMsXG4gICAgICBudW1BcmdzID09PSAxXG4gICAgICAgID8gc3BsaWNlZFxuICAgICAgICA6IHNwbGljZWQuY29uY2F0KGFyckNvcHkoYXJndW1lbnRzLCAyKSwgdGhpcy5zbGljZShpbmRleCArIHJlbW92ZU51bSkpXG4gICAgKTtcbiAgfSxcblxuICAvLyAjIyMgTW9yZSBjb2xsZWN0aW9uIG1ldGhvZHNcblxuICBmaW5kTGFzdEluZGV4OiBmdW5jdGlvbiBmaW5kTGFzdEluZGV4KHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZExhc3RFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzBdIDogLTE7XG4gIH0sXG5cbiAgZmlyc3Q6IGZ1bmN0aW9uIGZpcnN0KG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KDAsIG5vdFNldFZhbHVlKTtcbiAgfSxcblxuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKGRlcHRoKSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGZsYXR0ZW5GYWN0b3J5KHRoaXMsIGRlcHRoLCBmYWxzZSkpO1xuICB9LFxuXG4gIGdldDogZnVuY3Rpb24gZ2V0KGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgIGluZGV4ID0gd3JhcEluZGV4KHRoaXMsIGluZGV4KTtcbiAgICByZXR1cm4gaW5kZXggPCAwIHx8XG4gICAgICAodGhpcy5zaXplID09PSBJbmZpbml0eSB8fCAodGhpcy5zaXplICE9PSB1bmRlZmluZWQgJiYgaW5kZXggPiB0aGlzLnNpemUpKVxuICAgICAgPyBub3RTZXRWYWx1ZVxuICAgICAgOiB0aGlzLmZpbmQoZnVuY3Rpb24gKF8sIGtleSkgeyByZXR1cm4ga2V5ID09PSBpbmRleDsgfSwgdW5kZWZpbmVkLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbiBoYXMoaW5kZXgpIHtcbiAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgcmV0dXJuIChcbiAgICAgIGluZGV4ID49IDAgJiZcbiAgICAgICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHwgaW5kZXggPCB0aGlzLnNpemVcbiAgICAgICAgOiB0aGlzLmluZGV4T2YoaW5kZXgpICE9PSAtMSlcbiAgICApO1xuICB9LFxuXG4gIGludGVycG9zZTogZnVuY3Rpb24gaW50ZXJwb3NlKHNlcGFyYXRvcikge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcnBvc2VGYWN0b3J5KHRoaXMsIHNlcGFyYXRvcikpO1xuICB9LFxuXG4gIGludGVybGVhdmU6IGZ1bmN0aW9uIGludGVybGVhdmUoLyouLi5jb2xsZWN0aW9ucyovKSB7XG4gICAgdmFyIGNvbGxlY3Rpb25zID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgIHZhciB6aXBwZWQgPSB6aXBXaXRoRmFjdG9yeSh0aGlzLnRvU2VxKCksIEluZGV4ZWRTZXEub2YsIGNvbGxlY3Rpb25zKTtcbiAgICB2YXIgaW50ZXJsZWF2ZWQgPSB6aXBwZWQuZmxhdHRlbih0cnVlKTtcbiAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgIGludGVybGVhdmVkLnNpemUgPSB6aXBwZWQuc2l6ZSAqIGNvbGxlY3Rpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVybGVhdmVkKTtcbiAgfSxcblxuICBrZXlTZXE6IGZ1bmN0aW9uIGtleVNlcSgpIHtcbiAgICByZXR1cm4gUmFuZ2UoMCwgdGhpcy5zaXplKTtcbiAgfSxcblxuICBsYXN0OiBmdW5jdGlvbiBsYXN0KG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KC0xLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgc2tpcFdoaWxlOiBmdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICB9LFxuXG4gIHppcDogZnVuY3Rpb24gemlwKC8qLCAuLi5jb2xsZWN0aW9ucyAqLykge1xuICAgIHZhciBjb2xsZWN0aW9ucyA9IFt0aGlzXS5jb25jYXQoYXJyQ29weShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgZGVmYXVsdFppcHBlciwgY29sbGVjdGlvbnMpKTtcbiAgfSxcblxuICB6aXBBbGw6IGZ1bmN0aW9uIHppcEFsbCgvKiwgLi4uY29sbGVjdGlvbnMgKi8pIHtcbiAgICB2YXIgY29sbGVjdGlvbnMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGNvbGxlY3Rpb25zLCB0cnVlKSk7XG4gIH0sXG5cbiAgemlwV2l0aDogZnVuY3Rpb24gemlwV2l0aCh6aXBwZXIgLyosIC4uLmNvbGxlY3Rpb25zICovKSB7XG4gICAgdmFyIGNvbGxlY3Rpb25zID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgIGNvbGxlY3Rpb25zWzBdID0gdGhpcztcbiAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgemlwcGVyLCBjb2xsZWN0aW9ucykpO1xuICB9LFxufSk7XG5cbnZhciBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZSA9IEluZGV4ZWRDb2xsZWN0aW9uLnByb3RvdHlwZTtcbkluZGV4ZWRDb2xsZWN0aW9uUHJvdG90eXBlW0lTX0lOREVYRURfU1lNQk9MXSA9IHRydWU7XG5JbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuXG5taXhpbihTZXRDb2xsZWN0aW9uLCB7XG4gIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICBnZXQ6IGZ1bmN0aW9uIGdldCh2YWx1ZSwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpID8gdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgfSxcblxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXModmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpO1xuICB9LFxuXG4gIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gIGtleVNlcTogZnVuY3Rpb24ga2V5U2VxKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlU2VxKCk7XG4gIH0sXG59KTtcblxuU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUuaGFzID0gQ29sbGVjdGlvblByb3RvdHlwZS5pbmNsdWRlcztcblNldENvbGxlY3Rpb24ucHJvdG90eXBlLmNvbnRhaW5zID0gU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZXM7XG5cbi8vIE1peGluIHN1YmNsYXNzZXNcblxubWl4aW4oS2V5ZWRTZXEsIEtleWVkQ29sbGVjdGlvbi5wcm90b3R5cGUpO1xubWl4aW4oSW5kZXhlZFNlcSwgSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlKTtcbm1peGluKFNldFNlcSwgU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUpO1xuXG4vLyAjcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblxuZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIHJlZHVjZXIsIHJlZHVjdGlvbiwgY29udGV4dCwgdXNlRmlyc3QsIHJldmVyc2UpIHtcbiAgYXNzZXJ0Tm90SW5maW5pdGUoY29sbGVjdGlvbi5zaXplKTtcbiAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICBpZiAodXNlRmlyc3QpIHtcbiAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICByZWR1Y3Rpb24gPSB2O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICB9XG4gIH0sIHJldmVyc2UpO1xuICByZXR1cm4gcmVkdWN0aW9uO1xufVxuXG5mdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuICByZXR1cm4gaztcbn1cblxuZnVuY3Rpb24gZW50cnlNYXBwZXIodiwgaykge1xuICByZXR1cm4gW2ssIHZdO1xufVxuXG5mdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gIXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZWcocHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gLXByZWRpY2F0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0WmlwcGVyKCkge1xuICByZXR1cm4gYXJyQ29weShhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0TmVnQ29tcGFyYXRvcihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IDEgOiBhID4gYiA/IC0xIDogMDtcbn1cblxuZnVuY3Rpb24gaGFzaENvbGxlY3Rpb24oY29sbGVjdGlvbikge1xuICBpZiAoY29sbGVjdGlvbi5zaXplID09PSBJbmZpbml0eSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHZhciBvcmRlcmVkID0gaXNPcmRlcmVkKGNvbGxlY3Rpb24pO1xuICB2YXIga2V5ZWQgPSBpc0tleWVkKGNvbGxlY3Rpb24pO1xuICB2YXIgaCA9IG9yZGVyZWQgPyAxIDogMDtcbiAgdmFyIHNpemUgPSBjb2xsZWN0aW9uLl9faXRlcmF0ZShcbiAgICBrZXllZFxuICAgICAgPyBvcmRlcmVkXG4gICAgICAgID8gZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgICAgIGggPSAoMzEgKiBoICsgaGFzaE1lcmdlKGhhc2godiksIGhhc2goaykpKSB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgICAgICBoID0gKGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkpIHwgMDtcbiAgICAgICAgICB9XG4gICAgICA6IG9yZGVyZWRcbiAgICAgICAgPyBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgaCA9ICgzMSAqIGggKyBoYXNoKHYpKSB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICA6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBoID0gKGggKyBoYXNoKHYpKSB8IDA7XG4gICAgICAgICAgfVxuICApO1xuICByZXR1cm4gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKTtcbn1cblxuZnVuY3Rpb24gbXVybXVySGFzaE9mU2l6ZShzaXplLCBoKSB7XG4gIGggPSBpbXVsKGgsIDB4Y2M5ZTJkNTEpO1xuICBoID0gaW11bCgoaCA8PCAxNSkgfCAoaCA+Pj4gLTE1KSwgMHgxYjg3MzU5Myk7XG4gIGggPSBpbXVsKChoIDw8IDEzKSB8IChoID4+PiAtMTMpLCA1KTtcbiAgaCA9ICgoaCArIDB4ZTY1NDZiNjQpIHwgMCkgXiBzaXplO1xuICBoID0gaW11bChoIF4gKGggPj4+IDE2KSwgMHg4NWViY2E2Yik7XG4gIGggPSBpbXVsKGggXiAoaCA+Pj4gMTMpLCAweGMyYjJhZTM1KTtcbiAgaCA9IHNtaShoIF4gKGggPj4+IDE2KSk7XG4gIHJldHVybiBoO1xufVxuXG5mdW5jdGlvbiBoYXNoTWVyZ2UoYSwgYikge1xuICByZXR1cm4gKGEgXiAoYiArIDB4OWUzNzc5YjkgKyAoYSA8PCA2KSArIChhID4+IDIpKSkgfCAwOyAvLyBpbnRcbn1cblxudmFyIE9yZGVyZWRTZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTZXQkJDEpIHtcbiAgZnVuY3Rpb24gT3JkZXJlZFNldCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/IGVtcHR5T3JkZXJlZFNldCgpXG4gICAgICA6IGlzT3JkZXJlZFNldCh2YWx1ZSlcbiAgICAgICAgPyB2YWx1ZVxuICAgICAgICA6IGVtcHR5T3JkZXJlZFNldCgpLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHNldCkge1xuICAgICAgICAgICAgdmFyIGl0ZXIgPSBTZXRDb2xsZWN0aW9uKHZhbHVlKTtcbiAgICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHNldC5hZGQodik7IH0pO1xuICAgICAgICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTZXQkJDEgKSBPcmRlcmVkU2V0Ll9fcHJvdG9fXyA9IFNldCQkMTtcbiAgT3JkZXJlZFNldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTZXQkJDEgJiYgU2V0JCQxLnByb3RvdHlwZSApO1xuICBPcmRlcmVkU2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9yZGVyZWRTZXQ7XG5cbiAgT3JkZXJlZFNldC5vZiA9IGZ1bmN0aW9uIG9mICgvKi4uLnZhbHVlcyovKSB7XG4gICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgfTtcblxuICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24gZnJvbUtleXMgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMoS2V5ZWRDb2xsZWN0aW9uKHZhbHVlKS5rZXlTZXEoKSk7XG4gIH07XG5cbiAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZFNldCB7JywgJ30nKTtcbiAgfTtcblxuICByZXR1cm4gT3JkZXJlZFNldDtcbn0oU2V0KSk7XG5cbk9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG52YXIgT3JkZXJlZFNldFByb3RvdHlwZSA9IE9yZGVyZWRTZXQucHJvdG90eXBlO1xuT3JkZXJlZFNldFByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuT3JkZXJlZFNldFByb3RvdHlwZS56aXAgPSBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZS56aXA7XG5PcmRlcmVkU2V0UHJvdG90eXBlLnppcFdpdGggPSBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZS56aXBXaXRoO1xuXG5PcmRlcmVkU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eU9yZGVyZWRTZXQ7XG5PcmRlcmVkU2V0UHJvdG90eXBlLl9fbWFrZSA9IG1ha2VPcmRlcmVkU2V0O1xuXG5mdW5jdGlvbiBtYWtlT3JkZXJlZFNldChtYXAsIG93bmVySUQpIHtcbiAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoT3JkZXJlZFNldFByb3RvdHlwZSk7XG4gIHNldC5zaXplID0gbWFwID8gbWFwLnNpemUgOiAwO1xuICBzZXQuX21hcCA9IG1hcDtcbiAgc2V0Ll9fb3duZXJJRCA9IG93bmVySUQ7XG4gIHJldHVybiBzZXQ7XG59XG5cbnZhciBFTVBUWV9PUkRFUkVEX1NFVDtcbmZ1bmN0aW9uIGVtcHR5T3JkZXJlZFNldCgpIHtcbiAgcmV0dXJuIChcbiAgICBFTVBUWV9PUkRFUkVEX1NFVCB8fCAoRU1QVFlfT1JERVJFRF9TRVQgPSBtYWtlT3JkZXJlZFNldChlbXB0eU9yZGVyZWRNYXAoKSkpXG4gICk7XG59XG5cbnZhciBSZWNvcmQgPSBmdW5jdGlvbiBSZWNvcmQoZGVmYXVsdFZhbHVlcywgbmFtZSkge1xuICB2YXIgaGFzSW5pdGlhbGl6ZWQ7XG5cbiAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkge1xuICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlY29yZFR5cGUpKSB7XG4gICAgICByZXR1cm4gbmV3IFJlY29yZFR5cGUodmFsdWVzKTtcbiAgICB9XG4gICAgaWYgKCFoYXNJbml0aWFsaXplZCkge1xuICAgICAgaGFzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0VmFsdWVzKTtcbiAgICAgIHZhciBpbmRpY2VzID0gKFJlY29yZFR5cGVQcm90b3R5cGUuX2luZGljZXMgPSB7fSk7XG4gICAgICAvLyBEZXByZWNhdGVkOiBsZWZ0IHRvIGF0dGVtcHQgbm90IHRvIGJyZWFrIGFueSBleHRlcm5hbCBjb2RlIHdoaWNoXG4gICAgICAvLyByZWxpZXMgb24gYSAuX25hbWUgcHJvcGVydHkgZXhpc3Rpbmcgb24gcmVjb3JkIGluc3RhbmNlcy5cbiAgICAgIC8vIFVzZSBSZWNvcmQuZ2V0RGVzY3JpcHRpdmVOYW1lKCkgaW5zdGVhZFxuICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fbmFtZSA9IG5hbWU7XG4gICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9rZXlzID0ga2V5cztcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2RlZmF1bHRWYWx1ZXMgPSBkZWZhdWx0VmFsdWVzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IGtleXNbaV07XG4gICAgICAgIGluZGljZXNbcHJvcE5hbWVdID0gaTtcbiAgICAgICAgaWYgKFJlY29yZFR5cGVQcm90b3R5cGVbcHJvcE5hbWVdKSB7XG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICAgIHR5cGVvZiBjb25zb2xlID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgY29uc29sZS53YXJuICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICdDYW5ub3QgZGVmaW5lICcgK1xuICAgICAgICAgICAgICAgIHJlY29yZE5hbWUodGhpcykgK1xuICAgICAgICAgICAgICAgICcgd2l0aCBwcm9wZXJ0eSBcIicgK1xuICAgICAgICAgICAgICAgIHByb3BOYW1lICtcbiAgICAgICAgICAgICAgICAnXCIgc2luY2UgdGhhdCBwcm9wZXJ0eSBuYW1lIGlzIHBhcnQgb2YgdGhlIFJlY29yZCBBUEkuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRQcm9wKFJlY29yZFR5cGVQcm90b3R5cGUsIHByb3BOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9fb3duZXJJRCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZXMgPSBMaXN0KCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobCkge1xuICAgICAgbC5zZXRTaXplKHRoaXMkMS5fa2V5cy5sZW5ndGgpO1xuICAgICAgS2V5ZWRDb2xsZWN0aW9uKHZhbHVlcykuZm9yRWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICBsLnNldCh0aGlzJDEuX2luZGljZXNba10sIHYgPT09IHRoaXMkMS5fZGVmYXVsdFZhbHVlc1trXSA/IHVuZGVmaW5lZCA6IHYpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIFJlY29yZFR5cGVQcm90b3R5cGUgPSAoUmVjb3JkVHlwZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFxuICAgIFJlY29yZFByb3RvdHlwZVxuICApKTtcbiAgUmVjb3JkVHlwZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY29yZFR5cGU7XG5cbiAgaWYgKG5hbWUpIHtcbiAgICBSZWNvcmRUeXBlLmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgfVxuXG4gIHJldHVybiBSZWNvcmRUeXBlO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIHN0ciA9IHJlY29yZE5hbWUodGhpcykgKyAnIHsgJztcbiAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICB2YXIgaztcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSAhPT0gbDsgaSsrKSB7XG4gICAgayA9IGtleXNbaV07XG4gICAgc3RyICs9IChpID8gJywgJyA6ICcnKSArIGsgKyAnOiAnICsgcXVvdGVTdHJpbmcodGhpcy5nZXQoaykpO1xuICB9XG4gIHJldHVybiBzdHIgKyAnIH0nO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKG90aGVyKSB7XG4gIHJldHVybiAoXG4gICAgdGhpcyA9PT0gb3RoZXIgfHxcbiAgICAob3RoZXIgJiZcbiAgICAgIHRoaXMuX2tleXMgPT09IG90aGVyLl9rZXlzICYmXG4gICAgICByZWNvcmRTZXEodGhpcykuZXF1YWxzKHJlY29yZFNlcShvdGhlcikpKVxuICApO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uIGhhc2hDb2RlICgpIHtcbiAgcmV0dXJuIHJlY29yZFNlcSh0aGlzKS5oYXNoQ29kZSgpO1xufTtcblxuLy8gQHByYWdtYSBBY2Nlc3NcblxuUmVjb3JkLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGspIHtcbiAgcmV0dXJuIHRoaXMuX2luZGljZXMuaGFzT3duUHJvcGVydHkoayk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaywgbm90U2V0VmFsdWUpIHtcbiAgaWYgKCF0aGlzLmhhcyhrKSkge1xuICAgIHJldHVybiBub3RTZXRWYWx1ZTtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9pbmRpY2VzW2tdO1xuICB2YXIgdmFsdWUgPSB0aGlzLl92YWx1ZXMuZ2V0KGluZGV4KTtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB0aGlzLl9kZWZhdWx0VmFsdWVzW2tdIDogdmFsdWU7XG59O1xuXG4vLyBAcHJhZ21hIE1vZGlmaWNhdGlvblxuXG5SZWNvcmQucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCAoaywgdikge1xuICBpZiAodGhpcy5oYXMoaykpIHtcbiAgICB2YXIgbmV3VmFsdWVzID0gdGhpcy5fdmFsdWVzLnNldChcbiAgICAgIHRoaXMuX2luZGljZXNba10sXG4gICAgICB2ID09PSB0aGlzLl9kZWZhdWx0VmFsdWVzW2tdID8gdW5kZWZpbmVkIDogdlxuICAgICk7XG4gICAgaWYgKG5ld1ZhbHVlcyAhPT0gdGhpcy5fdmFsdWVzICYmICF0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3VmFsdWVzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaykge1xuICByZXR1cm4gdGhpcy5zZXQoayk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICB2YXIgbmV3VmFsdWVzID0gdGhpcy5fdmFsdWVzLmNsZWFyKCkuc2V0U2l6ZSh0aGlzLl9rZXlzLmxlbmd0aCk7XG4gIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiBtYWtlUmVjb3JkKHRoaXMsIG5ld1ZhbHVlcyk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbiB3YXNBbHRlcmVkICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZhbHVlcy53YXNBbHRlcmVkKCk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24gdG9TZXEgKCkge1xuICByZXR1cm4gcmVjb3JkU2VxKHRoaXMpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gdG9KUyQxICgpIHtcbiAgcmV0dXJuIHRvSlModGhpcyk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiBlbnRyaWVzICgpIHtcbiAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICByZXR1cm4gcmVjb3JkU2VxKHRoaXMpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgcmV0dXJuIHJlY29yZFNlcSh0aGlzKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgbmV3VmFsdWVzID0gdGhpcy5fdmFsdWVzLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gIGlmICghb3duZXJJRCkge1xuICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3VmFsdWVzLCBvd25lcklEKTtcbn07XG5cblJlY29yZC5pc1JlY29yZCA9IGlzUmVjb3JkO1xuUmVjb3JkLmdldERlc2NyaXB0aXZlTmFtZSA9IHJlY29yZE5hbWU7XG52YXIgUmVjb3JkUHJvdG90eXBlID0gUmVjb3JkLnByb3RvdHlwZTtcblJlY29yZFByb3RvdHlwZVtJU19SRUNPUkRfU1lNQk9MXSA9IHRydWU7XG5SZWNvcmRQcm90b3R5cGVbREVMRVRFXSA9IFJlY29yZFByb3RvdHlwZS5yZW1vdmU7XG5SZWNvcmRQcm90b3R5cGUuZGVsZXRlSW4gPSBSZWNvcmRQcm90b3R5cGUucmVtb3ZlSW4gPSBkZWxldGVJbjtcblJlY29yZFByb3RvdHlwZS5nZXRJbiA9IGdldEluJDE7XG5SZWNvcmRQcm90b3R5cGUuaGFzSW4gPSBDb2xsZWN0aW9uUHJvdG90eXBlLmhhc0luO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlID0gbWVyZ2U7XG5SZWNvcmRQcm90b3R5cGUubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlSW4gPSBtZXJnZUluO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcCA9IG1lcmdlRGVlcCQxO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBtZXJnZURlZXBXaXRoJDE7XG5SZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBtZXJnZURlZXBJbjtcblJlY29yZFByb3RvdHlwZS5zZXRJbiA9IHNldEluJDE7XG5SZWNvcmRQcm90b3R5cGUudXBkYXRlID0gdXBkYXRlJDE7XG5SZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSB1cGRhdGVJbiQxO1xuUmVjb3JkUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSB3aXRoTXV0YXRpb25zO1xuUmVjb3JkUHJvdG90eXBlLmFzTXV0YWJsZSA9IGFzTXV0YWJsZTtcblJlY29yZFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGFzSW1tdXRhYmxlO1xuUmVjb3JkUHJvdG90eXBlW0lURVJBVE9SX1NZTUJPTF0gPSBSZWNvcmRQcm90b3R5cGUuZW50cmllcztcblJlY29yZFByb3RvdHlwZS50b0pTT04gPSBSZWNvcmRQcm90b3R5cGUudG9PYmplY3QgPVxuICBDb2xsZWN0aW9uUHJvdG90eXBlLnRvT2JqZWN0O1xuUmVjb3JkUHJvdG90eXBlLmluc3BlY3QgPSBSZWNvcmRQcm90b3R5cGUudG9Tb3VyY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbn07XG5cbmZ1bmN0aW9uIG1ha2VSZWNvcmQobGlrZVJlY29yZCwgdmFsdWVzLCBvd25lcklEKSB7XG4gIHZhciByZWNvcmQgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihsaWtlUmVjb3JkKSk7XG4gIHJlY29yZC5fdmFsdWVzID0gdmFsdWVzO1xuICByZWNvcmQuX19vd25lcklEID0gb3duZXJJRDtcbiAgcmV0dXJuIHJlY29yZDtcbn1cblxuZnVuY3Rpb24gcmVjb3JkTmFtZShyZWNvcmQpIHtcbiAgcmV0dXJuIHJlY29yZC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCByZWNvcmQuY29uc3RydWN0b3IubmFtZSB8fCAnUmVjb3JkJztcbn1cblxuZnVuY3Rpb24gcmVjb3JkU2VxKHJlY29yZCkge1xuICByZXR1cm4ga2V5ZWRTZXFGcm9tVmFsdWUocmVjb3JkLl9rZXlzLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gW2ssIHJlY29yZC5nZXQoayldOyB9KSk7XG59XG5cbmZ1bmN0aW9uIHNldFByb3AocHJvdG90eXBlLCBuYW1lKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgbmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaW52YXJpYW50KHRoaXMuX19vd25lcklELCAnQ2Fubm90IHNldCBvbiBhbiBpbW11dGFibGUgcmVjb3JkLicpO1xuICAgICAgICB0aGlzLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8vIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBmYWlsZWQuIFByb2JhYmx5IElFOC5cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBsYXp5IFNlcSBvZiBgdmFsdWVgIHJlcGVhdGVkIGB0aW1lc2AgdGltZXMuIFdoZW4gYHRpbWVzYCBpc1xuICogdW5kZWZpbmVkLCByZXR1cm5zIGFuIGluZmluaXRlIHNlcXVlbmNlIG9mIGB2YWx1ZWAuXG4gKi9cbnZhciBSZXBlYXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkU2VxJCQxKSB7XG4gIGZ1bmN0aW9uIFJlcGVhdCh2YWx1ZSwgdGltZXMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVwZWF0KSkge1xuICAgICAgcmV0dXJuIG5ldyBSZXBlYXQodmFsdWUsIHRpbWVzKTtcbiAgICB9XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnNpemUgPSB0aW1lcyA9PT0gdW5kZWZpbmVkID8gSW5maW5pdHkgOiBNYXRoLm1heCgwLCB0aW1lcyk7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgaWYgKEVNUFRZX1JFUEVBVCkge1xuICAgICAgICByZXR1cm4gRU1QVFlfUkVQRUFUO1xuICAgICAgfVxuICAgICAgRU1QVFlfUkVQRUFUID0gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoIEluZGV4ZWRTZXEkJDEgKSBSZXBlYXQuX19wcm90b19fID0gSW5kZXhlZFNlcSQkMTtcbiAgUmVwZWF0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEluZGV4ZWRTZXEkJDEgJiYgSW5kZXhlZFNlcSQkMS5wcm90b3R5cGUgKTtcbiAgUmVwZWF0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcGVhdDtcblxuICBSZXBlYXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiAnUmVwZWF0IFtdJztcbiAgICB9XG4gICAgcmV0dXJuICdSZXBlYXQgWyAnICsgdGhpcy5fdmFsdWUgKyAnICcgKyB0aGlzLnNpemUgKyAnIHRpbWVzIF0nO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpID8gdGhpcy5fdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHNlYXJjaFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG4gIH07XG5cbiAgUmVwZWF0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgcmV0dXJuIHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSlcbiAgICAgID8gdGhpc1xuICAgICAgOiBuZXcgUmVwZWF0KFxuICAgICAgICAgIHRoaXMuX3ZhbHVlLFxuICAgICAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSlcbiAgICAgICAgKTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mIChzZWFyY2hWYWx1ZSkge1xuICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAoc2VhcmNoVmFsdWUpIHtcbiAgICBpZiAoaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSAhPT0gc2l6ZSkge1xuICAgICAgaWYgKGZuKHRoaXMuX3ZhbHVlLCByZXZlcnNlID8gc2l6ZSAtICsraSA6IGkrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICB2YXIgaSA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihcbiAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGkgPT09IHNpemVcbiAgICAgICAgICA/IGl0ZXJhdG9yRG9uZSgpXG4gICAgICAgICAgOiBpdGVyYXRvclZhbHVlKHR5cGUsIHJldmVyc2UgPyBzaXplIC0gKytpIDogaSsrLCB0aGlzJDEuX3ZhbHVlKTsgfVxuICAgICk7XG4gIH07XG5cbiAgUmVwZWF0LnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUmVwZWF0XG4gICAgICA/IGlzKHRoaXMuX3ZhbHVlLCBvdGhlci5fdmFsdWUpXG4gICAgICA6IGRlZXBFcXVhbChvdGhlcik7XG4gIH07XG5cbiAgcmV0dXJuIFJlcGVhdDtcbn0oSW5kZXhlZFNlcSkpO1xuXG52YXIgRU1QVFlfUkVQRUFUO1xuXG5mdW5jdGlvbiBmcm9tSlModmFsdWUsIGNvbnZlcnRlcikge1xuICByZXR1cm4gZnJvbUpTV2l0aChcbiAgICBbXSxcbiAgICBjb252ZXJ0ZXIgfHwgZGVmYXVsdENvbnZlcnRlcixcbiAgICB2YWx1ZSxcbiAgICAnJyxcbiAgICBjb252ZXJ0ZXIgJiYgY29udmVydGVyLmxlbmd0aCA+IDIgPyBbXSA6IHVuZGVmaW5lZCxcbiAgICB7ICcnOiB2YWx1ZSB9XG4gICk7XG59XG5cbmZ1bmN0aW9uIGZyb21KU1dpdGgoc3RhY2ssIGNvbnZlcnRlciwgdmFsdWUsIGtleSwga2V5UGF0aCwgcGFyZW50VmFsdWUpIHtcbiAgdmFyIHRvU2VxID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICA/IEluZGV4ZWRTZXFcbiAgICA6IGlzUGxhaW5PYmoodmFsdWUpXG4gICAgICA/IEtleWVkU2VxXG4gICAgICA6IG51bGw7XG4gIGlmICh0b1NlcSkge1xuICAgIGlmICh+c3RhY2suaW5kZXhPZih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGNpcmN1bGFyIHN0cnVjdHVyZSB0byBJbW11dGFibGUnKTtcbiAgICB9XG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG4gICAga2V5UGF0aCAmJiBrZXkgIT09ICcnICYmIGtleVBhdGgucHVzaChrZXkpO1xuICAgIHZhciBjb252ZXJ0ZWQgPSBjb252ZXJ0ZXIuY2FsbChcbiAgICAgIHBhcmVudFZhbHVlLFxuICAgICAga2V5LFxuICAgICAgdG9TZXEodmFsdWUpLm1hcChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gZnJvbUpTV2l0aChzdGFjaywgY29udmVydGVyLCB2LCBrLCBrZXlQYXRoLCB2YWx1ZSk7IH1cbiAgICAgICksXG4gICAgICBrZXlQYXRoICYmIGtleVBhdGguc2xpY2UoKVxuICAgICk7XG4gICAgc3RhY2sucG9wKCk7XG4gICAga2V5UGF0aCAmJiBrZXlQYXRoLnBvcCgpO1xuICAgIHJldHVybiBjb252ZXJ0ZWQ7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29udmVydGVyKGssIHYpIHtcbiAgcmV0dXJuIGlzS2V5ZWQodikgPyB2LnRvTWFwKCkgOiB2LnRvTGlzdCgpO1xufVxuXG52YXIgdmVyc2lvbiA9IFwiNC4wLjAtcmMuMTFcIjtcblxudmFyIEltbXV0YWJsZSA9IHtcbiAgdmVyc2lvbjogdmVyc2lvbixcblxuICBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uLFxuICAvLyBOb3RlOiBJdGVyYWJsZSBpcyBkZXByZWNhdGVkXG4gIEl0ZXJhYmxlOiBDb2xsZWN0aW9uLFxuXG4gIFNlcTogU2VxLFxuICBNYXA6IE1hcCxcbiAgT3JkZXJlZE1hcDogT3JkZXJlZE1hcCxcbiAgTGlzdDogTGlzdCxcbiAgU3RhY2s6IFN0YWNrLFxuICBTZXQ6IFNldCxcbiAgT3JkZXJlZFNldDogT3JkZXJlZFNldCxcblxuICBSZWNvcmQ6IFJlY29yZCxcbiAgUmFuZ2U6IFJhbmdlLFxuICBSZXBlYXQ6IFJlcGVhdCxcblxuICBpczogaXMsXG4gIGZyb21KUzogZnJvbUpTLFxuICBoYXNoOiBoYXNoLFxuXG4gIGlzSW1tdXRhYmxlOiBpc0ltbXV0YWJsZSxcbiAgaXNDb2xsZWN0aW9uOiBpc0NvbGxlY3Rpb24sXG4gIGlzS2V5ZWQ6IGlzS2V5ZWQsXG4gIGlzSW5kZXhlZDogaXNJbmRleGVkLFxuICBpc0Fzc29jaWF0aXZlOiBpc0Fzc29jaWF0aXZlLFxuICBpc09yZGVyZWQ6IGlzT3JkZXJlZCxcbiAgaXNWYWx1ZU9iamVjdDogaXNWYWx1ZU9iamVjdCxcbiAgaXNTZXE6IGlzU2VxLFxuICBpc0xpc3Q6IGlzTGlzdCxcbiAgaXNNYXA6IGlzTWFwLFxuICBpc09yZGVyZWRNYXA6IGlzT3JkZXJlZE1hcCxcbiAgaXNTdGFjazogaXNTdGFjayxcbiAgaXNTZXQ6IGlzU2V0LFxuICBpc09yZGVyZWRTZXQ6IGlzT3JkZXJlZFNldCxcbiAgaXNSZWNvcmQ6IGlzUmVjb3JkLFxuXG4gIGdldDogZ2V0LFxuICBnZXRJbjogZ2V0SW4sXG4gIGhhczogaGFzLFxuICBoYXNJbjogaGFzSW4sXG4gIG1lcmdlOiBtZXJnZSQxLFxuICBtZXJnZURlZXA6IG1lcmdlRGVlcCxcbiAgbWVyZ2VXaXRoOiBtZXJnZVdpdGgkMSxcbiAgbWVyZ2VEZWVwV2l0aDogbWVyZ2VEZWVwV2l0aCxcbiAgcmVtb3ZlOiByZW1vdmUsXG4gIHJlbW92ZUluOiByZW1vdmVJbixcbiAgc2V0OiBzZXQsXG4gIHNldEluOiBzZXRJbixcbiAgdXBkYXRlOiB1cGRhdGUsXG4gIHVwZGF0ZUluOiB1cGRhdGVJbixcbn07XG5cbi8vIE5vdGU6IEl0ZXJhYmxlIGlzIGRlcHJlY2F0ZWRcbnZhciBJdGVyYWJsZSA9IENvbGxlY3Rpb247XG5cbmV4cG9ydCBkZWZhdWx0IEltbXV0YWJsZTtcbmV4cG9ydCB7IHZlcnNpb24sIENvbGxlY3Rpb24sIEl0ZXJhYmxlLCBTZXEsIE1hcCwgT3JkZXJlZE1hcCwgTGlzdCwgU3RhY2ssIFNldCwgT3JkZXJlZFNldCwgUmVjb3JkLCBSYW5nZSwgUmVwZWF0LCBpcywgZnJvbUpTLCBoYXNoLCBpc0ltbXV0YWJsZSwgaXNDb2xsZWN0aW9uLCBpc0tleWVkLCBpc0luZGV4ZWQsIGlzQXNzb2NpYXRpdmUsIGlzT3JkZXJlZCwgaXNWYWx1ZU9iamVjdCwgZ2V0LCBnZXRJbiwgaGFzLCBoYXNJbiwgbWVyZ2UkMSBhcyBtZXJnZSwgbWVyZ2VEZWVwLCBtZXJnZVdpdGgkMSBhcyBtZXJnZVdpdGgsIG1lcmdlRGVlcFdpdGgsIHJlbW92ZSwgcmVtb3ZlSW4sIHNldCwgc2V0SW4sIHVwZGF0ZSwgdXBkYXRlSW4gfTtcbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG4vKipcbiAqIEhlbHBlcnMgdG8gZW5hYmxlIEltbXV0YWJsZSBjb21wYXRpYmlsaXR5ICp3aXRob3V0KiBicmluZ2luZyBpblxuICogdGhlICdpbW11dGFibGUnIHBhY2thZ2UgYXMgYSBkZXBlbmRlbmN5LlxuICovXG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGltbXV0YWJsZSBieSBjaGVja2luZyBpZiBpdCBoYXMgYSBrZXkgc3BlY2lmaWNcbiAqIHRvIHRoZSBpbW11dGFibGUgbGlicmFyeS5cbiAqXG4gKiBAcGFyYW0gIHthbnl9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xuZnVuY3Rpb24gaXNJbW11dGFibGUob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5oYXNPd25Qcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJyAmJiAob2JqZWN0Lmhhc093blByb3BlcnR5KCdfX293bmVySUQnKSB8fCAvLyBJbW11dGFibGUuTWFwXG4gIG9iamVjdC5fbWFwICYmIG9iamVjdC5fbWFwLmhhc093blByb3BlcnR5KCdfX293bmVySUQnKSkpOyAvLyBJbW11dGFibGUuUmVjb3JkXG59XG4vKipcbiAqIERlbm9ybWFsaXplIGFuIGltbXV0YWJsZSBlbnRpdHkuXG4gKlxuICogQHBhcmFtICB7U2NoZW1hfSBzY2hlbWFcbiAqIEBwYXJhbSAge0ltbXV0YWJsZS5NYXB8SW1tdXRhYmxlLlJlY29yZH0gaW5wdXRcbiAqIEBwYXJhbSAge2Z1bmN0aW9ufSB1bnZpc2l0XG4gKiBAcGFyYW0gIHtmdW5jdGlvbn0gZ2V0RGVub3JtYWxpemVkRW50aXR5XG4gKiBAcmV0dXJuIHtJbW11dGFibGUuTWFwfEltbXV0YWJsZS5SZWNvcmR9XG4gKi9cblxuZnVuY3Rpb24gZGVub3JtYWxpemVJbW11dGFibGUoc2NoZW1hLCBpbnB1dCwgdW52aXNpdCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoc2NoZW1hKS5yZWR1Y2UoZnVuY3Rpb24gKG9iamVjdCwga2V5KSB7XG4gICAgLy8gSW1tdXRhYmxlIG1hcHMgY2FzdCBrZXlzIHRvIHN0cmluZ3Mgb24gd3JpdGUgc28gd2UgbmVlZCB0byBlbnN1cmVcbiAgICAvLyB3ZSdyZSBhY2Nlc3NpbmcgdGhlbSB1c2luZyBzdHJpbmcga2V5cy5cbiAgICB2YXIgc3RyaW5nS2V5ID0gXCJcIiArIGtleTtcblxuICAgIGlmIChvYmplY3QuaGFzKHN0cmluZ0tleSkpIHtcbiAgICAgIHJldHVybiBvYmplY3Quc2V0KHN0cmluZ0tleSwgdW52aXNpdChvYmplY3QuZ2V0KHN0cmluZ0tleSksIHNjaGVtYVtzdHJpbmdLZXldKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICB9LCBpbnB1dCk7XG59XG5cbnZhciBnZXREZWZhdWx0R2V0SWQgPSBmdW5jdGlvbiBnZXREZWZhdWx0R2V0SWQoaWRBdHRyaWJ1dGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHJldHVybiBpc0ltbXV0YWJsZShpbnB1dCkgPyBpbnB1dC5nZXQoaWRBdHRyaWJ1dGUpIDogaW5wdXRbaWRBdHRyaWJ1dGVdO1xuICB9O1xufTtcblxudmFyIEVudGl0eVNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEVudGl0eVNjaGVtYShrZXksIGRlZmluaXRpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAoZGVmaW5pdGlvbiA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWZpbml0aW9uID0ge307XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICgha2V5IHx8IHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIHN0cmluZyBrZXkgZm9yIEVudGl0eSwgYnV0IGZvdW5kIFwiICsga2V5ICsgXCIuXCIpO1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIF9vcHRpb25zJGlkQXR0cmlidXRlID0gX29wdGlvbnMuaWRBdHRyaWJ1dGUsXG4gICAgICAgIGlkQXR0cmlidXRlID0gX29wdGlvbnMkaWRBdHRyaWJ1dGUgPT09IHZvaWQgMCA/ICdpZCcgOiBfb3B0aW9ucyRpZEF0dHJpYnV0ZSxcbiAgICAgICAgX29wdGlvbnMkbWVyZ2VTdHJhdGVnID0gX29wdGlvbnMubWVyZ2VTdHJhdGVneSxcbiAgICAgICAgbWVyZ2VTdHJhdGVneSA9IF9vcHRpb25zJG1lcmdlU3RyYXRlZyA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKGVudGl0eUEsIGVudGl0eUIpIHtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZW50aXR5QSwgZW50aXR5Qik7XG4gICAgfSA6IF9vcHRpb25zJG1lcmdlU3RyYXRlZyxcbiAgICAgICAgX29wdGlvbnMkcHJvY2Vzc1N0cmF0ID0gX29wdGlvbnMucHJvY2Vzc1N0cmF0ZWd5LFxuICAgICAgICBwcm9jZXNzU3RyYXRlZ3kgPSBfb3B0aW9ucyRwcm9jZXNzU3RyYXQgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBpbnB1dCk7XG4gICAgfSA6IF9vcHRpb25zJHByb2Nlc3NTdHJhdCxcbiAgICAgICAgX29wdGlvbnMkZmFsbGJhY2tTdHJhID0gX29wdGlvbnMuZmFsbGJhY2tTdHJhdGVneSxcbiAgICAgICAgZmFsbGJhY2tTdHJhdGVneSA9IF9vcHRpb25zJGZhbGxiYWNrU3RyYSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKGtleSwgc2NoZW1hKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gOiBfb3B0aW9ucyRmYWxsYmFja1N0cmE7XG4gICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIHRoaXMuX2dldElkID0gdHlwZW9mIGlkQXR0cmlidXRlID09PSAnZnVuY3Rpb24nID8gaWRBdHRyaWJ1dGUgOiBnZXREZWZhdWx0R2V0SWQoaWRBdHRyaWJ1dGUpO1xuICAgIHRoaXMuX2lkQXR0cmlidXRlID0gaWRBdHRyaWJ1dGU7XG4gICAgdGhpcy5fbWVyZ2VTdHJhdGVneSA9IG1lcmdlU3RyYXRlZ3k7XG4gICAgdGhpcy5fcHJvY2Vzc1N0cmF0ZWd5ID0gcHJvY2Vzc1N0cmF0ZWd5O1xuICAgIHRoaXMuX2ZhbGxiYWNrU3RyYXRlZ3kgPSBmYWxsYmFja1N0cmF0ZWd5O1xuICAgIHRoaXMuZGVmaW5lKGRlZmluaXRpb24pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEVudGl0eVNjaGVtYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShkZWZpbml0aW9uKSB7XG4gICAgdGhpcy5zY2hlbWEgPSBPYmplY3Qua2V5cyhkZWZpbml0aW9uKS5yZWR1Y2UoZnVuY3Rpb24gKGVudGl0eVNjaGVtYSwga2V5KSB7XG4gICAgICB2YXIgX2V4dGVuZHMyO1xuXG4gICAgICB2YXIgc2NoZW1hID0gZGVmaW5pdGlvbltrZXldO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBlbnRpdHlTY2hlbWEsIChfZXh0ZW5kczIgPSB7fSwgX2V4dGVuZHMyW2tleV0gPSBzY2hlbWEsIF9leHRlbmRzMikpO1xuICAgIH0sIHRoaXMuc2NoZW1hIHx8IHt9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0SWQgPSBmdW5jdGlvbiBnZXRJZChpbnB1dCwgcGFyZW50LCBrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0SWQoaW5wdXQsIHBhcmVudCwga2V5KTtcbiAgfTtcblxuICBfcHJvdG8ubWVyZ2UgPSBmdW5jdGlvbiBtZXJnZShlbnRpdHlBLCBlbnRpdHlCKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lcmdlU3RyYXRlZ3koZW50aXR5QSwgZW50aXR5Qik7XG4gIH07XG5cbiAgX3Byb3RvLmZhbGxiYWNrID0gZnVuY3Rpb24gZmFsbGJhY2soaWQsIHNjaGVtYSkge1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1N0cmF0ZWd5KGlkLCBzY2hlbWEpO1xuICB9O1xuXG4gIF9wcm90by5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoaW5wdXQsIHBhcmVudCwga2V5LCB2aXNpdCwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGlkID0gdGhpcy5nZXRJZChpbnB1dCwgcGFyZW50LCBrZXkpO1xuICAgIHZhciBlbnRpdHlUeXBlID0gdGhpcy5rZXk7XG5cbiAgICBpZiAoIShlbnRpdHlUeXBlIGluIHZpc2l0ZWRFbnRpdGllcykpIHtcbiAgICAgIHZpc2l0ZWRFbnRpdGllc1tlbnRpdHlUeXBlXSA9IHt9O1xuICAgIH1cblxuICAgIGlmICghKGlkIGluIHZpc2l0ZWRFbnRpdGllc1tlbnRpdHlUeXBlXSkpIHtcbiAgICAgIHZpc2l0ZWRFbnRpdGllc1tlbnRpdHlUeXBlXVtpZF0gPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodmlzaXRlZEVudGl0aWVzW2VudGl0eVR5cGVdW2lkXS5zb21lKGZ1bmN0aW9uIChlbnRpdHkpIHtcbiAgICAgIHJldHVybiBlbnRpdHkgPT09IGlucHV0O1xuICAgIH0pKSB7XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgdmlzaXRlZEVudGl0aWVzW2VudGl0eVR5cGVdW2lkXS5wdXNoKGlucHV0KTtcblxuICAgIHZhciBwcm9jZXNzZWRFbnRpdHkgPSB0aGlzLl9wcm9jZXNzU3RyYXRlZ3koaW5wdXQsIHBhcmVudCwga2V5KTtcblxuICAgIE9iamVjdC5rZXlzKHRoaXMuc2NoZW1hKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmIChwcm9jZXNzZWRFbnRpdHkuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgcHJvY2Vzc2VkRW50aXR5W2tleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBzY2hlbWEgPSBfdGhpcy5zY2hlbWFba2V5XTtcbiAgICAgICAgdmFyIHJlc29sdmVkU2NoZW1hID0gdHlwZW9mIHNjaGVtYSA9PT0gJ2Z1bmN0aW9uJyA/IHNjaGVtYShpbnB1dCkgOiBzY2hlbWE7XG4gICAgICAgIHByb2Nlc3NlZEVudGl0eVtrZXldID0gdmlzaXQocHJvY2Vzc2VkRW50aXR5W2tleV0sIHByb2Nlc3NlZEVudGl0eSwga2V5LCByZXNvbHZlZFNjaGVtYSwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFkZEVudGl0eSh0aGlzLCBwcm9jZXNzZWRFbnRpdHksIGlucHV0LCBwYXJlbnQsIGtleSk7XG4gICAgcmV0dXJuIGlkO1xuICB9O1xuXG4gIF9wcm90by5kZW5vcm1hbGl6ZSA9IGZ1bmN0aW9uIGRlbm9ybWFsaXplKGVudGl0eSwgdW52aXNpdCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKGlzSW1tdXRhYmxlKGVudGl0eSkpIHtcbiAgICAgIHJldHVybiBkZW5vcm1hbGl6ZUltbXV0YWJsZSh0aGlzLnNjaGVtYSwgZW50aXR5LCB1bnZpc2l0KTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyh0aGlzLnNjaGVtYSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoZW50aXR5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIHNjaGVtYSA9IF90aGlzMi5zY2hlbWFba2V5XTtcbiAgICAgICAgZW50aXR5W2tleV0gPSB1bnZpc2l0KGVudGl0eVtrZXldLCBzY2hlbWEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBlbnRpdHk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKEVudGl0eVNjaGVtYSwgW3tcbiAgICBrZXk6IFwia2V5XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fa2V5O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpZEF0dHJpYnV0ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lkQXR0cmlidXRlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBFbnRpdHlTY2hlbWE7XG59KCk7XG5cbnZhciBQb2x5bW9ycGhpY1NjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBvbHltb3JwaGljU2NoZW1hKGRlZmluaXRpb24sIHNjaGVtYUF0dHJpYnV0ZSkge1xuICAgIGlmIChzY2hlbWFBdHRyaWJ1dGUpIHtcbiAgICAgIHRoaXMuX3NjaGVtYUF0dHJpYnV0ZSA9IHR5cGVvZiBzY2hlbWFBdHRyaWJ1dGUgPT09ICdzdHJpbmcnID8gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dFtzY2hlbWFBdHRyaWJ1dGVdO1xuICAgICAgfSA6IHNjaGVtYUF0dHJpYnV0ZTtcbiAgICB9XG5cbiAgICB0aGlzLmRlZmluZShkZWZpbml0aW9uKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQb2x5bW9ycGhpY1NjaGVtYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmRlZmluZSA9IGZ1bmN0aW9uIGRlZmluZShkZWZpbml0aW9uKSB7XG4gICAgdGhpcy5zY2hlbWEgPSBkZWZpbml0aW9uO1xuICB9O1xuXG4gIF9wcm90by5nZXRTY2hlbWFBdHRyaWJ1dGUgPSBmdW5jdGlvbiBnZXRTY2hlbWFBdHRyaWJ1dGUoaW5wdXQsIHBhcmVudCwga2V5KSB7XG4gICAgcmV0dXJuICF0aGlzLmlzU2luZ2xlU2NoZW1hICYmIHRoaXMuX3NjaGVtYUF0dHJpYnV0ZShpbnB1dCwgcGFyZW50LCBrZXkpO1xuICB9O1xuXG4gIF9wcm90by5pbmZlclNjaGVtYSA9IGZ1bmN0aW9uIGluZmVyU2NoZW1hKGlucHV0LCBwYXJlbnQsIGtleSkge1xuICAgIGlmICh0aGlzLmlzU2luZ2xlU2NoZW1hKSB7XG4gICAgICByZXR1cm4gdGhpcy5zY2hlbWE7XG4gICAgfVxuXG4gICAgdmFyIGF0dHIgPSB0aGlzLmdldFNjaGVtYUF0dHJpYnV0ZShpbnB1dCwgcGFyZW50LCBrZXkpO1xuICAgIHJldHVybiB0aGlzLnNjaGVtYVthdHRyXTtcbiAgfTtcblxuICBfcHJvdG8ubm9ybWFsaXplVmFsdWUgPSBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSwgcGFyZW50LCBrZXksIHZpc2l0LCBhZGRFbnRpdHksIHZpc2l0ZWRFbnRpdGllcykge1xuICAgIHZhciBzY2hlbWEgPSB0aGlzLmluZmVyU2NoZW1hKHZhbHVlLCBwYXJlbnQsIGtleSk7XG5cbiAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBub3JtYWxpemVkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgcGFyZW50LCBrZXksIHNjaGVtYSwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpO1xuICAgIHJldHVybiB0aGlzLmlzU2luZ2xlU2NoZW1hIHx8IG5vcm1hbGl6ZWRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IG5vcm1hbGl6ZWRWYWx1ZSA9PT0gbnVsbCA/IG5vcm1hbGl6ZWRWYWx1ZSA6IHtcbiAgICAgIGlkOiBub3JtYWxpemVkVmFsdWUsXG4gICAgICBzY2hlbWE6IHRoaXMuZ2V0U2NoZW1hQXR0cmlidXRlKHZhbHVlLCBwYXJlbnQsIGtleSlcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5kZW5vcm1hbGl6ZVZhbHVlID0gZnVuY3Rpb24gZGVub3JtYWxpemVWYWx1ZSh2YWx1ZSwgdW52aXNpdCkge1xuICAgIHZhciBzY2hlbWFLZXkgPSBpc0ltbXV0YWJsZSh2YWx1ZSkgPyB2YWx1ZS5nZXQoJ3NjaGVtYScpIDogdmFsdWUuc2NoZW1hO1xuXG4gICAgaWYgKCF0aGlzLmlzU2luZ2xlU2NoZW1hICYmICFzY2hlbWFLZXkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgaWQgPSB0aGlzLmlzU2luZ2xlU2NoZW1hID8gdW5kZWZpbmVkIDogaXNJbW11dGFibGUodmFsdWUpID8gdmFsdWUuZ2V0KCdpZCcpIDogdmFsdWUuaWQ7XG4gICAgdmFyIHNjaGVtYSA9IHRoaXMuaXNTaW5nbGVTY2hlbWEgPyB0aGlzLnNjaGVtYSA6IHRoaXMuc2NoZW1hW3NjaGVtYUtleV07XG4gICAgcmV0dXJuIHVudmlzaXQoaWQgfHwgdmFsdWUsIHNjaGVtYSk7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFBvbHltb3JwaGljU2NoZW1hLCBbe1xuICAgIGtleTogXCJpc1NpbmdsZVNjaGVtYVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICF0aGlzLl9zY2hlbWFBdHRyaWJ1dGU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvbHltb3JwaGljU2NoZW1hO1xufSgpO1xuXG52YXIgVW5pb25TY2hlbWEgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Qb2x5bW9ycGhpY1NjaGVtYSkge1xuICBfaW5oZXJpdHNMb29zZShVbmlvblNjaGVtYSwgX1BvbHltb3JwaGljU2NoZW1hKTtcblxuICBmdW5jdGlvbiBVbmlvblNjaGVtYShkZWZpbml0aW9uLCBzY2hlbWFBdHRyaWJ1dGUpIHtcbiAgICBpZiAoIXNjaGVtYUF0dHJpYnV0ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBvcHRpb24gXCJzY2hlbWFBdHRyaWJ1dGVcIiBub3QgZm91bmQgb24gVW5pb25TY2hlbWEuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9Qb2x5bW9ycGhpY1NjaGVtYS5jYWxsKHRoaXMsIGRlZmluaXRpb24sIHNjaGVtYUF0dHJpYnV0ZSkgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBVbmlvblNjaGVtYS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCwgcGFyZW50LCBrZXksIHZpc2l0LCBhZGRFbnRpdHksIHZpc2l0ZWRFbnRpdGllcykge1xuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVZhbHVlKGlucHV0LCBwYXJlbnQsIGtleSwgdmlzaXQsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcbiAgfTtcblxuICBfcHJvdG8uZGVub3JtYWxpemUgPSBmdW5jdGlvbiBkZW5vcm1hbGl6ZShpbnB1dCwgdW52aXNpdCkge1xuICAgIHJldHVybiB0aGlzLmRlbm9ybWFsaXplVmFsdWUoaW5wdXQsIHVudmlzaXQpO1xuICB9O1xuXG4gIHJldHVybiBVbmlvblNjaGVtYTtcbn0oUG9seW1vcnBoaWNTY2hlbWEpO1xuXG52YXIgVmFsdWVzU2NoZW1hID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUG9seW1vcnBoaWNTY2hlbWEpIHtcbiAgX2luaGVyaXRzTG9vc2UoVmFsdWVzU2NoZW1hLCBfUG9seW1vcnBoaWNTY2hlbWEpO1xuXG4gIGZ1bmN0aW9uIFZhbHVlc1NjaGVtYSgpIHtcbiAgICByZXR1cm4gX1BvbHltb3JwaGljU2NoZW1hLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBWYWx1ZXNTY2hlbWEucHJvdG90eXBlO1xuXG4gIF9wcm90by5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoaW5wdXQsIHBhcmVudCwga2V5LCB2aXNpdCwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGlucHV0KS5yZWR1Y2UoZnVuY3Rpb24gKG91dHB1dCwga2V5LCBpbmRleCkge1xuICAgICAgdmFyIF9leHRlbmRzMjtcblxuICAgICAgdmFyIHZhbHVlID0gaW5wdXRba2V5XTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsID8gX2V4dGVuZHMoe30sIG91dHB1dCwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJba2V5XSA9IF90aGlzLm5vcm1hbGl6ZVZhbHVlKHZhbHVlLCBpbnB1dCwga2V5LCB2aXNpdCwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpLCBfZXh0ZW5kczIpKSA6IG91dHB1dDtcbiAgICB9LCB7fSk7XG4gIH07XG5cbiAgX3Byb3RvLmRlbm9ybWFsaXplID0gZnVuY3Rpb24gZGVub3JtYWxpemUoaW5wdXQsIHVudmlzaXQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnB1dCkucmVkdWNlKGZ1bmN0aW9uIChvdXRwdXQsIGtleSkge1xuICAgICAgdmFyIF9leHRlbmRzMztcblxuICAgICAgdmFyIGVudGl0eU9ySWQgPSBpbnB1dFtrZXldO1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRwdXQsIChfZXh0ZW5kczMgPSB7fSwgX2V4dGVuZHMzW2tleV0gPSBfdGhpczIuZGVub3JtYWxpemVWYWx1ZShlbnRpdHlPcklkLCB1bnZpc2l0KSwgX2V4dGVuZHMzKSk7XG4gICAgfSwge30pO1xuICB9O1xuXG4gIHJldHVybiBWYWx1ZXNTY2hlbWE7XG59KFBvbHltb3JwaGljU2NoZW1hKTtcblxudmFyIHZhbGlkYXRlU2NoZW1hID0gZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoZGVmaW5pdGlvbikge1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbik7XG5cbiAgaWYgKGlzQXJyYXkgJiYgZGVmaW5pdGlvbi5sZW5ndGggPiAxKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc2NoZW1hIGRlZmluaXRpb24gdG8gYmUgYSBzaW5nbGUgc2NoZW1hLCBidXQgZm91bmQgXCIgKyBkZWZpbml0aW9uLmxlbmd0aCArIFwiLlwiKTtcbiAgfVxuXG4gIHJldHVybiBkZWZpbml0aW9uWzBdO1xufTtcblxudmFyIGdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcyhpbnB1dCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dCA6IE9iamVjdC5rZXlzKGlucHV0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBpbnB1dFtrZXldO1xuICB9KTtcbn07XG5cbnZhciBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoc2NoZW1hLCBpbnB1dCwgcGFyZW50LCBrZXksIHZpc2l0LCBhZGRFbnRpdHksIHZpc2l0ZWRFbnRpdGllcykge1xuICBzY2hlbWEgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuICB2YXIgdmFsdWVzID0gZ2V0VmFsdWVzKGlucHV0KTsgLy8gU3BlY2lhbCBjYXNlOiBBcnJheXMgcGFzcyAqdGhlaXIqIHBhcmVudCBvbiB0byB0aGVpciBjaGlsZHJlbiwgc2luY2UgdGhlcmVcbiAgLy8gaXMgbm90IGFueSBzcGVjaWFsIGluZm9ybWF0aW9uIHRoYXQgY2FuIGJlIGdhdGhlcmVkIGZyb20gdGhlbXNlbHZlcyBkaXJlY3RseVxuXG4gIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gdmlzaXQodmFsdWUsIHBhcmVudCwga2V5LCBzY2hlbWEsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcbiAgfSk7XG59O1xudmFyIGRlbm9ybWFsaXplID0gZnVuY3Rpb24gZGVub3JtYWxpemUoc2NoZW1hLCBpbnB1dCwgdW52aXNpdCkge1xuICBzY2hlbWEgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuICByZXR1cm4gaW5wdXQgJiYgaW5wdXQubWFwID8gaW5wdXQubWFwKGZ1bmN0aW9uIChlbnRpdHlPcklkKSB7XG4gICAgcmV0dXJuIHVudmlzaXQoZW50aXR5T3JJZCwgc2NoZW1hKTtcbiAgfSkgOiBpbnB1dDtcbn07XG5cbnZhciBBcnJheVNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1BvbHltb3JwaGljU2NoZW1hKSB7XG4gIF9pbmhlcml0c0xvb3NlKEFycmF5U2NoZW1hLCBfUG9seW1vcnBoaWNTY2hlbWEpO1xuXG4gIGZ1bmN0aW9uIEFycmF5U2NoZW1hKCkge1xuICAgIHJldHVybiBfUG9seW1vcnBoaWNTY2hlbWEuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFycmF5U2NoZW1hLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKGlucHV0LCBwYXJlbnQsIGtleSwgdmlzaXQsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciB2YWx1ZXMgPSBnZXRWYWx1ZXMoaW5wdXQpO1xuICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5ub3JtYWxpemVWYWx1ZSh2YWx1ZSwgcGFyZW50LCBrZXksIHZpc2l0LCBhZGRFbnRpdHksIHZpc2l0ZWRFbnRpdGllcyk7XG4gICAgfSkuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmRlbm9ybWFsaXplID0gZnVuY3Rpb24gZGVub3JtYWxpemUoaW5wdXQsIHVudmlzaXQpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBpbnB1dCAmJiBpbnB1dC5tYXAgPyBpbnB1dC5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLmRlbm9ybWFsaXplVmFsdWUodmFsdWUsIHVudmlzaXQpO1xuICAgIH0pIDogaW5wdXQ7XG4gIH07XG5cbiAgcmV0dXJuIEFycmF5U2NoZW1hO1xufShQb2x5bW9ycGhpY1NjaGVtYSk7XG5cbnZhciBfbm9ybWFsaXplID0gZnVuY3Rpb24gbm9ybWFsaXplKHNjaGVtYSwgaW5wdXQsIHBhcmVudCwga2V5LCB2aXNpdCwgYWRkRW50aXR5LCB2aXNpdGVkRW50aXRpZXMpIHtcbiAgdmFyIG9iamVjdCA9IF9leHRlbmRzKHt9LCBpbnB1dCk7XG5cbiAgT2JqZWN0LmtleXMoc2NoZW1hKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgbG9jYWxTY2hlbWEgPSBzY2hlbWFba2V5XTtcbiAgICB2YXIgcmVzb2x2ZWRMb2NhbFNjaGVtYSA9IHR5cGVvZiBsb2NhbFNjaGVtYSA9PT0gJ2Z1bmN0aW9uJyA/IGxvY2FsU2NoZW1hKGlucHV0KSA6IGxvY2FsU2NoZW1hO1xuICAgIHZhciB2YWx1ZSA9IHZpc2l0KGlucHV0W2tleV0sIGlucHV0LCBrZXksIHJlc29sdmVkTG9jYWxTY2hlbWEsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbnZhciBfZGVub3JtYWxpemUgPSBmdW5jdGlvbiBkZW5vcm1hbGl6ZShzY2hlbWEsIGlucHV0LCB1bnZpc2l0KSB7XG4gIGlmIChpc0ltbXV0YWJsZShpbnB1dCkpIHtcbiAgICByZXR1cm4gZGVub3JtYWxpemVJbW11dGFibGUoc2NoZW1hLCBpbnB1dCwgdW52aXNpdCk7XG4gIH1cblxuICB2YXIgb2JqZWN0ID0gX2V4dGVuZHMoe30sIGlucHV0KTtcblxuICBPYmplY3Qua2V5cyhzY2hlbWEpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChvYmplY3Rba2V5XSAhPSBudWxsKSB7XG4gICAgICBvYmplY3Rba2V5XSA9IHVudmlzaXQob2JqZWN0W2tleV0sIHNjaGVtYVtrZXldKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqZWN0O1xufTtcblxudmFyIE9iamVjdFNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9iamVjdFNjaGVtYShkZWZpbml0aW9uKSB7XG4gICAgdGhpcy5kZWZpbmUoZGVmaW5pdGlvbik7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT2JqZWN0U2NoZW1hLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKGRlZmluaXRpb24pIHtcbiAgICB0aGlzLnNjaGVtYSA9IE9iamVjdC5rZXlzKGRlZmluaXRpb24pLnJlZHVjZShmdW5jdGlvbiAoZW50aXR5U2NoZW1hLCBrZXkpIHtcbiAgICAgIHZhciBfZXh0ZW5kczI7XG5cbiAgICAgIHZhciBzY2hlbWEgPSBkZWZpbml0aW9uW2tleV07XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGVudGl0eVNjaGVtYSwgKF9leHRlbmRzMiA9IHt9LCBfZXh0ZW5kczJba2V5XSA9IHNjaGVtYSwgX2V4dGVuZHMyKSk7XG4gICAgfSwgdGhpcy5zY2hlbWEgfHwge30pO1xuICB9O1xuXG4gIF9wcm90by5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfbm9ybWFsaXplLmFwcGx5KHZvaWQgMCwgW3RoaXMuc2NoZW1hXS5jb25jYXQoYXJncykpO1xuICB9O1xuXG4gIF9wcm90by5kZW5vcm1hbGl6ZSA9IGZ1bmN0aW9uIGRlbm9ybWFsaXplKCkge1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIHJldHVybiBfZGVub3JtYWxpemUuYXBwbHkodm9pZCAwLCBbdGhpcy5zY2hlbWFdLmNvbmNhdChhcmdzKSk7XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdFNjaGVtYTtcbn0oKTtcblxudmFyIHZpc2l0ID0gZnVuY3Rpb24gdmlzaXQodmFsdWUsIHBhcmVudCwga2V5LCBzY2hlbWEsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8ICF2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygc2NoZW1hID09PSAnb2JqZWN0JyAmJiAoIXNjaGVtYS5ub3JtYWxpemUgfHwgdHlwZW9mIHNjaGVtYS5ub3JtYWxpemUgIT09ICdmdW5jdGlvbicpKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5LmlzQXJyYXkoc2NoZW1hKSA/IG5vcm1hbGl6ZSA6IF9ub3JtYWxpemU7XG4gICAgcmV0dXJuIG1ldGhvZChzY2hlbWEsIHZhbHVlLCBwYXJlbnQsIGtleSwgdmlzaXQsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcbiAgfVxuXG4gIHJldHVybiBzY2hlbWEubm9ybWFsaXplKHZhbHVlLCBwYXJlbnQsIGtleSwgdmlzaXQsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcbn07XG5cbnZhciBhZGRFbnRpdGllcyA9IGZ1bmN0aW9uIGFkZEVudGl0aWVzKGVudGl0aWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc2NoZW1hLCBwcm9jZXNzZWRFbnRpdHksIHZhbHVlLCBwYXJlbnQsIGtleSkge1xuICAgIHZhciBzY2hlbWFLZXkgPSBzY2hlbWEua2V5O1xuICAgIHZhciBpZCA9IHNjaGVtYS5nZXRJZCh2YWx1ZSwgcGFyZW50LCBrZXkpO1xuXG4gICAgaWYgKCEoc2NoZW1hS2V5IGluIGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXNbc2NoZW1hS2V5XSA9IHt9O1xuICAgIH1cblxuICAgIHZhciBleGlzdGluZ0VudGl0eSA9IGVudGl0aWVzW3NjaGVtYUtleV1baWRdO1xuXG4gICAgaWYgKGV4aXN0aW5nRW50aXR5KSB7XG4gICAgICBlbnRpdGllc1tzY2hlbWFLZXldW2lkXSA9IHNjaGVtYS5tZXJnZShleGlzdGluZ0VudGl0eSwgcHJvY2Vzc2VkRW50aXR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50aXRpZXNbc2NoZW1hS2V5XVtpZF0gPSBwcm9jZXNzZWRFbnRpdHk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIHNjaGVtYSA9IHtcbiAgQXJyYXk6IEFycmF5U2NoZW1hLFxuICBFbnRpdHk6IEVudGl0eVNjaGVtYSxcbiAgT2JqZWN0OiBPYmplY3RTY2hlbWEsXG4gIFVuaW9uOiBVbmlvblNjaGVtYSxcbiAgVmFsdWVzOiBWYWx1ZXNTY2hlbWFcbn07XG52YXIgbm9ybWFsaXplJDEgPSBmdW5jdGlvbiBub3JtYWxpemUoaW5wdXQsIHNjaGVtYSkge1xuICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGlucHV0IGdpdmVuIHRvIG5vcm1hbGl6ZS4gRXhwZWN0ZWQgdHlwZSB0byBiZSBcXFwib2JqZWN0XFxcIiwgZm91bmQgXFxcIlwiICsgKGlucHV0ID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGlucHV0KSArIFwiXFxcIi5cIik7XG4gIH1cblxuICB2YXIgZW50aXRpZXMgPSB7fTtcbiAgdmFyIGFkZEVudGl0eSA9IGFkZEVudGl0aWVzKGVudGl0aWVzKTtcbiAgdmFyIHZpc2l0ZWRFbnRpdGllcyA9IHt9O1xuICB2YXIgcmVzdWx0ID0gdmlzaXQoaW5wdXQsIGlucHV0LCBudWxsLCBzY2hlbWEsIGFkZEVudGl0eSwgdmlzaXRlZEVudGl0aWVzKTtcbiAgcmV0dXJuIHtcbiAgICBlbnRpdGllczogZW50aXRpZXMsXG4gICAgcmVzdWx0OiByZXN1bHRcbiAgfTtcbn07XG5cbnZhciB1bnZpc2l0RW50aXR5ID0gZnVuY3Rpb24gdW52aXNpdEVudGl0eShpZCwgc2NoZW1hLCB1bnZpc2l0LCBnZXRFbnRpdHksIGNhY2hlKSB7XG4gIHZhciBlbnRpdHkgPSBnZXRFbnRpdHkoaWQsIHNjaGVtYSk7XG5cbiAgaWYgKGVudGl0eSA9PT0gdW5kZWZpbmVkICYmIHNjaGVtYSBpbnN0YW5jZW9mIEVudGl0eVNjaGVtYSkge1xuICAgIGVudGl0eSA9IHNjaGVtYS5mYWxsYmFjayhpZCwgc2NoZW1hKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW50aXR5ICE9PSAnb2JqZWN0JyB8fCBlbnRpdHkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZW50aXR5O1xuICB9XG5cbiAgaWYgKCFjYWNoZVtzY2hlbWEua2V5XSkge1xuICAgIGNhY2hlW3NjaGVtYS5rZXldID0ge307XG4gIH1cblxuICBpZiAoIWNhY2hlW3NjaGVtYS5rZXldW2lkXSkge1xuICAgIC8vIEVuc3VyZSB3ZSBkb24ndCBtdXRhdGUgaXQgbm9uLWltbXV0YWJsZSBvYmplY3RzXG4gICAgdmFyIGVudGl0eUNvcHkgPSBpc0ltbXV0YWJsZShlbnRpdHkpID8gZW50aXR5IDogX2V4dGVuZHMoe30sIGVudGl0eSk7IC8vIE5lZWQgdG8gc2V0IHRoaXMgZmlyc3Qgc28gdGhhdCBpZiBpdCBpcyByZWZlcmVuY2VkIGZ1cnRoZXIgd2l0aGluIHRoZVxuICAgIC8vIGRlbm9ybWFsaXphdGlvbiB0aGUgcmVmZXJlbmNlIHdpbGwgYWxyZWFkeSBleGlzdC5cblxuICAgIGNhY2hlW3NjaGVtYS5rZXldW2lkXSA9IGVudGl0eUNvcHk7XG4gICAgY2FjaGVbc2NoZW1hLmtleV1baWRdID0gc2NoZW1hLmRlbm9ybWFsaXplKGVudGl0eUNvcHksIHVudmlzaXQpO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlW3NjaGVtYS5rZXldW2lkXTtcbn07XG5cbnZhciBnZXRVbnZpc2l0ID0gZnVuY3Rpb24gZ2V0VW52aXNpdChlbnRpdGllcykge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgdmFyIGdldEVudGl0eSA9IGdldEVudGl0aWVzKGVudGl0aWVzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVudmlzaXQoaW5wdXQsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSAnb2JqZWN0JyAmJiAoIXNjaGVtYS5kZW5vcm1hbGl6ZSB8fCB0eXBlb2Ygc2NoZW1hLmRlbm9ybWFsaXplICE9PSAnZnVuY3Rpb24nKSkge1xuICAgICAgdmFyIG1ldGhvZCA9IEFycmF5LmlzQXJyYXkoc2NoZW1hKSA/IGRlbm9ybWFsaXplIDogX2Rlbm9ybWFsaXplO1xuICAgICAgcmV0dXJuIG1ldGhvZChzY2hlbWEsIGlucHV0LCB1bnZpc2l0KTtcbiAgICB9XG5cbiAgICBpZiAoaW5wdXQgPT09IHVuZGVmaW5lZCB8fCBpbnB1dCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBFbnRpdHlTY2hlbWEpIHtcbiAgICAgIHJldHVybiB1bnZpc2l0RW50aXR5KGlucHV0LCBzY2hlbWEsIHVudmlzaXQsIGdldEVudGl0eSwgY2FjaGUpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2hlbWEuZGVub3JtYWxpemUoaW5wdXQsIHVudmlzaXQpO1xuICB9O1xufTtcblxudmFyIGdldEVudGl0aWVzID0gZnVuY3Rpb24gZ2V0RW50aXRpZXMoZW50aXRpZXMpIHtcbiAgdmFyIGlzSW1tdXRhYmxlJDEgPSBpc0ltbXV0YWJsZShlbnRpdGllcyk7XG4gIHJldHVybiBmdW5jdGlvbiAoZW50aXR5T3JJZCwgc2NoZW1hKSB7XG4gICAgdmFyIHNjaGVtYUtleSA9IHNjaGVtYS5rZXk7XG5cbiAgICBpZiAodHlwZW9mIGVudGl0eU9ySWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZW50aXR5T3JJZDtcbiAgICB9XG5cbiAgICBpZiAoaXNJbW11dGFibGUkMSkge1xuICAgICAgcmV0dXJuIGVudGl0aWVzLmdldEluKFtzY2hlbWFLZXksIGVudGl0eU9ySWQudG9TdHJpbmcoKV0pO1xuICAgIH1cblxuICAgIHJldHVybiBlbnRpdGllc1tzY2hlbWFLZXldICYmIGVudGl0aWVzW3NjaGVtYUtleV1bZW50aXR5T3JJZF07XG4gIH07XG59O1xuXG52YXIgZGVub3JtYWxpemUkMSA9IGZ1bmN0aW9uIGRlbm9ybWFsaXplKGlucHV0LCBzY2hlbWEsIGVudGl0aWVzKSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdldFVudmlzaXQoZW50aXRpZXMpKGlucHV0LCBzY2hlbWEpO1xuICB9XG59O1xuXG5leHBvcnQgeyBkZW5vcm1hbGl6ZSQxIGFzIGRlbm9ybWFsaXplLCBub3JtYWxpemUkMSBhcyBub3JtYWxpemUsIHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgbm9ybWFsaXplLCBzY2hlbWEgfSBmcm9tIFwibm9ybWFsaXpyXCI7XG5cbmNvbnN0IGNvdXJzZXMgPSBuZXcgc2NoZW1hLkVudGl0eShcImNvdXJzZXNcIik7XG5cbmNvbnN0IGNvdXJzZXNOb3JtYWxpemVyID0gKGRhdGEpID0+IHtcbiAgY29uc3Qgbm9ybWFsaXplZERhdGEgPSBub3JtYWxpemUoZGF0YSwgW2NvdXJzZXNdKTtcblxuICByZXR1cm4gbm9ybWFsaXplZERhdGEuZW50aXRpZXMuY291cnNlcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvdXJzZXNOb3JtYWxpemVyO1xuIiwiaW1wb3J0IHsgTWFwIH0gZnJvbSBcImltbXV0YWJsZVwiO1xuXG5pbXBvcnQge1xuICBGRVRDSF9DT1VSU0VfU1VDQ0VTUyxcbiAgU0VMRUNUX0NPVVJTRSxcbiAgVU5TRUxFQ1RfQ09VUlNFLFxufSBmcm9tIFwiLi4vYWN0aW9ucy9jb3Vyc2VBY3Rpb25UeXBlc1wiO1xuXG5pbXBvcnQgY291cnNlc05vcm1hbGl6ZXIgZnJvbSBcIi4uL3NjaGVtYS9jb3Vyc2VzXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQ291cnNlU3RhdGUgPSBbXTtcblxuY29uc3QgY291cnNlUmVkdWNlciA9IChzdGF0ZSA9IE1hcChpbml0aWFsQ291cnNlU3RhdGUpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRkVUQ0hfQ09VUlNFX1NVQ0NFU1M6XG4gICAgICBjb25zdCBub3JtYWxpemVkRGF0YSA9IGNvdXJzZXNOb3JtYWxpemVyKGFjdGlvbi5kYXRhKTtcbiAgICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWREYXRhKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICBub3JtYWxpemVkRGF0YVtrZXldLmlzU2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0YXRlLm1lcmdlKG5vcm1hbGl6ZWREYXRhKTtcblxuICAgIGNhc2UgU0VMRUNUX0NPVVJTRTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbU3RyaW5nKGFjdGlvbi5pbmRleCksIFwiaXNTZWxlY3RlZFwiXSwgdHJ1ZSk7XG5cbiAgICBjYXNlIFVOU0VMRUNUX0NPVVJTRTpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXRJbihbU3RyaW5nKGFjdGlvbi5pbmRleCksIFwiaXNTZWxlY3RlZFwiXSwgZmFsc2UpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvdXJzZVJlZHVjZXI7XG4iLCJpbXBvcnQgKiBhcyBub3RpZmljYXRpb25zRGF0YSBmcm9tIFwiLi4vLi4vbm90aWZpY2F0aW9ucy5qc29uXCI7XG5pbXBvcnQgeyBub3JtYWxpemUsIHNjaGVtYSB9IGZyb20gXCJub3JtYWxpenJcIjtcblxuY29uc3QgdXNlciA9IG5ldyBzY2hlbWEuRW50aXR5KFwidXNlcnNcIik7XG5cbmNvbnN0IG1lc3NhZ2UgPSBuZXcgc2NoZW1hLkVudGl0eShcbiAgXCJtZXNzYWdlc1wiLFxuICB7fSxcbiAge1xuICAgIGlkQXR0cmlidXRlOiBcImd1aWRcIixcbiAgfVxuKTtcblxuY29uc3Qgbm90aWZpY2F0aW9uID0gbmV3IHNjaGVtYS5FbnRpdHkoXCJub3RpZmljYXRpb25zXCIsIHtcbiAgYXV0aG9yOiB1c2VyLFxuICBjb250ZXh0OiBtZXNzYWdlLFxufSk7XG5cbmNvbnN0IG5vcm1hbGl6ZWREYXRhID0gbm9ybWFsaXplKG5vdGlmaWNhdGlvbnNEYXRhLmRlZmF1bHQsIFtub3RpZmljYXRpb25dKTtcblxuZXhwb3J0IHsgbm9ybWFsaXplZERhdGEgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbE5vdGlmaWNhdGlvbnNCeVVzZXIodXNlcklkKSB7XG4gIGNvbnN0IG5vdGlmaWNhdGlvbnMgPSBub3JtYWxpemVkRGF0YS5lbnRpdGllcy5ub3RpZmljYXRpb25zO1xuICBjb25zdCBtZXNzYWdlcyA9IG5vcm1hbGl6ZWREYXRhLmVudGl0aWVzLm1lc3NhZ2VzO1xuXG4gIGNvbnN0IG5vdGlmaWNhdGlvbnNCeVVzZXIgPSBbXTtcblxuICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIG5vdGlmaWNhdGlvbnMpIHtcbiAgICBpZiAobm90aWZpY2F0aW9uc1twcm9wZXJ0eV0uYXV0aG9yID09PSB1c2VySWQpIHtcbiAgICAgIG5vdGlmaWNhdGlvbnNCeVVzZXIucHVzaChtZXNzYWdlc1tub3RpZmljYXRpb25zW3Byb3BlcnR5XS5jb250ZXh0XSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5vdGlmaWNhdGlvbnNCeVVzZXI7XG59XG5cbmNvbnN0IG5vdGlmaWNhdGlvbnNOb3JtYWxpemVyID0gKGRhdGEpID0+IHtcbiAgY29uc3Qgbm9ybWFsaXplZERhdGEgPSBub3JtYWxpemUoZGF0YSwgW25vdGlmaWNhdGlvbl0pO1xuXG4gIHJldHVybiBub3JtYWxpemVkRGF0YS5lbnRpdGllcztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5vdGlmaWNhdGlvbnNOb3JtYWxpemVyO1xuIiwiaW1wb3J0IHsgTWFwLCBmcm9tSlMgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5cbmltcG9ydCB7XG4gIEZFVENIX05PVElGSUNBVElPTlNfU1VDQ0VTUyxcbiAgTUFSS19BU19SRUFELFxuICBTRVRfVFlQRV9GSUxURVIsXG4gIFNFVF9MT0FESU5HX1NUQVRFLFxufSBmcm9tIFwiLi4vYWN0aW9ucy9ub3RpZmljYXRpb25BY3Rpb25UeXBlc1wiO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbE5vdGlmaWNhdGlvblN0YXRlID0ge1xuICBub3RpZmljYXRpb25zOiB7fSxcbiAgZmlsdGVyOiBcIkRFRkFVTFRcIixcbiAgbG9hZGluZzogZmFsc2UsXG59O1xuXG5pbXBvcnQgbm90aWZpY2F0aW9uc05vcm1hbGl6ZXIgZnJvbSBcIi4uL3NjaGVtYS9ub3RpZmljYXRpb25zXCI7XG5cbmNvbnN0IG5vdGlmaWNhdGlvblJlZHVjZXIgPSAoc3RhdGUgPSBNYXAoaW5pdGlhbE5vdGlmaWNhdGlvblN0YXRlKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEZFVENIX05PVElGSUNBVElPTlNfU1VDQ0VTUzpcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWREYXRhID0gbm90aWZpY2F0aW9uc05vcm1hbGl6ZXIoYWN0aW9uLmRhdGEpO1xuXG4gICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkRGF0YS5ub3RpZmljYXRpb25zKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICBub3JtYWxpemVkRGF0YS5ub3RpZmljYXRpb25zW2tleV0uaXNSZWFkID0gZmFsc2U7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHN0YXRlLm1lcmdlRGVlcChmcm9tSlMobm9ybWFsaXplZERhdGEpKTtcblxuICAgIGNhc2UgTUFSS19BU19SRUFEOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldEluKFtcIm1lc3NhZ2VzXCIsIFN0cmluZyhhY3Rpb24uaW5kZXgpLCBcImlzUmVhZFwiXSwgdHJ1ZSk7XG5cbiAgICBjYXNlIFNFVF9UWVBFX0ZJTFRFUjpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoXCJmaWx0ZXJcIiwgYWN0aW9uLmZpbHRlcik7XG5cbiAgICBjYXNlIFNFVF9MT0FESU5HX1NUQVRFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldChcImxvYWRpbmdcIiwgYWN0aW9uLmxvYWRpbmcpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzdGF0ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG5vdGlmaWNhdGlvblJlZHVjZXI7XG4iLCJpbXBvcnQgeyBNYXAgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5pbXBvcnQgeyBsb2dvdXQgfSBmcm9tIFwiLi4vYWN0aW9ucy91aUFjdGlvbkNyZWF0b3JzXCI7XG5cbmltcG9ydCB7XG4gIExPR0lOLFxuICBMT0dPVVQsXG4gIERJU1BMQVlfTk9USUZJQ0FUSU9OX0RSQVdFUixcbiAgSElERV9OT1RJRklDQVRJT05fRFJBV0VSLFxuICBMT0dJTl9TVUNDRVNTLFxuICBMT0dJTl9GQUlMVVJFLFxufSBmcm9tIFwiLi4vYWN0aW9ucy91aUFjdGlvblR5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsVWlTdGF0ZSA9IHtcbiAgaXNOb3RpZmljYXRpb25EcmF3ZXJWaXNpYmxlOiBmYWxzZSxcbiAgaXNVc2VyTG9nZ2VkSW46IGZhbHNlLFxuICB1c2VyOiBudWxsLFxufTtcblxuY29uc3QgdWlSZWR1Y2VyID0gKHN0YXRlID0gTWFwKGluaXRpYWxVaVN0YXRlKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIERJU1BMQVlfTk9USUZJQ0FUSU9OX0RSQVdFUjpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoXCJpc05vdGlmaWNhdGlvbkRyYXdlclZpc2libGVcIiwgdHJ1ZSk7XG5cbiAgICBjYXNlIEhJREVfTk9USUZJQ0FUSU9OX0RSQVdFUjpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoXCJpc05vdGlmaWNhdGlvbkRyYXdlclZpc2libGVcIiwgZmFsc2UpO1xuXG4gICAgY2FzZSBMT0dJTl9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldChcImlzVXNlckxvZ2dlZEluXCIsIHRydWUpO1xuXG4gICAgY2FzZSBMT0dJTl9GQUlMVVJFOlxuICAgICAgcmV0dXJuIHN0YXRlLnNldChcImlzVXNlckxvZ2dlZEluXCIsIGZhbHNlKTtcblxuICAgIGNhc2UgTE9HSU46XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KFwidXNlclwiLCBhY3Rpb24udXNlcik7XG5cbiAgICBjYXNlIExPR09VVDpcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoXCJpc1VzZXJMb2dnZWRJblwiLCBmYWxzZSkuc2V0KFwidXNlclwiLCBudWxsKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1aVJlZHVjZXI7XG4iLCJpbXBvcnQgY291cnNlUmVkdWNlciwgeyBpbml0aWFsQ291cnNlU3RhdGUgfSBmcm9tIFwiLi9jb3Vyc2VSZWR1Y2VyXCI7XG5pbXBvcnQgbm90aWZpY2F0aW9uUmVkdWNlciwge1xuICBpbml0aWFsTm90aWZpY2F0aW9uU3RhdGUsXG59IGZyb20gXCIuL25vdGlmaWNhdGlvblJlZHVjZXJcIjtcbmltcG9ydCB1aVJlZHVjZXIsIHsgaW5pdGlhbFVpU3RhdGUgfSBmcm9tIFwiLi91aVJlZHVjZXJcIjtcblxuaW1wb3J0IHsgTWFwIH0gZnJvbSBcImltbXV0YWJsZVwiO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBjb3Vyc2VzOiBNYXAoaW5pdGlhbENvdXJzZVN0YXRlKSxcbiAgbm90aWZpY2F0aW9uczogTWFwKGluaXRpYWxOb3RpZmljYXRpb25TdGF0ZSksXG4gIHVpOiBNYXAoaW5pdGlhbFVpU3RhdGUpLFxufTtcblxuY29uc3Qgcm9vdFJlZHVjZXIgPSB7XG4gIGNvdXJzZXM6IGNvdXJzZVJlZHVjZXIsXG4gIG5vdGlmaWNhdGlvbnM6IG5vdGlmaWNhdGlvblJlZHVjZXIsXG4gIHVpOiB1aVJlZHVjZXIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCByb290UmVkdWNlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcbi8vIGltcG9ydCB7IGNvbXBvc2VXaXRoRGV2VG9vbHMgfSBmcm9tIFwicmVkdXgtZGV2dG9vbHMtZXh0ZW5zaW9uXCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHRodW5rIGZyb20gXCJyZWR1eC10aHVua1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHAvQXBwXCI7XG5pbXBvcnQgcm9vdFJlZHVjZXIsIHsgaW5pdGlhbFN0YXRlIH0gZnJvbSBcIi4vcmVkdWNlcnMvcm9vdFJlZHVjZXJcIjtcblxuLy8gY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbi8vICAgdWlSZWR1Y2VyLFxuLy8gICBNYXAoaW5pdGlhbFN0YXRlKSxcbi8vICAgY29tcG9zZVdpdGhEZXZUb29scyhhcHBseU1pZGRsZXdhcmUodGh1bmspKVxuLy8gKTtcblxuY29uc3QgY29tcG9zZUVuaGFuY2VycyA9IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gfHwgY29tcG9zZTtcblxuY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgY29tYmluZVJlZHVjZXJzKHJvb3RSZWR1Y2VyKSxcbiAgaW5pdGlhbFN0YXRlLFxuICBjb21wb3NlRW5oYW5jZXJzKGFwcGx5TWlkZGxld2FyZSh0aHVuaykpXG4pO1xuXG5SZWFjdERPTS5yZW5kZXIoXG4gIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgIDxQcm92aWRlciBzdG9yZT17c3RvcmV9PlxuICAgICAgPEFwcCAvPlxuICAgIDwvUHJvdmlkZXI+XG4gIDwvUmVhY3QuU3RyaWN0TW9kZT4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJlZjogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gKCkge1xuXHQvLyB0aGUgb25seSByZWxpYWJsZSBtZWFucyB0byBnZXQgdGhlIGdsb2JhbCBvYmplY3QgaXNcblx0Ly8gYEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKClgXG5cdC8vIEhvd2V2ZXIsIHRoaXMgY2F1c2VzIENTUCB2aW9sYXRpb25zIGluIENocm9tZSBhcHBzLlxuXHRpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBzZWxmOyB9XG5cdGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gd2luZG93OyB9XG5cdGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZ2xvYmFsOyB9XG5cdHRocm93IG5ldyBFcnJvcigndW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0Jyk7XG59XG5cbnZhciBnbG9iYWwgPSBnZXRHbG9iYWwoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZ2xvYmFsLmZldGNoO1xuXG4vLyBOZWVkZWQgZm9yIFR5cGVTY3JpcHQgYW5kIFdlYnBhY2suXG5pZiAoZ2xvYmFsLmZldGNoKSB7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGdsb2JhbC5mZXRjaC5iaW5kKGdsb2JhbCk7XG59XG5cbmV4cG9ydHMuSGVhZGVycyA9IGdsb2JhbC5IZWFkZXJzO1xuZXhwb3J0cy5SZXF1ZXN0ID0gZ2xvYmFsLlJlcXVlc3Q7XG5leHBvcnRzLlJlc3BvbnNlID0gZ2xvYmFsLlJlc3BvbnNlOyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjE0LjBcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTQuMFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLHA9bj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxxPW4/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixyPW4/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHQ9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx2PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHc9bj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx4PW4/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHk9bj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsej1uP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LEE9bj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTpcbjYwMTE2LEI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEMoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgRD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sRT17fTtmdW5jdGlvbiBGKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9Ri5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtGLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoQyg4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Ri5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBHKCl7fUcucHJvdG90eXBlPUYucHJvdG90eXBlO2Z1bmN0aW9uIEgoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH12YXIgST1ILnByb3RvdHlwZT1uZXcgRztJLmNvbnN0cnVjdG9yPUg7bChJLEYucHJvdG90eXBlKTtJLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBKPXtjdXJyZW50Om51bGx9LEs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixjKXt2YXIgZSxkPXt9LGc9bnVsbCxrPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUsuY2FsbChiLGUpJiYhTC5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zm9yKHZhciBoPUFycmF5KGYpLG09MDttPGY7bSsrKWhbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1ofWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2VdJiYoZFtlXT1mW2VdKTtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEsa2V5OmcscmVmOmsscHJvcHM6ZCxfb3duZXI6Si5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXB9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nLFE9W107ZnVuY3Rpb24gUihhLGIsYyxlKXtpZihRLmxlbmd0aCl7dmFyIGQ9US5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWM7ZC5jb250ZXh0PWU7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmMsY29udGV4dDplLGNvdW50OjB9fVxuZnVuY3Rpb24gUyhhKXthLnJlc3VsdD1udWxsO2Eua2V5UHJlZml4PW51bGw7YS5mdW5jPW51bGw7YS5jb250ZXh0PW51bGw7YS5jb3VudD0wOzEwPlEubGVuZ3RoJiZRLnB1c2goYSl9XG5mdW5jdGlvbiBUKGEsYixjLGUpe3ZhciBkPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1kfHxcImJvb2xlYW5cIj09PWQpYT1udWxsO3ZhciBnPSExO2lmKG51bGw9PT1hKWc9ITA7ZWxzZSBzd2l0Y2goZCl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpnPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBwOmNhc2UgcTpnPSEwfX1pZihnKXJldHVybiBjKGUsYSxcIlwiPT09Yj9cIi5cIitVKGEsMCk6YiksMTtnPTA7Yj1cIlwiPT09Yj9cIi5cIjpiK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBrPTA7azxhLmxlbmd0aDtrKyspe2Q9YVtrXTt2YXIgZj1iK1UoZCxrKTtnKz1UKGQsZixjLGUpfWVsc2UgaWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYT9mPW51bGw6KGY9QiYmYVtCXXx8YVtcIkBAaXRlcmF0b3JcIl0sZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgZj9mOm51bGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxrPVxuMDshKGQ9YS5uZXh0KCkpLmRvbmU7KWQ9ZC52YWx1ZSxmPWIrVShkLGsrKyksZys9VChkLGYsYyxlKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1kKXRocm93IGM9XCJcIithLEVycm9yKEMoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWM/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YyxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gVihhLGIsYyl7cmV0dXJuIG51bGw9PWE/MDpUKGEsXCJcIixiLGMpfWZ1bmN0aW9uIFUoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFcoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gYWEoYSxiLGMpe3ZhciBlPWEucmVzdWx0LGQ9YS5rZXlQcmVmaXg7YT1hLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspO0FycmF5LmlzQXJyYXkoYSk/WChhLGUsYyxmdW5jdGlvbihhKXtyZXR1cm4gYX0pOm51bGwhPWEmJihPKGEpJiYoYT1OKGEsZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYykpLGUucHVzaChhKSl9ZnVuY3Rpb24gWChhLGIsYyxlLGQpe3ZhciBnPVwiXCI7bnVsbCE9YyYmKGc9KFwiXCIrYykucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKTtiPVIoYixnLGUsZCk7VihhLGFhLGIpO1MoYil9dmFyIFk9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gWigpe3ZhciBhPVkuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcihDKDMyMSkpO3JldHVybiBhfVxudmFyIGJhPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlksUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3N1c3BlbnNlOm51bGx9LFJlYWN0Q3VycmVudE93bmVyOkosSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W107WChhLGUsbnVsbCxiLGMpO3JldHVybiBlfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO2I9UihudWxsLG51bGwsYixjKTtWKGEsVyxiKTtTKGIpfSxjb3VudDpmdW5jdGlvbihhKXtyZXR1cm4gVihhLGZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LG51bGwpfSx0b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPVtdO1goYSxiLG51bGwsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTtyZXR1cm4gYn0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihDKDE0MykpO3JldHVybiBhfX07XG5leHBvcnRzLkNvbXBvbmVudD1GO2V4cG9ydHMuRnJhZ21lbnQ9cjtleHBvcnRzLlByb2ZpbGVyPXU7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUg7ZXhwb3J0cy5TdHJpY3RNb2RlPXQ7ZXhwb3J0cy5TdXNwZW5zZT15O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9YmE7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoQygyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxnPWEucmVmLGs9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihnPWIucmVmLGs9Si5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBmPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGggaW4gYilLLmNhbGwoYixoKSYmIUwuaGFzT3duUHJvcGVydHkoaCkmJihlW2hdPXZvaWQgMD09PWJbaF0mJnZvaWQgMCE9PWY/ZltoXTpiW2hdKX12YXIgaD1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWgpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxoKXtmPUFycmF5KGgpO2Zvcih2YXIgbT0wO208aDttKyspZlttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWZ9cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6Zyxwcm9wczplLF9vd25lcjprfX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6dyxfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnYsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOngscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOkEsX2N0b3I6YSxfc3RhdHVzOi0xLF9yZXN1bHQ6bnVsbH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp6LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gWigpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xNC4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4xXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICB2YXIgaGFzaCA9IDUzODEsXG4gICAgICBpICAgID0gc3RyLmxlbmd0aDtcblxuICB3aGlsZShpKSB7XG4gICAgaGFzaCA9IChoYXNoICogMzMpIF4gc3RyLmNoYXJDb2RlQXQoLS1pKTtcbiAgfVxuXG4gIC8qIEphdmFTY3JpcHQgZG9lcyBiaXR3aXNlIG9wZXJhdGlvbnMgKGxpa2UgWE9SLCBhYm92ZSkgb24gMzItYml0IHNpZ25lZFxuICAgKiBpbnRlZ2Vycy4gU2luY2Ugd2Ugd2FudCB0aGUgcmVzdWx0cyB0byBiZSBhbHdheXMgcG9zaXRpdmUsIGNvbnZlcnQgdGhlXG4gICAqIHNpZ25lZCBpbnQgdG8gYW4gdW5zaWduZWQgYnkgZG9pbmcgYW4gdW5zaWduZWQgYml0c2hpZnQuICovXG4gIHJldHVybiBoYXNoID4+PiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2g7XG4iLCIvKiBnbG9iYWwgd2luZG93ICovXG5pbXBvcnQgcG9ueWZpbGwgZnJvbSAnLi9wb255ZmlsbC5qcyc7XG5cbnZhciByb290O1xuXG5pZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBzZWxmO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gbW9kdWxlO1xufSBlbHNlIHtcbiAgcm9vdCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG59XG5cbnZhciByZXN1bHQgPSBwb255ZmlsbChyb290KTtcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG5cdHZhciByZXN1bHQ7XG5cdHZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxuXHRpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sLm9ic2VydmFibGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuXHRcdFx0U3ltYm9sLm9ic2VydmFibGUgPSByZXN1bHQ7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHJlc3VsdCA9ICdAQG9ic2VydmFibGUnO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaG1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG1vZHVsZSk7XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgJ2V4cG9ydHMnLCB7XG5cdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRzZXQ6ICgpID0+IHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRVMgTW9kdWxlcyBtYXkgbm90IGFzc2lnbiBtb2R1bGUuZXhwb3J0cyBvciBleHBvcnRzLiosIFVzZSBFU00gZXhwb3J0IHN5bnRheCwgaW5zdGVhZDogJyArIG1vZHVsZS5pZCk7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBkb2Vzbid0IHRlbGwgYWJvdXQgaXQncyB0b3AtbGV2ZWwgZGVjbGFyYXRpb25zIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7XG4iXSwic291cmNlUm9vdCI6IiJ9